
magnetometro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c3c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08003cfc  08003cfc  00013cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e0c  08003e0c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003e0c  08003e0c  00013e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e14  08003e14  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e14  08003e14  00013e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e18  08003e18  00013e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000070  08003e8c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08003e8c  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca83  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001981  00000000  00000000  0002cb1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  0002e4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000870  00000000  00000000  0002eda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011c45  00000000  00000000  0002f618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf78  00000000  00000000  0004125d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006c95f  00000000  00000000  0004d1d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b9b34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023ec  00000000  00000000  000b9b88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003ce4 	.word	0x08003ce4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003ce4 	.word	0x08003ce4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	1c08      	adds	r0, r1, #0
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f82e 	bl	80002c4 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	0415      	lsls	r5, r2, #16
 8000278:	0c2d      	lsrs	r5, r5, #16
 800027a:	000f      	movs	r7, r1
 800027c:	0001      	movs	r1, r0
 800027e:	002e      	movs	r6, r5
 8000280:	46c6      	mov	lr, r8
 8000282:	4684      	mov	ip, r0
 8000284:	0400      	lsls	r0, r0, #16
 8000286:	0c14      	lsrs	r4, r2, #16
 8000288:	0c00      	lsrs	r0, r0, #16
 800028a:	0c09      	lsrs	r1, r1, #16
 800028c:	4346      	muls	r6, r0
 800028e:	434d      	muls	r5, r1
 8000290:	4360      	muls	r0, r4
 8000292:	4361      	muls	r1, r4
 8000294:	1940      	adds	r0, r0, r5
 8000296:	0c34      	lsrs	r4, r6, #16
 8000298:	1824      	adds	r4, r4, r0
 800029a:	b500      	push	{lr}
 800029c:	42a5      	cmp	r5, r4
 800029e:	d903      	bls.n	80002a8 <__aeabi_lmul+0x34>
 80002a0:	2080      	movs	r0, #128	; 0x80
 80002a2:	0240      	lsls	r0, r0, #9
 80002a4:	4680      	mov	r8, r0
 80002a6:	4441      	add	r1, r8
 80002a8:	0c25      	lsrs	r5, r4, #16
 80002aa:	186d      	adds	r5, r5, r1
 80002ac:	4661      	mov	r1, ip
 80002ae:	4359      	muls	r1, r3
 80002b0:	437a      	muls	r2, r7
 80002b2:	0430      	lsls	r0, r6, #16
 80002b4:	1949      	adds	r1, r1, r5
 80002b6:	0424      	lsls	r4, r4, #16
 80002b8:	0c00      	lsrs	r0, r0, #16
 80002ba:	1820      	adds	r0, r4, r0
 80002bc:	1889      	adds	r1, r1, r2
 80002be:	bc80      	pop	{r7}
 80002c0:	46b8      	mov	r8, r7
 80002c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002c4 <__udivmoddi4>:
 80002c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c6:	4657      	mov	r7, sl
 80002c8:	464e      	mov	r6, r9
 80002ca:	4645      	mov	r5, r8
 80002cc:	46de      	mov	lr, fp
 80002ce:	b5e0      	push	{r5, r6, r7, lr}
 80002d0:	0004      	movs	r4, r0
 80002d2:	000d      	movs	r5, r1
 80002d4:	4692      	mov	sl, r2
 80002d6:	4699      	mov	r9, r3
 80002d8:	b083      	sub	sp, #12
 80002da:	428b      	cmp	r3, r1
 80002dc:	d830      	bhi.n	8000340 <__udivmoddi4+0x7c>
 80002de:	d02d      	beq.n	800033c <__udivmoddi4+0x78>
 80002e0:	4649      	mov	r1, r9
 80002e2:	4650      	mov	r0, sl
 80002e4:	f000 f8ba 	bl	800045c <__clzdi2>
 80002e8:	0029      	movs	r1, r5
 80002ea:	0006      	movs	r6, r0
 80002ec:	0020      	movs	r0, r4
 80002ee:	f000 f8b5 	bl	800045c <__clzdi2>
 80002f2:	1a33      	subs	r3, r6, r0
 80002f4:	4698      	mov	r8, r3
 80002f6:	3b20      	subs	r3, #32
 80002f8:	469b      	mov	fp, r3
 80002fa:	d433      	bmi.n	8000364 <__udivmoddi4+0xa0>
 80002fc:	465a      	mov	r2, fp
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	4642      	mov	r2, r8
 8000304:	001f      	movs	r7, r3
 8000306:	4653      	mov	r3, sl
 8000308:	4093      	lsls	r3, r2
 800030a:	001e      	movs	r6, r3
 800030c:	42af      	cmp	r7, r5
 800030e:	d83a      	bhi.n	8000386 <__udivmoddi4+0xc2>
 8000310:	42af      	cmp	r7, r5
 8000312:	d100      	bne.n	8000316 <__udivmoddi4+0x52>
 8000314:	e078      	b.n	8000408 <__udivmoddi4+0x144>
 8000316:	465b      	mov	r3, fp
 8000318:	1ba4      	subs	r4, r4, r6
 800031a:	41bd      	sbcs	r5, r7
 800031c:	2b00      	cmp	r3, #0
 800031e:	da00      	bge.n	8000322 <__udivmoddi4+0x5e>
 8000320:	e075      	b.n	800040e <__udivmoddi4+0x14a>
 8000322:	2200      	movs	r2, #0
 8000324:	2300      	movs	r3, #0
 8000326:	9200      	str	r2, [sp, #0]
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	465a      	mov	r2, fp
 800032e:	4093      	lsls	r3, r2
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	4642      	mov	r2, r8
 8000336:	4093      	lsls	r3, r2
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	e028      	b.n	800038e <__udivmoddi4+0xca>
 800033c:	4282      	cmp	r2, r0
 800033e:	d9cf      	bls.n	80002e0 <__udivmoddi4+0x1c>
 8000340:	2200      	movs	r2, #0
 8000342:	2300      	movs	r3, #0
 8000344:	9200      	str	r2, [sp, #0]
 8000346:	9301      	str	r3, [sp, #4]
 8000348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <__udivmoddi4+0x8e>
 800034e:	601c      	str	r4, [r3, #0]
 8000350:	605d      	str	r5, [r3, #4]
 8000352:	9800      	ldr	r0, [sp, #0]
 8000354:	9901      	ldr	r1, [sp, #4]
 8000356:	b003      	add	sp, #12
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	46bb      	mov	fp, r7
 800035c:	46b2      	mov	sl, r6
 800035e:	46a9      	mov	r9, r5
 8000360:	46a0      	mov	r8, r4
 8000362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000364:	4642      	mov	r2, r8
 8000366:	2320      	movs	r3, #32
 8000368:	1a9b      	subs	r3, r3, r2
 800036a:	4652      	mov	r2, sl
 800036c:	40da      	lsrs	r2, r3
 800036e:	4641      	mov	r1, r8
 8000370:	0013      	movs	r3, r2
 8000372:	464a      	mov	r2, r9
 8000374:	408a      	lsls	r2, r1
 8000376:	0017      	movs	r7, r2
 8000378:	4642      	mov	r2, r8
 800037a:	431f      	orrs	r7, r3
 800037c:	4653      	mov	r3, sl
 800037e:	4093      	lsls	r3, r2
 8000380:	001e      	movs	r6, r3
 8000382:	42af      	cmp	r7, r5
 8000384:	d9c4      	bls.n	8000310 <__udivmoddi4+0x4c>
 8000386:	2200      	movs	r2, #0
 8000388:	2300      	movs	r3, #0
 800038a:	9200      	str	r2, [sp, #0]
 800038c:	9301      	str	r3, [sp, #4]
 800038e:	4643      	mov	r3, r8
 8000390:	2b00      	cmp	r3, #0
 8000392:	d0d9      	beq.n	8000348 <__udivmoddi4+0x84>
 8000394:	07fb      	lsls	r3, r7, #31
 8000396:	0872      	lsrs	r2, r6, #1
 8000398:	431a      	orrs	r2, r3
 800039a:	4646      	mov	r6, r8
 800039c:	087b      	lsrs	r3, r7, #1
 800039e:	e00e      	b.n	80003be <__udivmoddi4+0xfa>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	d101      	bne.n	80003a8 <__udivmoddi4+0xe4>
 80003a4:	42a2      	cmp	r2, r4
 80003a6:	d80c      	bhi.n	80003c2 <__udivmoddi4+0xfe>
 80003a8:	1aa4      	subs	r4, r4, r2
 80003aa:	419d      	sbcs	r5, r3
 80003ac:	2001      	movs	r0, #1
 80003ae:	1924      	adds	r4, r4, r4
 80003b0:	416d      	adcs	r5, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	3e01      	subs	r6, #1
 80003b6:	1824      	adds	r4, r4, r0
 80003b8:	414d      	adcs	r5, r1
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d006      	beq.n	80003cc <__udivmoddi4+0x108>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d9ee      	bls.n	80003a0 <__udivmoddi4+0xdc>
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1924      	adds	r4, r4, r4
 80003c6:	416d      	adcs	r5, r5
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d1f8      	bne.n	80003be <__udivmoddi4+0xfa>
 80003cc:	9800      	ldr	r0, [sp, #0]
 80003ce:	9901      	ldr	r1, [sp, #4]
 80003d0:	465b      	mov	r3, fp
 80003d2:	1900      	adds	r0, r0, r4
 80003d4:	4169      	adcs	r1, r5
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	db24      	blt.n	8000424 <__udivmoddi4+0x160>
 80003da:	002b      	movs	r3, r5
 80003dc:	465a      	mov	r2, fp
 80003de:	4644      	mov	r4, r8
 80003e0:	40d3      	lsrs	r3, r2
 80003e2:	002a      	movs	r2, r5
 80003e4:	40e2      	lsrs	r2, r4
 80003e6:	001c      	movs	r4, r3
 80003e8:	465b      	mov	r3, fp
 80003ea:	0015      	movs	r5, r2
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	db2a      	blt.n	8000446 <__udivmoddi4+0x182>
 80003f0:	0026      	movs	r6, r4
 80003f2:	409e      	lsls	r6, r3
 80003f4:	0033      	movs	r3, r6
 80003f6:	0026      	movs	r6, r4
 80003f8:	4647      	mov	r7, r8
 80003fa:	40be      	lsls	r6, r7
 80003fc:	0032      	movs	r2, r6
 80003fe:	1a80      	subs	r0, r0, r2
 8000400:	4199      	sbcs	r1, r3
 8000402:	9000      	str	r0, [sp, #0]
 8000404:	9101      	str	r1, [sp, #4]
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x84>
 8000408:	42a3      	cmp	r3, r4
 800040a:	d8bc      	bhi.n	8000386 <__udivmoddi4+0xc2>
 800040c:	e783      	b.n	8000316 <__udivmoddi4+0x52>
 800040e:	4642      	mov	r2, r8
 8000410:	2320      	movs	r3, #32
 8000412:	2100      	movs	r1, #0
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	2200      	movs	r2, #0
 8000418:	9100      	str	r1, [sp, #0]
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	2201      	movs	r2, #1
 800041e:	40da      	lsrs	r2, r3
 8000420:	9201      	str	r2, [sp, #4]
 8000422:	e786      	b.n	8000332 <__udivmoddi4+0x6e>
 8000424:	4642      	mov	r2, r8
 8000426:	2320      	movs	r3, #32
 8000428:	1a9b      	subs	r3, r3, r2
 800042a:	002a      	movs	r2, r5
 800042c:	4646      	mov	r6, r8
 800042e:	409a      	lsls	r2, r3
 8000430:	0023      	movs	r3, r4
 8000432:	40f3      	lsrs	r3, r6
 8000434:	4644      	mov	r4, r8
 8000436:	4313      	orrs	r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	40e2      	lsrs	r2, r4
 800043c:	001c      	movs	r4, r3
 800043e:	465b      	mov	r3, fp
 8000440:	0015      	movs	r5, r2
 8000442:	2b00      	cmp	r3, #0
 8000444:	dad4      	bge.n	80003f0 <__udivmoddi4+0x12c>
 8000446:	4642      	mov	r2, r8
 8000448:	002f      	movs	r7, r5
 800044a:	2320      	movs	r3, #32
 800044c:	0026      	movs	r6, r4
 800044e:	4097      	lsls	r7, r2
 8000450:	1a9b      	subs	r3, r3, r2
 8000452:	40de      	lsrs	r6, r3
 8000454:	003b      	movs	r3, r7
 8000456:	4333      	orrs	r3, r6
 8000458:	e7cd      	b.n	80003f6 <__udivmoddi4+0x132>
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__clzdi2>:
 800045c:	b510      	push	{r4, lr}
 800045e:	2900      	cmp	r1, #0
 8000460:	d103      	bne.n	800046a <__clzdi2+0xe>
 8000462:	f000 f807 	bl	8000474 <__clzsi2>
 8000466:	3020      	adds	r0, #32
 8000468:	e002      	b.n	8000470 <__clzdi2+0x14>
 800046a:	1c08      	adds	r0, r1, #0
 800046c:	f000 f802 	bl	8000474 <__clzsi2>
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__clzsi2>:
 8000474:	211c      	movs	r1, #28
 8000476:	2301      	movs	r3, #1
 8000478:	041b      	lsls	r3, r3, #16
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0xe>
 800047e:	0c00      	lsrs	r0, r0, #16
 8000480:	3910      	subs	r1, #16
 8000482:	0a1b      	lsrs	r3, r3, #8
 8000484:	4298      	cmp	r0, r3
 8000486:	d301      	bcc.n	800048c <__clzsi2+0x18>
 8000488:	0a00      	lsrs	r0, r0, #8
 800048a:	3908      	subs	r1, #8
 800048c:	091b      	lsrs	r3, r3, #4
 800048e:	4298      	cmp	r0, r3
 8000490:	d301      	bcc.n	8000496 <__clzsi2+0x22>
 8000492:	0900      	lsrs	r0, r0, #4
 8000494:	3904      	subs	r1, #4
 8000496:	a202      	add	r2, pc, #8	; (adr r2, 80004a0 <__clzsi2+0x2c>)
 8000498:	5c10      	ldrb	r0, [r2, r0]
 800049a:	1840      	adds	r0, r0, r1
 800049c:	4770      	bx	lr
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	02020304 	.word	0x02020304
 80004a4:	01010101 	.word	0x01010101
	...

080004b0 <magnetometter_init>:

	return check; // Check if the device is ok
}

uint8_t magnetometter_init(I2C_HandleTypeDef *I2Cx)
{
 80004b0:	b5b0      	push	{r4, r5, r7, lr}
 80004b2:	b088      	sub	sp, #32
 80004b4:	af04      	add	r7, sp, #16
 80004b6:	6078      	str	r0, [r7, #4]
	uint8_t ret = 1;
 80004b8:	250f      	movs	r5, #15
 80004ba:	197b      	adds	r3, r7, r5
 80004bc:	2201      	movs	r2, #1
 80004be:	701a      	strb	r2, [r3, #0]
	uint8_t check; //Check if device is ok
	uint8_t Data; //Receive data
	uint8_t databyte; //Write data

	// read and check the FXOS8700CQ WHOAMI register
	HAL_I2C_Mem_Read(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_WHOAMI, 1, &check, 1, i2c_timeout);
 80004c0:	6878      	ldr	r0, [r7, #4]
 80004c2:	2364      	movs	r3, #100	; 0x64
 80004c4:	9302      	str	r3, [sp, #8]
 80004c6:	2301      	movs	r3, #1
 80004c8:	9301      	str	r3, [sp, #4]
 80004ca:	240e      	movs	r4, #14
 80004cc:	193b      	adds	r3, r7, r4
 80004ce:	9300      	str	r3, [sp, #0]
 80004d0:	2301      	movs	r3, #1
 80004d2:	220d      	movs	r2, #13
 80004d4:	213c      	movs	r1, #60	; 0x3c
 80004d6:	f001 f833 	bl	8001540 <HAL_I2C_Mem_Read>
	if(check == FXOS8700CQ_WHOAMI_VAL)
 80004da:	193b      	adds	r3, r7, r4
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2bc7      	cmp	r3, #199	; 0xc7
 80004e0:	d156      	bne.n	8000590 <magnetometter_init+0xe0>
	{
		// write 0000 0000 = 0x00 to accelerometer control register 1 to place FXOS8700CQ into
		// standby
		// [7-1] = 0000 000
		// [0]: active=0
		databyte = 0x00;
 80004e2:	210d      	movs	r1, #13
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	2200      	movs	r2, #0
 80004e8:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG1, 1, &databyte, 1, i2c_timeout);
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	2364      	movs	r3, #100	; 0x64
 80004ee:	9302      	str	r3, [sp, #8]
 80004f0:	2301      	movs	r3, #1
 80004f2:	9301      	str	r3, [sp, #4]
 80004f4:	000c      	movs	r4, r1
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	2301      	movs	r3, #1
 80004fc:	222a      	movs	r2, #42	; 0x2a
 80004fe:	213c      	movs	r1, #60	; 0x3c
 8000500:	f000 fef0 	bl	80012e4 <HAL_I2C_Mem_Write>
		// [7]: m_acal=0: auto calibration disabled
		// [6]: m_rst=0: no one-shot magnetic reset
		// [5]: m_ost=0: no one-shot magnetic measurement
		// [4-2]: m_os=111=7: 8x oversampling (for 200Hz) to reduce magnetometer noise
		// [1-0]: m_hms=11=3: select hybrid mode with accel and magnetometer active
		databyte = 0x1F;
 8000504:	0021      	movs	r1, r4
 8000506:	187b      	adds	r3, r7, r1
 8000508:	221f      	movs	r2, #31
 800050a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_M_CTRL_REG1, 1, &databyte, 1, i2c_timeout);
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	2364      	movs	r3, #100	; 0x64
 8000510:	9302      	str	r3, [sp, #8]
 8000512:	2301      	movs	r3, #1
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	000c      	movs	r4, r1
 8000518:	187b      	adds	r3, r7, r1
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	2301      	movs	r3, #1
 800051e:	225b      	movs	r2, #91	; 0x5b
 8000520:	213c      	movs	r1, #60	; 0x3c
 8000522:	f000 fedf 	bl	80012e4 <HAL_I2C_Mem_Write>
		// accelerometer registers
		// [4]: m_maxmin_dis=0 to retain default min/max latching even though not used
		// [3]: m_maxmin_dis_ths=0
		// [2]: m_maxmin_rst=0
		// [1-0]: m_rst_cnt=00 to enable magnetic reset each cycle
		databyte = 0x20;
 8000526:	0021      	movs	r1, r4
 8000528:	187b      	adds	r3, r7, r1
 800052a:	2220      	movs	r2, #32
 800052c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_M_CTRL_REG2, 1, &databyte, 1, i2c_timeout);
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	2364      	movs	r3, #100	; 0x64
 8000532:	9302      	str	r3, [sp, #8]
 8000534:	2301      	movs	r3, #1
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	000c      	movs	r4, r1
 800053a:	187b      	adds	r3, r7, r1
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	2301      	movs	r3, #1
 8000540:	225c      	movs	r2, #92	; 0x5c
 8000542:	213c      	movs	r1, #60	; 0x3c
 8000544:	f000 fece 	bl	80012e4 <HAL_I2C_Mem_Write>
		// [5]: reserved
		// [4]: hpf_out=0
		// [3]: reserved
		// [2]: reserved
		// [1-0]: fs=01 for accelerometer range of +/-4g range with 0.488mg/LSB
		databyte = 0x01;
 8000548:	0021      	movs	r1, r4
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2201      	movs	r2, #1
 800054e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_XYZ_DATA_CFG, 1, &databyte, 1, i2c_timeout);
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	2364      	movs	r3, #100	; 0x64
 8000554:	9302      	str	r3, [sp, #8]
 8000556:	2301      	movs	r3, #1
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	000c      	movs	r4, r1
 800055c:	187b      	adds	r3, r7, r1
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	2301      	movs	r3, #1
 8000562:	220e      	movs	r2, #14
 8000564:	213c      	movs	r1, #60	; 0x3c
 8000566:	f000 febd 	bl	80012e4 <HAL_I2C_Mem_Write>
		// [7-6]: aslp_rate=00
		// [5-3]: dr=001 for 200Hz data rate (when in hybrid mode)
		// [2]: lnoise=1 for low noise mode
		// [1]: f_read=0 for normal 16 bit reads
		// [0]: active=1 to take the part out of standby and enable sampling
		databyte =  0x0D;
 800056a:	0021      	movs	r1, r4
 800056c:	187b      	adds	r3, r7, r1
 800056e:	220d      	movs	r2, #13
 8000570:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG1, 1, &databyte, 1, i2c_timeout);
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	2364      	movs	r3, #100	; 0x64
 8000576:	9302      	str	r3, [sp, #8]
 8000578:	2301      	movs	r3, #1
 800057a:	9301      	str	r3, [sp, #4]
 800057c:	187b      	adds	r3, r7, r1
 800057e:	9300      	str	r3, [sp, #0]
 8000580:	2301      	movs	r3, #1
 8000582:	222a      	movs	r2, #42	; 0x2a
 8000584:	213c      	movs	r1, #60	; 0x3c
 8000586:	f000 fead 	bl	80012e4 <HAL_I2C_Mem_Write>
		ret = 0;
 800058a:	197b      	adds	r3, r7, r5
 800058c:	2200      	movs	r2, #0
 800058e:	701a      	strb	r2, [r3, #0]
	}
	return ret;
 8000590:	230f      	movs	r3, #15
 8000592:	18fb      	adds	r3, r7, r3
 8000594:	781b      	ldrb	r3, [r3, #0]
}
 8000596:	0018      	movs	r0, r3
 8000598:	46bd      	mov	sp, r7
 800059a:	b004      	add	sp, #16
 800059c:	bdb0      	pop	{r4, r5, r7, pc}
	...

080005a0 <ReadAccelMagnData>:

// read status and the three channels of accelerometer and magnetometer data from
// FXOS8700CQ (13 bytes)
//void ReadAccelMagnData(SRAWDATA *pAccelData, SRAWDATA *pMagnData, I2C_HandleTypeDef *I2Cx)
void ReadAccelMagnData(I2C_HandleTypeDef *I2Cx)
{
 80005a0:	b590      	push	{r4, r7, lr}
 80005a2:	b08b      	sub	sp, #44	; 0x2c
 80005a4:	af04      	add	r7, sp, #16
 80005a6:	6078      	str	r0, [r7, #4]
	uint8_t Buffer[FXOS8700CQ_READ_LEN]; // read buffer

	// read FXOS8700CQ_READ_LEN=13 bytes (status byte and the six channels of data)
	HAL_I2C_Mem_Read(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_STATUS, 1, &Buffer, FXOS8700CQ_READ_LEN, i2c_timeout);
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	2364      	movs	r3, #100	; 0x64
 80005ac:	9302      	str	r3, [sp, #8]
 80005ae:	230d      	movs	r3, #13
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2408      	movs	r4, #8
 80005b4:	193b      	adds	r3, r7, r4
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2301      	movs	r3, #1
 80005ba:	2200      	movs	r2, #0
 80005bc:	213c      	movs	r1, #60	; 0x3c
 80005be:	f000 ffbf 	bl	8001540 <HAL_I2C_Mem_Read>

	// copy the 14 bit accelerometer byte data into 16 bit words
	ACCEL.x = (int16_t)(((Buffer[1] << 8) | Buffer[2]))>> 2;
 80005c2:	0021      	movs	r1, r4
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	785b      	ldrb	r3, [r3, #1]
 80005c8:	021b      	lsls	r3, r3, #8
 80005ca:	b21a      	sxth	r2, r3
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	789b      	ldrb	r3, [r3, #2]
 80005d0:	b21b      	sxth	r3, r3
 80005d2:	4313      	orrs	r3, r2
 80005d4:	b21b      	sxth	r3, r3
 80005d6:	109b      	asrs	r3, r3, #2
 80005d8:	b21a      	sxth	r2, r3
 80005da:	4b20      	ldr	r3, [pc, #128]	; (800065c <ReadAccelMagnData+0xbc>)
 80005dc:	801a      	strh	r2, [r3, #0]
	ACCEL.y = (int16_t)(((Buffer[3] << 8) | Buffer[4]))>> 2;
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	78db      	ldrb	r3, [r3, #3]
 80005e2:	021b      	lsls	r3, r3, #8
 80005e4:	b21a      	sxth	r2, r3
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	791b      	ldrb	r3, [r3, #4]
 80005ea:	b21b      	sxth	r3, r3
 80005ec:	4313      	orrs	r3, r2
 80005ee:	b21b      	sxth	r3, r3
 80005f0:	109b      	asrs	r3, r3, #2
 80005f2:	b21a      	sxth	r2, r3
 80005f4:	4b19      	ldr	r3, [pc, #100]	; (800065c <ReadAccelMagnData+0xbc>)
 80005f6:	805a      	strh	r2, [r3, #2]
	ACCEL.z = (int16_t)(((Buffer[5] << 8) | Buffer[6]))>> 2;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	795b      	ldrb	r3, [r3, #5]
 80005fc:	021b      	lsls	r3, r3, #8
 80005fe:	b21a      	sxth	r2, r3
 8000600:	187b      	adds	r3, r7, r1
 8000602:	799b      	ldrb	r3, [r3, #6]
 8000604:	b21b      	sxth	r3, r3
 8000606:	4313      	orrs	r3, r2
 8000608:	b21b      	sxth	r3, r3
 800060a:	109b      	asrs	r3, r3, #2
 800060c:	b21a      	sxth	r2, r3
 800060e:	4b13      	ldr	r3, [pc, #76]	; (800065c <ReadAccelMagnData+0xbc>)
 8000610:	809a      	strh	r2, [r3, #4]

	// copy the magnetometer byte data into 16 bit words
	MAG.x = (Buffer[7] << 8) | Buffer[8];
 8000612:	187b      	adds	r3, r7, r1
 8000614:	79db      	ldrb	r3, [r3, #7]
 8000616:	021b      	lsls	r3, r3, #8
 8000618:	b21a      	sxth	r2, r3
 800061a:	187b      	adds	r3, r7, r1
 800061c:	7a1b      	ldrb	r3, [r3, #8]
 800061e:	b21b      	sxth	r3, r3
 8000620:	4313      	orrs	r3, r2
 8000622:	b21a      	sxth	r2, r3
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <ReadAccelMagnData+0xc0>)
 8000626:	801a      	strh	r2, [r3, #0]
	MAG.y = (Buffer[9] << 8) | Buffer[10];
 8000628:	187b      	adds	r3, r7, r1
 800062a:	7a5b      	ldrb	r3, [r3, #9]
 800062c:	021b      	lsls	r3, r3, #8
 800062e:	b21a      	sxth	r2, r3
 8000630:	187b      	adds	r3, r7, r1
 8000632:	7a9b      	ldrb	r3, [r3, #10]
 8000634:	b21b      	sxth	r3, r3
 8000636:	4313      	orrs	r3, r2
 8000638:	b21a      	sxth	r2, r3
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <ReadAccelMagnData+0xc0>)
 800063c:	805a      	strh	r2, [r3, #2]
	MAG.z = (Buffer[11] << 8) | Buffer[12];
 800063e:	187b      	adds	r3, r7, r1
 8000640:	7adb      	ldrb	r3, [r3, #11]
 8000642:	021b      	lsls	r3, r3, #8
 8000644:	b21a      	sxth	r2, r3
 8000646:	187b      	adds	r3, r7, r1
 8000648:	7b1b      	ldrb	r3, [r3, #12]
 800064a:	b21b      	sxth	r3, r3
 800064c:	4313      	orrs	r3, r2
 800064e:	b21a      	sxth	r2, r3
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <ReadAccelMagnData+0xc0>)
 8000652:	809a      	strh	r2, [r3, #4]

}
 8000654:	46c0      	nop			; (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	b007      	add	sp, #28
 800065a:	bd90      	pop	{r4, r7, pc}
 800065c:	20000098 	.word	0x20000098
 8000660:	200000a0 	.word	0x200000a0

08000664 <getData>:

/**
 * Get data from struct
 */
int16_t getData(uint8_t dado_a_receber)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	0002      	movs	r2, r0
 800066c:	1dfb      	adds	r3, r7, #7
 800066e:	701a      	strb	r2, [r3, #0]
	switch(dado_a_receber)
 8000670:	1dfb      	adds	r3, r7, #7
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b05      	cmp	r3, #5
 8000676:	d81c      	bhi.n	80006b2 <getData+0x4e>
 8000678:	009a      	lsls	r2, r3, #2
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <getData+0x58>)
 800067c:	18d3      	adds	r3, r2, r3
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	469f      	mov	pc, r3
	{
	case GET_MAG_X:
	{

		return MAG.x;
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <getData+0x5c>)
 8000684:	2200      	movs	r2, #0
 8000686:	5e9b      	ldrsh	r3, [r3, r2]
 8000688:	e013      	b.n	80006b2 <getData+0x4e>
	}
	break;
	case GET_MAG_Y:
	{

		return MAG.y;
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <getData+0x5c>)
 800068c:	2202      	movs	r2, #2
 800068e:	5e9b      	ldrsh	r3, [r3, r2]
 8000690:	e00f      	b.n	80006b2 <getData+0x4e>
	}
	break;
	case GET_MAG_Z:
	{

		return MAG.z;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <getData+0x5c>)
 8000694:	2204      	movs	r2, #4
 8000696:	5e9b      	ldrsh	r3, [r3, r2]
 8000698:	e00b      	b.n	80006b2 <getData+0x4e>
	}
	break;
	case GET_ACCEL_X:
	{

		return ACCEL.x;
 800069a:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <getData+0x60>)
 800069c:	2200      	movs	r2, #0
 800069e:	5e9b      	ldrsh	r3, [r3, r2]
 80006a0:	e007      	b.n	80006b2 <getData+0x4e>
	}
	break;
	case GET_ACCEL_Y:
	{

		return ACCEL.y;
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <getData+0x60>)
 80006a4:	2202      	movs	r2, #2
 80006a6:	5e9b      	ldrsh	r3, [r3, r2]
 80006a8:	e003      	b.n	80006b2 <getData+0x4e>
	}
	break;
	case GET_ACCEL_Z:
	{
		return ACCEL.z;
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <getData+0x60>)
 80006ac:	2204      	movs	r2, #4
 80006ae:	5e9b      	ldrsh	r3, [r3, r2]
 80006b0:	e7ff      	b.n	80006b2 <getData+0x4e>

	}
	break;

	}
}
 80006b2:	0018      	movs	r0, r3
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b002      	add	sp, #8
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	08003d54 	.word	0x08003d54
 80006c0:	200000a0 	.word	0x200000a0
 80006c4:	20000098 	.word	0x20000098

080006c8 <MX_USART1_PRINTWELCOME>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

void MX_USART1_PRINTWELCOME(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	; 0x28
 80006cc:	af00      	add	r7, sp, #0

	  uint8_t message[35] = {'\0'};
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	3304      	adds	r3, #4
 80006d6:	221f      	movs	r2, #31
 80006d8:	2100      	movs	r1, #0
 80006da:	0018      	movs	r0, r3
 80006dc:	f002 fed4 	bl	8003488 <memset>
	  sprintf(message, "Welcome to lab! Counting\r\n");
 80006e0:	4a07      	ldr	r2, [pc, #28]	; (8000700 <MX_USART1_PRINTWELCOME+0x38>)
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f002 fed6 	bl	8003498 <siprintf>
	  HAL_UART_Transmit(&huart2, message, sizeof(message), 100);
 80006ec:	1d39      	adds	r1, r7, #4
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_USART1_PRINTWELCOME+0x3c>)
 80006f0:	2364      	movs	r3, #100	; 0x64
 80006f2:	2223      	movs	r2, #35	; 0x23
 80006f4:	f002 f934 	bl	8002960 <HAL_UART_Transmit>
}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	b00a      	add	sp, #40	; 0x28
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	08003cfc 	.word	0x08003cfc
 8000704:	200000fc 	.word	0x200000fc

08000708 <get_data_from_sensor>:

/* USER CODE END 0 */

void get_data_from_sensor(void)
{
 8000708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800070a:	b091      	sub	sp, #68	; 0x44
 800070c:	af02      	add	r7, sp, #8

	  ReadAccelMagnData(&hi2c1);
 800070e:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <get_data_from_sensor+0x80>)
 8000710:	0018      	movs	r0, r3
 8000712:	f7ff ff45 	bl	80005a0 <ReadAccelMagnData>

	  uint8_t message[50] = {0};
 8000716:	003b      	movs	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	3304      	adds	r3, #4
 800071e:	222e      	movs	r2, #46	; 0x2e
 8000720:	2100      	movs	r1, #0
 8000722:	0018      	movs	r0, r3
 8000724:	f002 feb0 	bl	8003488 <memset>

	  int16_t magX = getData(GET_MAG_X);
 8000728:	2536      	movs	r5, #54	; 0x36
 800072a:	197c      	adds	r4, r7, r5
 800072c:	2000      	movs	r0, #0
 800072e:	f7ff ff99 	bl	8000664 <getData>
 8000732:	0003      	movs	r3, r0
 8000734:	8023      	strh	r3, [r4, #0]
	  int16_t magY = getData(GET_MAG_Y);
 8000736:	2634      	movs	r6, #52	; 0x34
 8000738:	19bc      	adds	r4, r7, r6
 800073a:	2001      	movs	r0, #1
 800073c:	f7ff ff92 	bl	8000664 <getData>
 8000740:	0003      	movs	r3, r0
 8000742:	8023      	strh	r3, [r4, #0]
	  int16_t magZ = getData(GET_MAG_Z);
 8000744:	2332      	movs	r3, #50	; 0x32
 8000746:	18fc      	adds	r4, r7, r3
 8000748:	2002      	movs	r0, #2
 800074a:	f7ff ff8b 	bl	8000664 <getData>
 800074e:	0003      	movs	r3, r0
 8000750:	8023      	strh	r3, [r4, #0]
	  sprintf(message, "\r\nMG - X: %d Y: %d Z: %d\r\n", magX, magY, magZ);
 8000752:	197b      	adds	r3, r7, r5
 8000754:	2100      	movs	r1, #0
 8000756:	5e5a      	ldrsh	r2, [r3, r1]
 8000758:	19bb      	adds	r3, r7, r6
 800075a:	2100      	movs	r1, #0
 800075c:	5e5c      	ldrsh	r4, [r3, r1]
 800075e:	2332      	movs	r3, #50	; 0x32
 8000760:	18fb      	adds	r3, r7, r3
 8000762:	2100      	movs	r1, #0
 8000764:	5e5b      	ldrsh	r3, [r3, r1]
 8000766:	4909      	ldr	r1, [pc, #36]	; (800078c <get_data_from_sensor+0x84>)
 8000768:	0038      	movs	r0, r7
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	0023      	movs	r3, r4
 800076e:	f002 fe93 	bl	8003498 <siprintf>
	  HAL_UART_Transmit(&huart2, message, sizeof(message), 100);
 8000772:	0039      	movs	r1, r7
 8000774:	4806      	ldr	r0, [pc, #24]	; (8000790 <get_data_from_sensor+0x88>)
 8000776:	2364      	movs	r3, #100	; 0x64
 8000778:	2232      	movs	r2, #50	; 0x32
 800077a:	f002 f8f1 	bl	8002960 <HAL_UART_Transmit>
}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	b00f      	add	sp, #60	; 0x3c
 8000784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	200000a8 	.word	0x200000a8
 800078c:	08003d18 	.word	0x08003d18
 8000790:	200000fc 	.word	0x200000fc

08000794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08e      	sub	sp, #56	; 0x38
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079a:	f000 fa4f 	bl	8000c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800079e:	f000 f83f 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a2:	f000 f909 	bl	80009b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007a6:	f000 f8ab 	bl	8000900 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80007aa:	f000 f8d5 	bl	8000958 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  MX_USART1_PRINTWELCOME();
 80007ae:	f7ff ff8b 	bl	80006c8 <MX_USART1_PRINTWELCOME>
  uint8_t message[50] = {0};
  memset(message, 0, sizeof(message));
  sprintf(message, "MG - teste %02X\r\n", wiam);
  HAL_UART_Transmit(&huart2, message, sizeof(message), 100);*/

  while(magnetometter_init(&hi2c1) != HAL_OK);
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	4b17      	ldr	r3, [pc, #92]	; (8000814 <main+0x80>)
 80007b6:	0018      	movs	r0, r3
 80007b8:	f7ff fe7a 	bl	80004b0 <magnetometter_init>
 80007bc:	1e03      	subs	r3, r0, #0
 80007be:	d1f9      	bne.n	80007b4 <main+0x20>

  uint8_t message[50] = {0};
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	3304      	adds	r3, #4
 80007c8:	222e      	movs	r2, #46	; 0x2e
 80007ca:	2100      	movs	r1, #0
 80007cc:	0018      	movs	r0, r3
 80007ce:	f002 fe5b 	bl	8003488 <memset>
  memset(message, 0, sizeof(message));
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2232      	movs	r2, #50	; 0x32
 80007d6:	2100      	movs	r1, #0
 80007d8:	0018      	movs	r0, r3
 80007da:	f002 fe55 	bl	8003488 <memset>
  memset(message, 0, sizeof(message));
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2232      	movs	r2, #50	; 0x32
 80007e2:	2100      	movs	r1, #0
 80007e4:	0018      	movs	r0, r3
 80007e6:	f002 fe4f 	bl	8003488 <memset>
  sprintf(message, "MG - Started\r\nMG -Reading...\r\n");
 80007ea:	4a0b      	ldr	r2, [pc, #44]	; (8000818 <main+0x84>)
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	0011      	movs	r1, r2
 80007f0:	0018      	movs	r0, r3
 80007f2:	f002 fe51 	bl	8003498 <siprintf>
  HAL_UART_Transmit(&huart2, message, sizeof(message), 100);
 80007f6:	1d39      	adds	r1, r7, #4
 80007f8:	4808      	ldr	r0, [pc, #32]	; (800081c <main+0x88>)
 80007fa:	2364      	movs	r3, #100	; 0x64
 80007fc:	2232      	movs	r2, #50	; 0x32
 80007fe:	f002 f8af 	bl	8002960 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  get_data_from_sensor();
 8000802:	f7ff ff81 	bl	8000708 <get_data_from_sensor>
	  HAL_Delay(500);
 8000806:	23fa      	movs	r3, #250	; 0xfa
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	0018      	movs	r0, r3
 800080c:	f000 fa86 	bl	8000d1c <HAL_Delay>
	  get_data_from_sensor();
 8000810:	e7f7      	b.n	8000802 <main+0x6e>
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	200000a8 	.word	0x200000a8
 8000818:	08003d34 	.word	0x08003d34
 800081c:	200000fc 	.word	0x200000fc

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b093      	sub	sp, #76	; 0x4c
 8000824:	af00      	add	r7, sp, #0
  {
    Error_Handler();
  }*/


	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	2414      	movs	r4, #20
 8000828:	193b      	adds	r3, r7, r4
 800082a:	0018      	movs	r0, r3
 800082c:	2334      	movs	r3, #52	; 0x34
 800082e:	001a      	movs	r2, r3
 8000830:	2100      	movs	r1, #0
 8000832:	f002 fe29 	bl	8003488 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000836:	003b      	movs	r3, r7
 8000838:	0018      	movs	r0, r3
 800083a:	2314      	movs	r3, #20
 800083c:	001a      	movs	r2, r3
 800083e:	2100      	movs	r1, #0
 8000840:	f002 fe22 	bl	8003488 <memset>

	  /* Enable HSE Oscillator and Activate PLL with HSE as source */
	  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8000844:	0021      	movs	r1, r4
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2202      	movs	r2, #2
 800084a:	601a      	str	r2, [r3, #0]
	  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2200      	movs	r2, #0
 8000850:	605a      	str	r2, [r3, #4]
	  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2201      	movs	r2, #1
 8000856:	60da      	str	r2, [r3, #12]
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2210      	movs	r2, #16
 800085c:	611a      	str	r2, [r3, #16]
	  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;//RCC_PLL_OFF;//RCC_PLL_ON;
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2202      	movs	r2, #2
 8000862:	625a      	str	r2, [r3, #36]	; 0x24
	  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2200      	movs	r2, #0
 8000868:	629a      	str	r2, [r3, #40]	; 0x28
	  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;//RCC_PLLMUL_3;//RCC_PLLMUL_6;
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2280      	movs	r2, #128	; 0x80
 800086e:	0312      	lsls	r2, r2, #12
 8000870:	62da      	str	r2, [r3, #44]	; 0x2c
	  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2280      	movs	r2, #128	; 0x80
 8000876:	0412      	lsls	r2, r2, #16
 8000878:	631a      	str	r2, [r3, #48]	; 0x30

	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087a:	187b      	adds	r3, r7, r1
 800087c:	0018      	movs	r0, r3
 800087e:	f001 fa8d 	bl	8001d9c <HAL_RCC_OscConfig>
 8000882:	1e03      	subs	r3, r0, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0x6a>
	  {
	    Error_Handler();
 8000886:	f000 f8b9 	bl	80009fc <Error_Handler>
	  }

	  /* Set Voltage scale1 as MCU will run at 32MHz */
	  __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <SystemClock_Config+0xd4>)
 800088c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800088e:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <SystemClock_Config+0xd4>)
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	0549      	lsls	r1, r1, #21
 8000894:	430a      	orrs	r2, r1
 8000896:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000898:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <SystemClock_Config+0xd8>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a17      	ldr	r2, [pc, #92]	; (80008fc <SystemClock_Config+0xdc>)
 800089e:	401a      	ands	r2, r3
 80008a0:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <SystemClock_Config+0xd8>)
 80008a2:	2180      	movs	r1, #128	; 0x80
 80008a4:	0109      	lsls	r1, r1, #4
 80008a6:	430a      	orrs	r2, r1
 80008a8:	601a      	str	r2, [r3, #0]

	  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
	  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <SystemClock_Config+0xd8>)
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	2210      	movs	r2, #16
 80008b2:	4013      	ands	r3, r2
 80008b4:	2b10      	cmp	r3, #16
 80008b6:	d0f9      	beq.n	80008ac <SystemClock_Config+0x8c>

	  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
	  clocks dividers */
	  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80008b8:	003b      	movs	r3, r7
 80008ba:	220f      	movs	r2, #15
 80008bc:	601a      	str	r2, [r3, #0]
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;//RCC_SYSCLKSOURCE_HSI;//RCC_SYSCLKSOURCE_PLLCLK;
 80008be:	003b      	movs	r3, r7
 80008c0:	2203      	movs	r2, #3
 80008c2:	605a      	str	r2, [r3, #4]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c4:	003b      	movs	r3, r7
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80008ca:	003b      	movs	r3, r7
 80008cc:	22e0      	movs	r2, #224	; 0xe0
 80008ce:	00d2      	lsls	r2, r2, #3
 80008d0:	60da      	str	r2, [r3, #12]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d2:	003b      	movs	r3, r7
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008d8:	003b      	movs	r3, r7
 80008da:	2101      	movs	r1, #1
 80008dc:	0018      	movs	r0, r3
 80008de:	f001 fdc7 	bl	8002470 <HAL_RCC_ClockConfig>
 80008e2:	1e03      	subs	r3, r0, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0xca>
	  {
	    Error_Handler();
 80008e6:	f000 f889 	bl	80009fc <Error_Handler>
	  }
}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b013      	add	sp, #76	; 0x4c
 80008f0:	bd90      	pop	{r4, r7, pc}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	40021000 	.word	0x40021000
 80008f8:	40007000 	.word	0x40007000
 80008fc:	ffffe7ff 	.word	0xffffe7ff

08000900 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
	  hi2c1.Instance = I2C1;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_I2C1_Init+0x4c>)
 8000906:	4a12      	ldr	r2, [pc, #72]	; (8000950 <MX_I2C1_Init+0x50>)
 8000908:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.Timing = 0x10909CEC;//0x00303D5B; // Timing configurado para operação a 400 kHz em Fast Mode
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <MX_I2C1_Init+0x4c>)
 800090c:	4a11      	ldr	r2, [pc, #68]	; (8000954 <MX_I2C1_Init+0x54>)
 800090e:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.OwnAddress1 = 0;
 8000910:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_I2C1_Init+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <MX_I2C1_Init+0x4c>)
 8000918:	2201      	movs	r2, #1
 800091a:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800091c:	4b0b      	ldr	r3, [pc, #44]	; (800094c <MX_I2C1_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.OwnAddress2 = 0;
 8000922:	4b0a      	ldr	r3, [pc, #40]	; (800094c <MX_I2C1_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <MX_I2C1_Init+0x4c>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800092e:	4b07      	ldr	r3, [pc, #28]	; (800094c <MX_I2C1_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]

	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <MX_I2C1_Init+0x4c>)
 8000936:	0018      	movs	r0, r3
 8000938:	f000 fc3e 	bl	80011b8 <HAL_I2C_Init>
 800093c:	1e03      	subs	r3, r0, #0
 800093e:	d001      	beq.n	8000944 <MX_I2C1_Init+0x44>
	  {
	    Error_Handler(); // Tratamento de erro
 8000940:	f000 f85c 	bl	80009fc <Error_Handler>
	  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	200000a8 	.word	0x200000a8
 8000950:	40005400 	.word	0x40005400
 8000954:	10909cec 	.word	0x10909cec

08000958 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 800095e:	4a15      	ldr	r2, [pc, #84]	; (80009b4 <MX_USART2_UART_Init+0x5c>)
 8000960:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000962:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 8000964:	2296      	movs	r2, #150	; 0x96
 8000966:	0192      	lsls	r2, r2, #6
 8000968:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 800097e:	220c      	movs	r2, #12
 8000980:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800099a:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 800099c:	0018      	movs	r0, r3
 800099e:	f001 ff8b 	bl	80028b8 <HAL_UART_Init>
 80009a2:	1e03      	subs	r3, r0, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009a6:	f000 f829 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200000fc 	.word	0x200000fc
 80009b4:	40004400 	.word	0x40004400

080009b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_GPIO_Init+0x40>)
 80009c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <MX_GPIO_Init+0x40>)
 80009c4:	2101      	movs	r1, #1
 80009c6:	430a      	orrs	r2, r1
 80009c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_GPIO_Init+0x40>)
 80009cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ce:	2201      	movs	r2, #1
 80009d0:	4013      	ands	r3, r2
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_GPIO_Init+0x40>)
 80009d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009da:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <MX_GPIO_Init+0x40>)
 80009dc:	2102      	movs	r1, #2
 80009de:	430a      	orrs	r2, r1
 80009e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80009e2:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <MX_GPIO_Init+0x40>)
 80009e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e6:	2202      	movs	r2, #2
 80009e8:	4013      	ands	r3, r2
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]

}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b002      	add	sp, #8
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	40021000 	.word	0x40021000

080009fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a00:	b672      	cpsid	i
}
 8000a02:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <Error_Handler+0x8>
	...

08000a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0c:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <HAL_MspInit+0x24>)
 8000a0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_MspInit+0x24>)
 8000a12:	2101      	movs	r1, #1
 8000a14:	430a      	orrs	r2, r1
 8000a16:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <HAL_MspInit+0x24>)
 8000a1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a1c:	4b03      	ldr	r3, [pc, #12]	; (8000a2c <HAL_MspInit+0x24>)
 8000a1e:	2180      	movs	r1, #128	; 0x80
 8000a20:	0549      	lsls	r1, r1, #21
 8000a22:	430a      	orrs	r2, r1
 8000a24:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40021000 	.word	0x40021000

08000a30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b089      	sub	sp, #36	; 0x24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	240c      	movs	r4, #12
 8000a3a:	193b      	adds	r3, r7, r4
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	2314      	movs	r3, #20
 8000a40:	001a      	movs	r2, r3
 8000a42:	2100      	movs	r1, #0
 8000a44:	f002 fd20 	bl	8003488 <memset>
  if(hi2c->Instance==I2C1)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a17      	ldr	r2, [pc, #92]	; (8000aac <HAL_I2C_MspInit+0x7c>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d128      	bne.n	8000aa4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <HAL_I2C_MspInit+0x80>)
 8000a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <HAL_I2C_MspInit+0x80>)
 8000a58:	2102      	movs	r1, #2
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a5e:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <HAL_I2C_MspInit+0x80>)
 8000a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a62:	2202      	movs	r2, #2
 8000a64:	4013      	ands	r3, r2
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a6a:	0021      	movs	r1, r4
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	22c0      	movs	r2, #192	; 0xc0
 8000a70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	2212      	movs	r2, #18
 8000a76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7e:	187b      	adds	r3, r7, r1
 8000a80:	2203      	movs	r2, #3
 8000a82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2201      	movs	r2, #1
 8000a88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	4a09      	ldr	r2, [pc, #36]	; (8000ab4 <HAL_I2C_MspInit+0x84>)
 8000a8e:	0019      	movs	r1, r3
 8000a90:	0010      	movs	r0, r2
 8000a92:	f000 fa1b 	bl	8000ecc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_I2C_MspInit+0x80>)
 8000a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <HAL_I2C_MspInit+0x80>)
 8000a9c:	2180      	movs	r1, #128	; 0x80
 8000a9e:	0389      	lsls	r1, r1, #14
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000aa4:	46c0      	nop			; (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	b009      	add	sp, #36	; 0x24
 8000aaa:	bd90      	pop	{r4, r7, pc}
 8000aac:	40005400 	.word	0x40005400
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	50000400 	.word	0x50000400

08000ab8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b089      	sub	sp, #36	; 0x24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	240c      	movs	r4, #12
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	2314      	movs	r3, #20
 8000ac8:	001a      	movs	r2, r3
 8000aca:	2100      	movs	r1, #0
 8000acc:	f002 fcdc 	bl	8003488 <memset>
  if(huart->Instance==USART2)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a18      	ldr	r2, [pc, #96]	; (8000b38 <HAL_UART_MspInit+0x80>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d129      	bne.n	8000b2e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <HAL_UART_MspInit+0x84>)
 8000adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ade:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <HAL_UART_MspInit+0x84>)
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	0289      	lsls	r1, r1, #10
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <HAL_UART_MspInit+0x84>)
 8000aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aec:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <HAL_UART_MspInit+0x84>)
 8000aee:	2101      	movs	r1, #1
 8000af0:	430a      	orrs	r2, r1
 8000af2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <HAL_UART_MspInit+0x84>)
 8000af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af8:	2201      	movs	r2, #1
 8000afa:	4013      	ands	r3, r2
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b00:	0021      	movs	r1, r4
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	220c      	movs	r2, #12
 8000b06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	2203      	movs	r2, #3
 8000b18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	2204      	movs	r2, #4
 8000b1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b20:	187a      	adds	r2, r7, r1
 8000b22:	23a0      	movs	r3, #160	; 0xa0
 8000b24:	05db      	lsls	r3, r3, #23
 8000b26:	0011      	movs	r1, r2
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f000 f9cf 	bl	8000ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b009      	add	sp, #36	; 0x24
 8000b34:	bd90      	pop	{r4, r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	40004400 	.word	0x40004400
 8000b3c:	40021000 	.word	0x40021000

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <NMI_Handler+0x4>

08000b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <HardFault_Handler+0x4>

08000b4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b64:	f000 f8be 	bl	8000ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b78:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <_sbrk+0x5c>)
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <_sbrk+0x60>)
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d102      	bne.n	8000b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <_sbrk+0x64>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <_sbrk+0x68>)
 8000b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	18d3      	adds	r3, r2, r3
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d207      	bcs.n	8000bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba0:	f002 fc48 	bl	8003434 <__errno>
 8000ba4:	0003      	movs	r3, r0
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000baa:	2301      	movs	r3, #1
 8000bac:	425b      	negs	r3, r3
 8000bae:	e009      	b.n	8000bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	18d2      	adds	r2, r2, r3
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <_sbrk+0x64>)
 8000bc0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
}
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	b006      	add	sp, #24
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20002000 	.word	0x20002000
 8000bd0:	00000400 	.word	0x00000400
 8000bd4:	2000008c 	.word	0x2000008c
 8000bd8:	20000198 	.word	0x20000198

08000bdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000be8:	480d      	ldr	r0, [pc, #52]	; (8000c20 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000bea:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bec:	f7ff fff6 	bl	8000bdc <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf0:	480c      	ldr	r0, [pc, #48]	; (8000c24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bf2:	490d      	ldr	r1, [pc, #52]	; (8000c28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <LoopForever+0xe>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf8:	e002      	b.n	8000c00 <LoopCopyDataInit>

08000bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfe:	3304      	adds	r3, #4

08000c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c04:	d3f9      	bcc.n	8000bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c08:	4c0a      	ldr	r4, [pc, #40]	; (8000c34 <LoopForever+0x16>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c0c:	e001      	b.n	8000c12 <LoopFillZerobss>

08000c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c10:	3204      	adds	r2, #4

08000c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c14:	d3fb      	bcc.n	8000c0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c16:	f002 fc13 	bl	8003440 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c1a:	f7ff fdbb 	bl	8000794 <main>

08000c1e <LoopForever>:

LoopForever:
    b LoopForever
 8000c1e:	e7fe      	b.n	8000c1e <LoopForever>
   ldr   r0, =_estack
 8000c20:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c28:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c2c:	08003e1c 	.word	0x08003e1c
  ldr r2, =_sbss
 8000c30:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c34:	20000198 	.word	0x20000198

08000c38 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC1_COMP_IRQHandler>
	...

08000c3c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <HAL_Init+0x3c>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <HAL_Init+0x3c>)
 8000c4e:	2140      	movs	r1, #64	; 0x40
 8000c50:	430a      	orrs	r2, r1
 8000c52:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c54:	2000      	movs	r0, #0
 8000c56:	f000 f811 	bl	8000c7c <HAL_InitTick>
 8000c5a:	1e03      	subs	r3, r0, #0
 8000c5c:	d003      	beq.n	8000c66 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	2201      	movs	r2, #1
 8000c62:	701a      	strb	r2, [r3, #0]
 8000c64:	e001      	b.n	8000c6a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c66:	f7ff fecf 	bl	8000a08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c6a:	1dfb      	adds	r3, r7, #7
 8000c6c:	781b      	ldrb	r3, [r3, #0]
}
 8000c6e:	0018      	movs	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	b002      	add	sp, #8
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	40022000 	.word	0x40022000

08000c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c7c:	b590      	push	{r4, r7, lr}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <HAL_InitTick+0x5c>)
 8000c86:	681c      	ldr	r4, [r3, #0]
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <HAL_InitTick+0x60>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	0019      	movs	r1, r3
 8000c8e:	23fa      	movs	r3, #250	; 0xfa
 8000c90:	0098      	lsls	r0, r3, #2
 8000c92:	f7ff fa43 	bl	800011c <__udivsi3>
 8000c96:	0003      	movs	r3, r0
 8000c98:	0019      	movs	r1, r3
 8000c9a:	0020      	movs	r0, r4
 8000c9c:	f7ff fa3e 	bl	800011c <__udivsi3>
 8000ca0:	0003      	movs	r3, r0
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f000 f905 	bl	8000eb2 <HAL_SYSTICK_Config>
 8000ca8:	1e03      	subs	r3, r0, #0
 8000caa:	d001      	beq.n	8000cb0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	e00f      	b.n	8000cd0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	d80b      	bhi.n	8000cce <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	2301      	movs	r3, #1
 8000cba:	425b      	negs	r3, r3
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f000 f8e2 	bl	8000e88 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_InitTick+0x64>)
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e000      	b.n	8000cd0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
}
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b003      	add	sp, #12
 8000cd6:	bd90      	pop	{r4, r7, pc}
 8000cd8:	20000000 	.word	0x20000000
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	20000004 	.word	0x20000004

08000ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <HAL_IncTick+0x1c>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	001a      	movs	r2, r3
 8000cee:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <HAL_IncTick+0x20>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	18d2      	adds	r2, r2, r3
 8000cf4:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <HAL_IncTick+0x20>)
 8000cf6:	601a      	str	r2, [r3, #0]
}
 8000cf8:	46c0      	nop			; (mov r8, r8)
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	20000008 	.word	0x20000008
 8000d04:	20000184 	.word	0x20000184

08000d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d0c:	4b02      	ldr	r3, [pc, #8]	; (8000d18 <HAL_GetTick+0x10>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
}
 8000d10:	0018      	movs	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	20000184 	.word	0x20000184

08000d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d24:	f7ff fff0 	bl	8000d08 <HAL_GetTick>
 8000d28:	0003      	movs	r3, r0
 8000d2a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	3301      	adds	r3, #1
 8000d34:	d005      	beq.n	8000d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <HAL_Delay+0x44>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	001a      	movs	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	189b      	adds	r3, r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	f7ff ffe0 	bl	8000d08 <HAL_GetTick>
 8000d48:	0002      	movs	r2, r0
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d8f7      	bhi.n	8000d44 <HAL_Delay+0x28>
  {
  }
}
 8000d54:	46c0      	nop			; (mov r8, r8)
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	b004      	add	sp, #16
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	20000008 	.word	0x20000008

08000d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	0002      	movs	r2, r0
 8000d6c:	6039      	str	r1, [r7, #0]
 8000d6e:	1dfb      	adds	r3, r7, #7
 8000d70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d72:	1dfb      	adds	r3, r7, #7
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b7f      	cmp	r3, #127	; 0x7f
 8000d78:	d828      	bhi.n	8000dcc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d7a:	4a2f      	ldr	r2, [pc, #188]	; (8000e38 <__NVIC_SetPriority+0xd4>)
 8000d7c:	1dfb      	adds	r3, r7, #7
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b25b      	sxtb	r3, r3
 8000d82:	089b      	lsrs	r3, r3, #2
 8000d84:	33c0      	adds	r3, #192	; 0xc0
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	589b      	ldr	r3, [r3, r2]
 8000d8a:	1dfa      	adds	r2, r7, #7
 8000d8c:	7812      	ldrb	r2, [r2, #0]
 8000d8e:	0011      	movs	r1, r2
 8000d90:	2203      	movs	r2, #3
 8000d92:	400a      	ands	r2, r1
 8000d94:	00d2      	lsls	r2, r2, #3
 8000d96:	21ff      	movs	r1, #255	; 0xff
 8000d98:	4091      	lsls	r1, r2
 8000d9a:	000a      	movs	r2, r1
 8000d9c:	43d2      	mvns	r2, r2
 8000d9e:	401a      	ands	r2, r3
 8000da0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	019b      	lsls	r3, r3, #6
 8000da6:	22ff      	movs	r2, #255	; 0xff
 8000da8:	401a      	ands	r2, r3
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	0018      	movs	r0, r3
 8000db0:	2303      	movs	r3, #3
 8000db2:	4003      	ands	r3, r0
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db8:	481f      	ldr	r0, [pc, #124]	; (8000e38 <__NVIC_SetPriority+0xd4>)
 8000dba:	1dfb      	adds	r3, r7, #7
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	b25b      	sxtb	r3, r3
 8000dc0:	089b      	lsrs	r3, r3, #2
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	33c0      	adds	r3, #192	; 0xc0
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dca:	e031      	b.n	8000e30 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dcc:	4a1b      	ldr	r2, [pc, #108]	; (8000e3c <__NVIC_SetPriority+0xd8>)
 8000dce:	1dfb      	adds	r3, r7, #7
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	0019      	movs	r1, r3
 8000dd4:	230f      	movs	r3, #15
 8000dd6:	400b      	ands	r3, r1
 8000dd8:	3b08      	subs	r3, #8
 8000dda:	089b      	lsrs	r3, r3, #2
 8000ddc:	3306      	adds	r3, #6
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	18d3      	adds	r3, r2, r3
 8000de2:	3304      	adds	r3, #4
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	1dfa      	adds	r2, r7, #7
 8000de8:	7812      	ldrb	r2, [r2, #0]
 8000dea:	0011      	movs	r1, r2
 8000dec:	2203      	movs	r2, #3
 8000dee:	400a      	ands	r2, r1
 8000df0:	00d2      	lsls	r2, r2, #3
 8000df2:	21ff      	movs	r1, #255	; 0xff
 8000df4:	4091      	lsls	r1, r2
 8000df6:	000a      	movs	r2, r1
 8000df8:	43d2      	mvns	r2, r2
 8000dfa:	401a      	ands	r2, r3
 8000dfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	019b      	lsls	r3, r3, #6
 8000e02:	22ff      	movs	r2, #255	; 0xff
 8000e04:	401a      	ands	r2, r3
 8000e06:	1dfb      	adds	r3, r7, #7
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	4003      	ands	r3, r0
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e14:	4809      	ldr	r0, [pc, #36]	; (8000e3c <__NVIC_SetPriority+0xd8>)
 8000e16:	1dfb      	adds	r3, r7, #7
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	001c      	movs	r4, r3
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	4023      	ands	r3, r4
 8000e20:	3b08      	subs	r3, #8
 8000e22:	089b      	lsrs	r3, r3, #2
 8000e24:	430a      	orrs	r2, r1
 8000e26:	3306      	adds	r3, #6
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	18c3      	adds	r3, r0, r3
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	601a      	str	r2, [r3, #0]
}
 8000e30:	46c0      	nop			; (mov r8, r8)
 8000e32:	46bd      	mov	sp, r7
 8000e34:	b003      	add	sp, #12
 8000e36:	bd90      	pop	{r4, r7, pc}
 8000e38:	e000e100 	.word	0xe000e100
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	1e5a      	subs	r2, r3, #1
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	045b      	lsls	r3, r3, #17
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d301      	bcc.n	8000e58 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e54:	2301      	movs	r3, #1
 8000e56:	e010      	b.n	8000e7a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e58:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <SysTick_Config+0x44>)
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	3a01      	subs	r2, #1
 8000e5e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e60:	2301      	movs	r3, #1
 8000e62:	425b      	negs	r3, r3
 8000e64:	2103      	movs	r1, #3
 8000e66:	0018      	movs	r0, r3
 8000e68:	f7ff ff7c 	bl	8000d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <SysTick_Config+0x44>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e72:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <SysTick_Config+0x44>)
 8000e74:	2207      	movs	r2, #7
 8000e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b002      	add	sp, #8
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	e000e010 	.word	0xe000e010

08000e88 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
 8000e92:	210f      	movs	r1, #15
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	1c02      	adds	r2, r0, #0
 8000e98:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	b25b      	sxtb	r3, r3
 8000ea2:	0011      	movs	r1, r2
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f7ff ff5d 	bl	8000d64 <__NVIC_SetPriority>
}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	46bd      	mov	sp, r7
 8000eae:	b004      	add	sp, #16
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f7ff ffbf 	bl	8000e40 <SysTick_Config>
 8000ec2:	0003      	movs	r3, r0
}
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	b002      	add	sp, #8
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ee2:	e14f      	b.n	8001184 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2101      	movs	r1, #1
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	4091      	lsls	r1, r2
 8000eee:	000a      	movs	r2, r1
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d100      	bne.n	8000efc <HAL_GPIO_Init+0x30>
 8000efa:	e140      	b.n	800117e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2203      	movs	r2, #3
 8000f02:	4013      	ands	r3, r2
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d005      	beq.n	8000f14 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d130      	bne.n	8000f76 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	409a      	lsls	r2, r3
 8000f22:	0013      	movs	r3, r2
 8000f24:	43da      	mvns	r2, r3
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	68da      	ldr	r2, [r3, #12]
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	409a      	lsls	r2, r3
 8000f36:	0013      	movs	r3, r2
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	409a      	lsls	r2, r3
 8000f50:	0013      	movs	r3, r2
 8000f52:	43da      	mvns	r2, r3
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	091b      	lsrs	r3, r3, #4
 8000f60:	2201      	movs	r2, #1
 8000f62:	401a      	ands	r2, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	409a      	lsls	r2, r3
 8000f68:	0013      	movs	r3, r2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	2b03      	cmp	r3, #3
 8000f80:	d017      	beq.n	8000fb2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	409a      	lsls	r2, r3
 8000f90:	0013      	movs	r3, r2
 8000f92:	43da      	mvns	r2, r3
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	409a      	lsls	r2, r3
 8000fa4:	0013      	movs	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	4013      	ands	r3, r2
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d123      	bne.n	8001006 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	08da      	lsrs	r2, r3, #3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3208      	adds	r2, #8
 8000fc6:	0092      	lsls	r2, r2, #2
 8000fc8:	58d3      	ldr	r3, [r2, r3]
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	2207      	movs	r2, #7
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	220f      	movs	r2, #15
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	0013      	movs	r3, r2
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	691a      	ldr	r2, [r3, #16]
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	2107      	movs	r1, #7
 8000fea:	400b      	ands	r3, r1
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	409a      	lsls	r2, r3
 8000ff0:	0013      	movs	r3, r2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	08da      	lsrs	r2, r3, #3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3208      	adds	r2, #8
 8001000:	0092      	lsls	r2, r2, #2
 8001002:	6939      	ldr	r1, [r7, #16]
 8001004:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	2203      	movs	r2, #3
 8001012:	409a      	lsls	r2, r3
 8001014:	0013      	movs	r3, r2
 8001016:	43da      	mvns	r2, r3
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2203      	movs	r2, #3
 8001024:	401a      	ands	r2, r3
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	409a      	lsls	r2, r3
 800102c:	0013      	movs	r3, r2
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	23c0      	movs	r3, #192	; 0xc0
 8001040:	029b      	lsls	r3, r3, #10
 8001042:	4013      	ands	r3, r2
 8001044:	d100      	bne.n	8001048 <HAL_GPIO_Init+0x17c>
 8001046:	e09a      	b.n	800117e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001048:	4b54      	ldr	r3, [pc, #336]	; (800119c <HAL_GPIO_Init+0x2d0>)
 800104a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800104c:	4b53      	ldr	r3, [pc, #332]	; (800119c <HAL_GPIO_Init+0x2d0>)
 800104e:	2101      	movs	r1, #1
 8001050:	430a      	orrs	r2, r1
 8001052:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001054:	4a52      	ldr	r2, [pc, #328]	; (80011a0 <HAL_GPIO_Init+0x2d4>)
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	089b      	lsrs	r3, r3, #2
 800105a:	3302      	adds	r3, #2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	589b      	ldr	r3, [r3, r2]
 8001060:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	2203      	movs	r2, #3
 8001066:	4013      	ands	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	220f      	movs	r2, #15
 800106c:	409a      	lsls	r2, r3
 800106e:	0013      	movs	r3, r2
 8001070:	43da      	mvns	r2, r3
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	23a0      	movs	r3, #160	; 0xa0
 800107c:	05db      	lsls	r3, r3, #23
 800107e:	429a      	cmp	r2, r3
 8001080:	d019      	beq.n	80010b6 <HAL_GPIO_Init+0x1ea>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a47      	ldr	r2, [pc, #284]	; (80011a4 <HAL_GPIO_Init+0x2d8>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d013      	beq.n	80010b2 <HAL_GPIO_Init+0x1e6>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a46      	ldr	r2, [pc, #280]	; (80011a8 <HAL_GPIO_Init+0x2dc>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d00d      	beq.n	80010ae <HAL_GPIO_Init+0x1e2>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a45      	ldr	r2, [pc, #276]	; (80011ac <HAL_GPIO_Init+0x2e0>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d007      	beq.n	80010aa <HAL_GPIO_Init+0x1de>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a44      	ldr	r2, [pc, #272]	; (80011b0 <HAL_GPIO_Init+0x2e4>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d101      	bne.n	80010a6 <HAL_GPIO_Init+0x1da>
 80010a2:	2305      	movs	r3, #5
 80010a4:	e008      	b.n	80010b8 <HAL_GPIO_Init+0x1ec>
 80010a6:	2306      	movs	r3, #6
 80010a8:	e006      	b.n	80010b8 <HAL_GPIO_Init+0x1ec>
 80010aa:	2303      	movs	r3, #3
 80010ac:	e004      	b.n	80010b8 <HAL_GPIO_Init+0x1ec>
 80010ae:	2302      	movs	r3, #2
 80010b0:	e002      	b.n	80010b8 <HAL_GPIO_Init+0x1ec>
 80010b2:	2301      	movs	r3, #1
 80010b4:	e000      	b.n	80010b8 <HAL_GPIO_Init+0x1ec>
 80010b6:	2300      	movs	r3, #0
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	2103      	movs	r1, #3
 80010bc:	400a      	ands	r2, r1
 80010be:	0092      	lsls	r2, r2, #2
 80010c0:	4093      	lsls	r3, r2
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c8:	4935      	ldr	r1, [pc, #212]	; (80011a0 <HAL_GPIO_Init+0x2d4>)
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	089b      	lsrs	r3, r3, #2
 80010ce:	3302      	adds	r3, #2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010d6:	4b37      	ldr	r3, [pc, #220]	; (80011b4 <HAL_GPIO_Init+0x2e8>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	43da      	mvns	r2, r3
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	035b      	lsls	r3, r3, #13
 80010ee:	4013      	ands	r3, r2
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010fa:	4b2e      	ldr	r3, [pc, #184]	; (80011b4 <HAL_GPIO_Init+0x2e8>)
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001100:	4b2c      	ldr	r3, [pc, #176]	; (80011b4 <HAL_GPIO_Init+0x2e8>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	43da      	mvns	r2, r3
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	039b      	lsls	r3, r3, #14
 8001118:	4013      	ands	r3, r2
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001124:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <HAL_GPIO_Init+0x2e8>)
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800112a:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <HAL_GPIO_Init+0x2e8>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	43da      	mvns	r2, r3
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	2380      	movs	r3, #128	; 0x80
 8001140:	029b      	lsls	r3, r3, #10
 8001142:	4013      	ands	r3, r2
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800114e:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <HAL_GPIO_Init+0x2e8>)
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001154:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <HAL_GPIO_Init+0x2e8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	43da      	mvns	r2, r3
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	025b      	lsls	r3, r3, #9
 800116c:	4013      	ands	r3, r2
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <HAL_GPIO_Init+0x2e8>)
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	3301      	adds	r3, #1
 8001182:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	40da      	lsrs	r2, r3
 800118c:	1e13      	subs	r3, r2, #0
 800118e:	d000      	beq.n	8001192 <HAL_GPIO_Init+0x2c6>
 8001190:	e6a8      	b.n	8000ee4 <HAL_GPIO_Init+0x18>
  }
}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	46c0      	nop			; (mov r8, r8)
 8001196:	46bd      	mov	sp, r7
 8001198:	b006      	add	sp, #24
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40021000 	.word	0x40021000
 80011a0:	40010000 	.word	0x40010000
 80011a4:	50000400 	.word	0x50000400
 80011a8:	50000800 	.word	0x50000800
 80011ac:	50000c00 	.word	0x50000c00
 80011b0:	50001c00 	.word	0x50001c00
 80011b4:	40010400 	.word	0x40010400

080011b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e082      	b.n	80012d0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2241      	movs	r2, #65	; 0x41
 80011ce:	5c9b      	ldrb	r3, [r3, r2]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d107      	bne.n	80011e6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2240      	movs	r2, #64	; 0x40
 80011da:	2100      	movs	r1, #0
 80011dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	0018      	movs	r0, r3
 80011e2:	f7ff fc25 	bl	8000a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2241      	movs	r2, #65	; 0x41
 80011ea:	2124      	movs	r1, #36	; 0x24
 80011ec:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2101      	movs	r1, #1
 80011fa:	438a      	bics	r2, r1
 80011fc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4934      	ldr	r1, [pc, #208]	; (80012d8 <HAL_I2C_Init+0x120>)
 8001208:	400a      	ands	r2, r1
 800120a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4931      	ldr	r1, [pc, #196]	; (80012dc <HAL_I2C_Init+0x124>)
 8001218:	400a      	ands	r2, r1
 800121a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d108      	bne.n	8001236 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689a      	ldr	r2, [r3, #8]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2180      	movs	r1, #128	; 0x80
 800122e:	0209      	lsls	r1, r1, #8
 8001230:	430a      	orrs	r2, r1
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	e007      	b.n	8001246 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689a      	ldr	r2, [r3, #8]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2184      	movs	r1, #132	; 0x84
 8001240:	0209      	lsls	r1, r1, #8
 8001242:	430a      	orrs	r2, r1
 8001244:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	2b02      	cmp	r3, #2
 800124c:	d104      	bne.n	8001258 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2280      	movs	r2, #128	; 0x80
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	491f      	ldr	r1, [pc, #124]	; (80012e0 <HAL_I2C_Init+0x128>)
 8001264:	430a      	orrs	r2, r1
 8001266:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	68da      	ldr	r2, [r3, #12]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	491a      	ldr	r1, [pc, #104]	; (80012dc <HAL_I2C_Init+0x124>)
 8001274:	400a      	ands	r2, r1
 8001276:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	691a      	ldr	r2, [r3, #16]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	695b      	ldr	r3, [r3, #20]
 8001280:	431a      	orrs	r2, r3
 8001282:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	430a      	orrs	r2, r1
 8001290:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69d9      	ldr	r1, [r3, #28]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a1a      	ldr	r2, [r3, #32]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	430a      	orrs	r2, r1
 80012a0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2101      	movs	r1, #1
 80012ae:	430a      	orrs	r2, r1
 80012b0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2241      	movs	r2, #65	; 0x41
 80012bc:	2120      	movs	r1, #32
 80012be:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2242      	movs	r2, #66	; 0x42
 80012ca:	2100      	movs	r1, #0
 80012cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	0018      	movs	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b002      	add	sp, #8
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	f0ffffff 	.word	0xf0ffffff
 80012dc:	ffff7fff 	.word	0xffff7fff
 80012e0:	02008000 	.word	0x02008000

080012e4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b089      	sub	sp, #36	; 0x24
 80012e8:	af02      	add	r7, sp, #8
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	000c      	movs	r4, r1
 80012ee:	0010      	movs	r0, r2
 80012f0:	0019      	movs	r1, r3
 80012f2:	230a      	movs	r3, #10
 80012f4:	18fb      	adds	r3, r7, r3
 80012f6:	1c22      	adds	r2, r4, #0
 80012f8:	801a      	strh	r2, [r3, #0]
 80012fa:	2308      	movs	r3, #8
 80012fc:	18fb      	adds	r3, r7, r3
 80012fe:	1c02      	adds	r2, r0, #0
 8001300:	801a      	strh	r2, [r3, #0]
 8001302:	1dbb      	adds	r3, r7, #6
 8001304:	1c0a      	adds	r2, r1, #0
 8001306:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2241      	movs	r2, #65	; 0x41
 800130c:	5c9b      	ldrb	r3, [r3, r2]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b20      	cmp	r3, #32
 8001312:	d000      	beq.n	8001316 <HAL_I2C_Mem_Write+0x32>
 8001314:	e10c      	b.n	8001530 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001318:	2b00      	cmp	r3, #0
 800131a:	d004      	beq.n	8001326 <HAL_I2C_Mem_Write+0x42>
 800131c:	232c      	movs	r3, #44	; 0x2c
 800131e:	18fb      	adds	r3, r7, r3
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d105      	bne.n	8001332 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2280      	movs	r2, #128	; 0x80
 800132a:	0092      	lsls	r2, r2, #2
 800132c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e0ff      	b.n	8001532 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2240      	movs	r2, #64	; 0x40
 8001336:	5c9b      	ldrb	r3, [r3, r2]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d101      	bne.n	8001340 <HAL_I2C_Mem_Write+0x5c>
 800133c:	2302      	movs	r3, #2
 800133e:	e0f8      	b.n	8001532 <HAL_I2C_Mem_Write+0x24e>
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2240      	movs	r2, #64	; 0x40
 8001344:	2101      	movs	r1, #1
 8001346:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001348:	f7ff fcde 	bl	8000d08 <HAL_GetTick>
 800134c:	0003      	movs	r3, r0
 800134e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	0219      	lsls	r1, r3, #8
 8001354:	68f8      	ldr	r0, [r7, #12]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	2319      	movs	r3, #25
 800135c:	2201      	movs	r2, #1
 800135e:	f000 fb0b 	bl	8001978 <I2C_WaitOnFlagUntilTimeout>
 8001362:	1e03      	subs	r3, r0, #0
 8001364:	d001      	beq.n	800136a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e0e3      	b.n	8001532 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2241      	movs	r2, #65	; 0x41
 800136e:	2121      	movs	r1, #33	; 0x21
 8001370:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2242      	movs	r2, #66	; 0x42
 8001376:	2140      	movs	r1, #64	; 0x40
 8001378:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2200      	movs	r2, #0
 800137e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001384:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	222c      	movs	r2, #44	; 0x2c
 800138a:	18ba      	adds	r2, r7, r2
 800138c:	8812      	ldrh	r2, [r2, #0]
 800138e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2200      	movs	r2, #0
 8001394:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001396:	1dbb      	adds	r3, r7, #6
 8001398:	881c      	ldrh	r4, [r3, #0]
 800139a:	2308      	movs	r3, #8
 800139c:	18fb      	adds	r3, r7, r3
 800139e:	881a      	ldrh	r2, [r3, #0]
 80013a0:	230a      	movs	r3, #10
 80013a2:	18fb      	adds	r3, r7, r3
 80013a4:	8819      	ldrh	r1, [r3, #0]
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	0023      	movs	r3, r4
 80013b2:	f000 f9f9 	bl	80017a8 <I2C_RequestMemoryWrite>
 80013b6:	1e03      	subs	r3, r0, #0
 80013b8:	d005      	beq.n	80013c6 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	2240      	movs	r2, #64	; 0x40
 80013be:	2100      	movs	r1, #0
 80013c0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e0b5      	b.n	8001532 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	2bff      	cmp	r3, #255	; 0xff
 80013ce:	d911      	bls.n	80013f4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	22ff      	movs	r2, #255	; 0xff
 80013d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	2380      	movs	r3, #128	; 0x80
 80013de:	045c      	lsls	r4, r3, #17
 80013e0:	230a      	movs	r3, #10
 80013e2:	18fb      	adds	r3, r7, r3
 80013e4:	8819      	ldrh	r1, [r3, #0]
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	2300      	movs	r3, #0
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	0023      	movs	r3, r4
 80013ee:	f000 fc9b 	bl	8001d28 <I2C_TransferConfig>
 80013f2:	e012      	b.n	800141a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001402:	b2da      	uxtb	r2, r3
 8001404:	2380      	movs	r3, #128	; 0x80
 8001406:	049c      	lsls	r4, r3, #18
 8001408:	230a      	movs	r3, #10
 800140a:	18fb      	adds	r3, r7, r3
 800140c:	8819      	ldrh	r1, [r3, #0]
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	2300      	movs	r3, #0
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	0023      	movs	r3, r4
 8001416:	f000 fc87 	bl	8001d28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	0018      	movs	r0, r3
 8001422:	f000 faf7 	bl	8001a14 <I2C_WaitOnTXISFlagUntilTimeout>
 8001426:	1e03      	subs	r3, r0, #0
 8001428:	d001      	beq.n	800142e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e081      	b.n	8001532 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001432:	781a      	ldrb	r2, [r3, #0]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143e:	1c5a      	adds	r2, r3, #1
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001448:	b29b      	uxth	r3, r3
 800144a:	3b01      	subs	r3, #1
 800144c:	b29a      	uxth	r2, r3
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001456:	3b01      	subs	r3, #1
 8001458:	b29a      	uxth	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001462:	b29b      	uxth	r3, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	d03a      	beq.n	80014de <HAL_I2C_Mem_Write+0x1fa>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800146c:	2b00      	cmp	r3, #0
 800146e:	d136      	bne.n	80014de <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	0013      	movs	r3, r2
 800147a:	2200      	movs	r2, #0
 800147c:	2180      	movs	r1, #128	; 0x80
 800147e:	f000 fa7b 	bl	8001978 <I2C_WaitOnFlagUntilTimeout>
 8001482:	1e03      	subs	r3, r0, #0
 8001484:	d001      	beq.n	800148a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e053      	b.n	8001532 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800148e:	b29b      	uxth	r3, r3
 8001490:	2bff      	cmp	r3, #255	; 0xff
 8001492:	d911      	bls.n	80014b8 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	22ff      	movs	r2, #255	; 0xff
 8001498:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	2380      	movs	r3, #128	; 0x80
 80014a2:	045c      	lsls	r4, r3, #17
 80014a4:	230a      	movs	r3, #10
 80014a6:	18fb      	adds	r3, r7, r3
 80014a8:	8819      	ldrh	r1, [r3, #0]
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	2300      	movs	r3, #0
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	0023      	movs	r3, r4
 80014b2:	f000 fc39 	bl	8001d28 <I2C_TransferConfig>
 80014b6:	e012      	b.n	80014de <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014bc:	b29a      	uxth	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	2380      	movs	r3, #128	; 0x80
 80014ca:	049c      	lsls	r4, r3, #18
 80014cc:	230a      	movs	r3, #10
 80014ce:	18fb      	adds	r3, r7, r3
 80014d0:	8819      	ldrh	r1, [r3, #0]
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	2300      	movs	r3, #0
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	0023      	movs	r3, r4
 80014da:	f000 fc25 	bl	8001d28 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d198      	bne.n	800141a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	0018      	movs	r0, r3
 80014f0:	f000 fad6 	bl	8001aa0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80014f4:	1e03      	subs	r3, r0, #0
 80014f6:	d001      	beq.n	80014fc <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e01a      	b.n	8001532 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2220      	movs	r2, #32
 8001502:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	490b      	ldr	r1, [pc, #44]	; (800153c <HAL_I2C_Mem_Write+0x258>)
 8001510:	400a      	ands	r2, r1
 8001512:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2241      	movs	r2, #65	; 0x41
 8001518:	2120      	movs	r1, #32
 800151a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2242      	movs	r2, #66	; 0x42
 8001520:	2100      	movs	r1, #0
 8001522:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2240      	movs	r2, #64	; 0x40
 8001528:	2100      	movs	r1, #0
 800152a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800152c:	2300      	movs	r3, #0
 800152e:	e000      	b.n	8001532 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001530:	2302      	movs	r3, #2
  }
}
 8001532:	0018      	movs	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	b007      	add	sp, #28
 8001538:	bd90      	pop	{r4, r7, pc}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	fe00e800 	.word	0xfe00e800

08001540 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001540:	b590      	push	{r4, r7, lr}
 8001542:	b089      	sub	sp, #36	; 0x24
 8001544:	af02      	add	r7, sp, #8
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	000c      	movs	r4, r1
 800154a:	0010      	movs	r0, r2
 800154c:	0019      	movs	r1, r3
 800154e:	230a      	movs	r3, #10
 8001550:	18fb      	adds	r3, r7, r3
 8001552:	1c22      	adds	r2, r4, #0
 8001554:	801a      	strh	r2, [r3, #0]
 8001556:	2308      	movs	r3, #8
 8001558:	18fb      	adds	r3, r7, r3
 800155a:	1c02      	adds	r2, r0, #0
 800155c:	801a      	strh	r2, [r3, #0]
 800155e:	1dbb      	adds	r3, r7, #6
 8001560:	1c0a      	adds	r2, r1, #0
 8001562:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2241      	movs	r2, #65	; 0x41
 8001568:	5c9b      	ldrb	r3, [r3, r2]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b20      	cmp	r3, #32
 800156e:	d000      	beq.n	8001572 <HAL_I2C_Mem_Read+0x32>
 8001570:	e110      	b.n	8001794 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001574:	2b00      	cmp	r3, #0
 8001576:	d004      	beq.n	8001582 <HAL_I2C_Mem_Read+0x42>
 8001578:	232c      	movs	r3, #44	; 0x2c
 800157a:	18fb      	adds	r3, r7, r3
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d105      	bne.n	800158e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2280      	movs	r2, #128	; 0x80
 8001586:	0092      	lsls	r2, r2, #2
 8001588:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e103      	b.n	8001796 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2240      	movs	r2, #64	; 0x40
 8001592:	5c9b      	ldrb	r3, [r3, r2]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d101      	bne.n	800159c <HAL_I2C_Mem_Read+0x5c>
 8001598:	2302      	movs	r3, #2
 800159a:	e0fc      	b.n	8001796 <HAL_I2C_Mem_Read+0x256>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2240      	movs	r2, #64	; 0x40
 80015a0:	2101      	movs	r1, #1
 80015a2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015a4:	f7ff fbb0 	bl	8000d08 <HAL_GetTick>
 80015a8:	0003      	movs	r3, r0
 80015aa:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	0219      	lsls	r1, r3, #8
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	2319      	movs	r3, #25
 80015b8:	2201      	movs	r2, #1
 80015ba:	f000 f9dd 	bl	8001978 <I2C_WaitOnFlagUntilTimeout>
 80015be:	1e03      	subs	r3, r0, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e0e7      	b.n	8001796 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2241      	movs	r2, #65	; 0x41
 80015ca:	2122      	movs	r1, #34	; 0x22
 80015cc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2242      	movs	r2, #66	; 0x42
 80015d2:	2140      	movs	r1, #64	; 0x40
 80015d4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2200      	movs	r2, #0
 80015da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	222c      	movs	r2, #44	; 0x2c
 80015e6:	18ba      	adds	r2, r7, r2
 80015e8:	8812      	ldrh	r2, [r2, #0]
 80015ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2200      	movs	r2, #0
 80015f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015f2:	1dbb      	adds	r3, r7, #6
 80015f4:	881c      	ldrh	r4, [r3, #0]
 80015f6:	2308      	movs	r3, #8
 80015f8:	18fb      	adds	r3, r7, r3
 80015fa:	881a      	ldrh	r2, [r3, #0]
 80015fc:	230a      	movs	r3, #10
 80015fe:	18fb      	adds	r3, r7, r3
 8001600:	8819      	ldrh	r1, [r3, #0]
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	9301      	str	r3, [sp, #4]
 8001608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	0023      	movs	r3, r4
 800160e:	f000 f92f 	bl	8001870 <I2C_RequestMemoryRead>
 8001612:	1e03      	subs	r3, r0, #0
 8001614:	d005      	beq.n	8001622 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2240      	movs	r2, #64	; 0x40
 800161a:	2100      	movs	r1, #0
 800161c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e0b9      	b.n	8001796 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001626:	b29b      	uxth	r3, r3
 8001628:	2bff      	cmp	r3, #255	; 0xff
 800162a:	d911      	bls.n	8001650 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	22ff      	movs	r2, #255	; 0xff
 8001630:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001636:	b2da      	uxtb	r2, r3
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	045c      	lsls	r4, r3, #17
 800163c:	230a      	movs	r3, #10
 800163e:	18fb      	adds	r3, r7, r3
 8001640:	8819      	ldrh	r1, [r3, #0]
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	4b56      	ldr	r3, [pc, #344]	; (80017a0 <HAL_I2C_Mem_Read+0x260>)
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	0023      	movs	r3, r4
 800164a:	f000 fb6d 	bl	8001d28 <I2C_TransferConfig>
 800164e:	e012      	b.n	8001676 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001654:	b29a      	uxth	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800165e:	b2da      	uxtb	r2, r3
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	049c      	lsls	r4, r3, #18
 8001664:	230a      	movs	r3, #10
 8001666:	18fb      	adds	r3, r7, r3
 8001668:	8819      	ldrh	r1, [r3, #0]
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	4b4c      	ldr	r3, [pc, #304]	; (80017a0 <HAL_I2C_Mem_Read+0x260>)
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	0023      	movs	r3, r4
 8001672:	f000 fb59 	bl	8001d28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	0013      	movs	r3, r2
 8001680:	2200      	movs	r2, #0
 8001682:	2104      	movs	r1, #4
 8001684:	f000 f978 	bl	8001978 <I2C_WaitOnFlagUntilTimeout>
 8001688:	1e03      	subs	r3, r0, #0
 800168a:	d001      	beq.n	8001690 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e082      	b.n	8001796 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ac:	3b01      	subs	r3, #1
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	3b01      	subs	r3, #1
 80016bc:	b29a      	uxth	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d03a      	beq.n	8001742 <HAL_I2C_Mem_Read+0x202>
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d136      	bne.n	8001742 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016d6:	68f8      	ldr	r0, [r7, #12]
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	0013      	movs	r3, r2
 80016de:	2200      	movs	r2, #0
 80016e0:	2180      	movs	r1, #128	; 0x80
 80016e2:	f000 f949 	bl	8001978 <I2C_WaitOnFlagUntilTimeout>
 80016e6:	1e03      	subs	r3, r0, #0
 80016e8:	d001      	beq.n	80016ee <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e053      	b.n	8001796 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	2bff      	cmp	r3, #255	; 0xff
 80016f6:	d911      	bls.n	800171c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	22ff      	movs	r2, #255	; 0xff
 80016fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001702:	b2da      	uxtb	r2, r3
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	045c      	lsls	r4, r3, #17
 8001708:	230a      	movs	r3, #10
 800170a:	18fb      	adds	r3, r7, r3
 800170c:	8819      	ldrh	r1, [r3, #0]
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	2300      	movs	r3, #0
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	0023      	movs	r3, r4
 8001716:	f000 fb07 	bl	8001d28 <I2C_TransferConfig>
 800171a:	e012      	b.n	8001742 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001720:	b29a      	uxth	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800172a:	b2da      	uxtb	r2, r3
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	049c      	lsls	r4, r3, #18
 8001730:	230a      	movs	r3, #10
 8001732:	18fb      	adds	r3, r7, r3
 8001734:	8819      	ldrh	r1, [r3, #0]
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	2300      	movs	r3, #0
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	0023      	movs	r3, r4
 800173e:	f000 faf3 	bl	8001d28 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001746:	b29b      	uxth	r3, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	d194      	bne.n	8001676 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	0018      	movs	r0, r3
 8001754:	f000 f9a4 	bl	8001aa0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001758:	1e03      	subs	r3, r0, #0
 800175a:	d001      	beq.n	8001760 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e01a      	b.n	8001796 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2220      	movs	r2, #32
 8001766:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	490c      	ldr	r1, [pc, #48]	; (80017a4 <HAL_I2C_Mem_Read+0x264>)
 8001774:	400a      	ands	r2, r1
 8001776:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2241      	movs	r2, #65	; 0x41
 800177c:	2120      	movs	r1, #32
 800177e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2242      	movs	r2, #66	; 0x42
 8001784:	2100      	movs	r1, #0
 8001786:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2240      	movs	r2, #64	; 0x40
 800178c:	2100      	movs	r1, #0
 800178e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	e000      	b.n	8001796 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001794:	2302      	movs	r3, #2
  }
}
 8001796:	0018      	movs	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	b007      	add	sp, #28
 800179c:	bd90      	pop	{r4, r7, pc}
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	80002400 	.word	0x80002400
 80017a4:	fe00e800 	.word	0xfe00e800

080017a8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80017a8:	b5b0      	push	{r4, r5, r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	000c      	movs	r4, r1
 80017b2:	0010      	movs	r0, r2
 80017b4:	0019      	movs	r1, r3
 80017b6:	250a      	movs	r5, #10
 80017b8:	197b      	adds	r3, r7, r5
 80017ba:	1c22      	adds	r2, r4, #0
 80017bc:	801a      	strh	r2, [r3, #0]
 80017be:	2308      	movs	r3, #8
 80017c0:	18fb      	adds	r3, r7, r3
 80017c2:	1c02      	adds	r2, r0, #0
 80017c4:	801a      	strh	r2, [r3, #0]
 80017c6:	1dbb      	adds	r3, r7, #6
 80017c8:	1c0a      	adds	r2, r1, #0
 80017ca:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80017cc:	1dbb      	adds	r3, r7, #6
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	2380      	movs	r3, #128	; 0x80
 80017d4:	045c      	lsls	r4, r3, #17
 80017d6:	197b      	adds	r3, r7, r5
 80017d8:	8819      	ldrh	r1, [r3, #0]
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	4b23      	ldr	r3, [pc, #140]	; (800186c <I2C_RequestMemoryWrite+0xc4>)
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	0023      	movs	r3, r4
 80017e2:	f000 faa1 	bl	8001d28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017e8:	6a39      	ldr	r1, [r7, #32]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	0018      	movs	r0, r3
 80017ee:	f000 f911 	bl	8001a14 <I2C_WaitOnTXISFlagUntilTimeout>
 80017f2:	1e03      	subs	r3, r0, #0
 80017f4:	d001      	beq.n	80017fa <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e033      	b.n	8001862 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80017fa:	1dbb      	adds	r3, r7, #6
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d107      	bne.n	8001812 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001802:	2308      	movs	r3, #8
 8001804:	18fb      	adds	r3, r7, r3
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	b2da      	uxtb	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	629a      	str	r2, [r3, #40]	; 0x28
 8001810:	e019      	b.n	8001846 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001812:	2308      	movs	r3, #8
 8001814:	18fb      	adds	r3, r7, r3
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	b29b      	uxth	r3, r3
 800181c:	b2da      	uxtb	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001826:	6a39      	ldr	r1, [r7, #32]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	0018      	movs	r0, r3
 800182c:	f000 f8f2 	bl	8001a14 <I2C_WaitOnTXISFlagUntilTimeout>
 8001830:	1e03      	subs	r3, r0, #0
 8001832:	d001      	beq.n	8001838 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e014      	b.n	8001862 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001838:	2308      	movs	r3, #8
 800183a:	18fb      	adds	r3, r7, r3
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001846:	6a3a      	ldr	r2, [r7, #32]
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	0013      	movs	r3, r2
 8001850:	2200      	movs	r2, #0
 8001852:	2180      	movs	r1, #128	; 0x80
 8001854:	f000 f890 	bl	8001978 <I2C_WaitOnFlagUntilTimeout>
 8001858:	1e03      	subs	r3, r0, #0
 800185a:	d001      	beq.n	8001860 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	0018      	movs	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	b004      	add	sp, #16
 8001868:	bdb0      	pop	{r4, r5, r7, pc}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	80002000 	.word	0x80002000

08001870 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001870:	b5b0      	push	{r4, r5, r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af02      	add	r7, sp, #8
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	000c      	movs	r4, r1
 800187a:	0010      	movs	r0, r2
 800187c:	0019      	movs	r1, r3
 800187e:	250a      	movs	r5, #10
 8001880:	197b      	adds	r3, r7, r5
 8001882:	1c22      	adds	r2, r4, #0
 8001884:	801a      	strh	r2, [r3, #0]
 8001886:	2308      	movs	r3, #8
 8001888:	18fb      	adds	r3, r7, r3
 800188a:	1c02      	adds	r2, r0, #0
 800188c:	801a      	strh	r2, [r3, #0]
 800188e:	1dbb      	adds	r3, r7, #6
 8001890:	1c0a      	adds	r2, r1, #0
 8001892:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001894:	1dbb      	adds	r3, r7, #6
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	b2da      	uxtb	r2, r3
 800189a:	197b      	adds	r3, r7, r5
 800189c:	8819      	ldrh	r1, [r3, #0]
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	4b23      	ldr	r3, [pc, #140]	; (8001930 <I2C_RequestMemoryRead+0xc0>)
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2300      	movs	r3, #0
 80018a6:	f000 fa3f 	bl	8001d28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ac:	6a39      	ldr	r1, [r7, #32]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	0018      	movs	r0, r3
 80018b2:	f000 f8af 	bl	8001a14 <I2C_WaitOnTXISFlagUntilTimeout>
 80018b6:	1e03      	subs	r3, r0, #0
 80018b8:	d001      	beq.n	80018be <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e033      	b.n	8001926 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80018be:	1dbb      	adds	r3, r7, #6
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d107      	bne.n	80018d6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018c6:	2308      	movs	r3, #8
 80018c8:	18fb      	adds	r3, r7, r3
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	629a      	str	r2, [r3, #40]	; 0x28
 80018d4:	e019      	b.n	800190a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80018d6:	2308      	movs	r3, #8
 80018d8:	18fb      	adds	r3, r7, r3
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	0a1b      	lsrs	r3, r3, #8
 80018de:	b29b      	uxth	r3, r3
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ea:	6a39      	ldr	r1, [r7, #32]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	0018      	movs	r0, r3
 80018f0:	f000 f890 	bl	8001a14 <I2C_WaitOnTXISFlagUntilTimeout>
 80018f4:	1e03      	subs	r3, r0, #0
 80018f6:	d001      	beq.n	80018fc <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e014      	b.n	8001926 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018fc:	2308      	movs	r3, #8
 80018fe:	18fb      	adds	r3, r7, r3
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	b2da      	uxtb	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800190a:	6a3a      	ldr	r2, [r7, #32]
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	0013      	movs	r3, r2
 8001914:	2200      	movs	r2, #0
 8001916:	2140      	movs	r1, #64	; 0x40
 8001918:	f000 f82e 	bl	8001978 <I2C_WaitOnFlagUntilTimeout>
 800191c:	1e03      	subs	r3, r0, #0
 800191e:	d001      	beq.n	8001924 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e000      	b.n	8001926 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	0018      	movs	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	b004      	add	sp, #16
 800192c:	bdb0      	pop	{r4, r5, r7, pc}
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	80002000 	.word	0x80002000

08001934 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	2202      	movs	r2, #2
 8001944:	4013      	ands	r3, r2
 8001946:	2b02      	cmp	r3, #2
 8001948:	d103      	bne.n	8001952 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2200      	movs	r2, #0
 8001950:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	2201      	movs	r2, #1
 800195a:	4013      	ands	r3, r2
 800195c:	2b01      	cmp	r3, #1
 800195e:	d007      	beq.n	8001970 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	699a      	ldr	r2, [r3, #24]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2101      	movs	r1, #1
 800196c:	430a      	orrs	r2, r1
 800196e:	619a      	str	r2, [r3, #24]
  }
}
 8001970:	46c0      	nop			; (mov r8, r8)
 8001972:	46bd      	mov	sp, r7
 8001974:	b002      	add	sp, #8
 8001976:	bd80      	pop	{r7, pc}

08001978 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	1dfb      	adds	r3, r7, #7
 8001986:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001988:	e030      	b.n	80019ec <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	3301      	adds	r3, #1
 800198e:	d02d      	beq.n	80019ec <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001990:	f7ff f9ba 	bl	8000d08 <HAL_GetTick>
 8001994:	0002      	movs	r2, r0
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d302      	bcc.n	80019a6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d122      	bne.n	80019ec <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	68ba      	ldr	r2, [r7, #8]
 80019ae:	4013      	ands	r3, r2
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	425a      	negs	r2, r3
 80019b6:	4153      	adcs	r3, r2
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	001a      	movs	r2, r3
 80019bc:	1dfb      	adds	r3, r7, #7
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d113      	bne.n	80019ec <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c8:	2220      	movs	r2, #32
 80019ca:	431a      	orrs	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2241      	movs	r2, #65	; 0x41
 80019d4:	2120      	movs	r1, #32
 80019d6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2242      	movs	r2, #66	; 0x42
 80019dc:	2100      	movs	r1, #0
 80019de:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2240      	movs	r2, #64	; 0x40
 80019e4:	2100      	movs	r1, #0
 80019e6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e00f      	b.n	8001a0c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	4013      	ands	r3, r2
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	425a      	negs	r2, r3
 80019fc:	4153      	adcs	r3, r2
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	001a      	movs	r2, r3
 8001a02:	1dfb      	adds	r3, r7, #7
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d0bf      	beq.n	800198a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	b004      	add	sp, #16
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a20:	e032      	b.n	8001a88 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f000 f87d 	bl	8001b28 <I2C_IsErrorOccurred>
 8001a2e:	1e03      	subs	r3, r0, #0
 8001a30:	d001      	beq.n	8001a36 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e030      	b.n	8001a98 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	d025      	beq.n	8001a88 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a3c:	f7ff f964 	bl	8000d08 <HAL_GetTick>
 8001a40:	0002      	movs	r2, r0
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d302      	bcc.n	8001a52 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d11a      	bne.n	8001a88 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	2202      	movs	r2, #2
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d013      	beq.n	8001a88 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a64:	2220      	movs	r2, #32
 8001a66:	431a      	orrs	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2241      	movs	r2, #65	; 0x41
 8001a70:	2120      	movs	r1, #32
 8001a72:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2242      	movs	r2, #66	; 0x42
 8001a78:	2100      	movs	r1, #0
 8001a7a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2240      	movs	r2, #64	; 0x40
 8001a80:	2100      	movs	r1, #0
 8001a82:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e007      	b.n	8001a98 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	2202      	movs	r2, #2
 8001a90:	4013      	ands	r3, r2
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d1c5      	bne.n	8001a22 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	0018      	movs	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	b004      	add	sp, #16
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001aac:	e02f      	b.n	8001b0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f000 f837 	bl	8001b28 <I2C_IsErrorOccurred>
 8001aba:	1e03      	subs	r3, r0, #0
 8001abc:	d001      	beq.n	8001ac2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e02d      	b.n	8001b1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ac2:	f7ff f921 	bl	8000d08 <HAL_GetTick>
 8001ac6:	0002      	movs	r2, r0
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	68ba      	ldr	r2, [r7, #8]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d302      	bcc.n	8001ad8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d11a      	bne.n	8001b0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	2220      	movs	r2, #32
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	2b20      	cmp	r3, #32
 8001ae4:	d013      	beq.n	8001b0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	2220      	movs	r2, #32
 8001aec:	431a      	orrs	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2241      	movs	r2, #65	; 0x41
 8001af6:	2120      	movs	r1, #32
 8001af8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2242      	movs	r2, #66	; 0x42
 8001afe:	2100      	movs	r1, #0
 8001b00:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2240      	movs	r2, #64	; 0x40
 8001b06:	2100      	movs	r1, #0
 8001b08:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e007      	b.n	8001b1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	2220      	movs	r2, #32
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b20      	cmp	r3, #32
 8001b1a:	d1c8      	bne.n	8001aae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	0018      	movs	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	b004      	add	sp, #16
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b28:	b590      	push	{r4, r7, lr}
 8001b2a:	b08b      	sub	sp, #44	; 0x2c
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b34:	2327      	movs	r3, #39	; 0x27
 8001b36:	18fb      	adds	r3, r7, r3
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	2210      	movs	r2, #16
 8001b50:	4013      	ands	r3, r2
 8001b52:	d100      	bne.n	8001b56 <I2C_IsErrorOccurred+0x2e>
 8001b54:	e082      	b.n	8001c5c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2210      	movs	r2, #16
 8001b5c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b5e:	e060      	b.n	8001c22 <I2C_IsErrorOccurred+0xfa>
 8001b60:	2427      	movs	r4, #39	; 0x27
 8001b62:	193b      	adds	r3, r7, r4
 8001b64:	193a      	adds	r2, r7, r4
 8001b66:	7812      	ldrb	r2, [r2, #0]
 8001b68:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	d058      	beq.n	8001c22 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b70:	f7ff f8ca 	bl	8000d08 <HAL_GetTick>
 8001b74:	0002      	movs	r2, r0
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d306      	bcc.n	8001b8e <I2C_IsErrorOccurred+0x66>
 8001b80:	193b      	adds	r3, r7, r4
 8001b82:	193a      	adds	r2, r7, r4
 8001b84:	7812      	ldrb	r2, [r2, #0]
 8001b86:	701a      	strb	r2, [r3, #0]
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d149      	bne.n	8001c22 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	2380      	movs	r3, #128	; 0x80
 8001b96:	01db      	lsls	r3, r3, #7
 8001b98:	4013      	ands	r3, r2
 8001b9a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001b9c:	2013      	movs	r0, #19
 8001b9e:	183b      	adds	r3, r7, r0
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	2142      	movs	r1, #66	; 0x42
 8001ba4:	5c52      	ldrb	r2, [r2, r1]
 8001ba6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	699a      	ldr	r2, [r3, #24]
 8001bae:	2380      	movs	r3, #128	; 0x80
 8001bb0:	021b      	lsls	r3, r3, #8
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d126      	bne.n	8001c0a <I2C_IsErrorOccurred+0xe2>
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	01db      	lsls	r3, r3, #7
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d021      	beq.n	8001c0a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001bc6:	183b      	adds	r3, r7, r0
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b20      	cmp	r3, #32
 8001bcc:	d01d      	beq.n	8001c0a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2180      	movs	r1, #128	; 0x80
 8001bda:	01c9      	lsls	r1, r1, #7
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001be0:	f7ff f892 	bl	8000d08 <HAL_GetTick>
 8001be4:	0003      	movs	r3, r0
 8001be6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001be8:	e00f      	b.n	8001c0a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001bea:	f7ff f88d 	bl	8000d08 <HAL_GetTick>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b19      	cmp	r3, #25
 8001bf6:	d908      	bls.n	8001c0a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001c00:	2327      	movs	r3, #39	; 0x27
 8001c02:	18fb      	adds	r3, r7, r3
 8001c04:	2201      	movs	r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]

              break;
 8001c08:	e00b      	b.n	8001c22 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	2220      	movs	r2, #32
 8001c12:	4013      	ands	r3, r2
 8001c14:	2127      	movs	r1, #39	; 0x27
 8001c16:	187a      	adds	r2, r7, r1
 8001c18:	1879      	adds	r1, r7, r1
 8001c1a:	7809      	ldrb	r1, [r1, #0]
 8001c1c:	7011      	strb	r1, [r2, #0]
 8001c1e:	2b20      	cmp	r3, #32
 8001c20:	d1e3      	bne.n	8001bea <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	2220      	movs	r2, #32
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	2b20      	cmp	r3, #32
 8001c2e:	d004      	beq.n	8001c3a <I2C_IsErrorOccurred+0x112>
 8001c30:	2327      	movs	r3, #39	; 0x27
 8001c32:	18fb      	adds	r3, r7, r3
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d092      	beq.n	8001b60 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001c3a:	2327      	movs	r3, #39	; 0x27
 8001c3c:	18fb      	adds	r3, r7, r3
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d103      	bne.n	8001c4c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2220      	movs	r2, #32
 8001c4a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	2204      	movs	r2, #4
 8001c50:	4313      	orrs	r3, r2
 8001c52:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001c54:	2327      	movs	r3, #39	; 0x27
 8001c56:	18fb      	adds	r3, r7, r3
 8001c58:	2201      	movs	r2, #1
 8001c5a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	2380      	movs	r3, #128	; 0x80
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d00c      	beq.n	8001c88 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	2201      	movs	r2, #1
 8001c72:	4313      	orrs	r3, r2
 8001c74:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2280      	movs	r2, #128	; 0x80
 8001c7c:	0052      	lsls	r2, r2, #1
 8001c7e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c80:	2327      	movs	r3, #39	; 0x27
 8001c82:	18fb      	adds	r3, r7, r3
 8001c84:	2201      	movs	r2, #1
 8001c86:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	2380      	movs	r3, #128	; 0x80
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d00c      	beq.n	8001cac <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	2208      	movs	r2, #8
 8001c96:	4313      	orrs	r3, r2
 8001c98:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2280      	movs	r2, #128	; 0x80
 8001ca0:	00d2      	lsls	r2, r2, #3
 8001ca2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ca4:	2327      	movs	r3, #39	; 0x27
 8001ca6:	18fb      	adds	r3, r7, r3
 8001ca8:	2201      	movs	r2, #1
 8001caa:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	2380      	movs	r3, #128	; 0x80
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d00c      	beq.n	8001cd0 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001cb6:	6a3b      	ldr	r3, [r7, #32]
 8001cb8:	2202      	movs	r2, #2
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2280      	movs	r2, #128	; 0x80
 8001cc4:	0092      	lsls	r2, r2, #2
 8001cc6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cc8:	2327      	movs	r3, #39	; 0x27
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	2201      	movs	r2, #1
 8001cce:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001cd0:	2327      	movs	r3, #39	; 0x27
 8001cd2:	18fb      	adds	r3, r7, r3
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d01d      	beq.n	8001d16 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f7ff fe29 	bl	8001934 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	490d      	ldr	r1, [pc, #52]	; (8001d24 <I2C_IsErrorOccurred+0x1fc>)
 8001cee:	400a      	ands	r2, r1
 8001cf0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cf6:	6a3b      	ldr	r3, [r7, #32]
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2241      	movs	r2, #65	; 0x41
 8001d02:	2120      	movs	r1, #32
 8001d04:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2242      	movs	r2, #66	; 0x42
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2240      	movs	r2, #64	; 0x40
 8001d12:	2100      	movs	r1, #0
 8001d14:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001d16:	2327      	movs	r3, #39	; 0x27
 8001d18:	18fb      	adds	r3, r7, r3
 8001d1a:	781b      	ldrb	r3, [r3, #0]
}
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	b00b      	add	sp, #44	; 0x2c
 8001d22:	bd90      	pop	{r4, r7, pc}
 8001d24:	fe00e800 	.word	0xfe00e800

08001d28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d28:	b590      	push	{r4, r7, lr}
 8001d2a:	b087      	sub	sp, #28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	0008      	movs	r0, r1
 8001d32:	0011      	movs	r1, r2
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	240a      	movs	r4, #10
 8001d38:	193b      	adds	r3, r7, r4
 8001d3a:	1c02      	adds	r2, r0, #0
 8001d3c:	801a      	strh	r2, [r3, #0]
 8001d3e:	2009      	movs	r0, #9
 8001d40:	183b      	adds	r3, r7, r0
 8001d42:	1c0a      	adds	r2, r1, #0
 8001d44:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d46:	193b      	adds	r3, r7, r4
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	059b      	lsls	r3, r3, #22
 8001d4c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d4e:	183b      	adds	r3, r7, r0
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	0419      	lsls	r1, r3, #16
 8001d54:	23ff      	movs	r3, #255	; 0xff
 8001d56:	041b      	lsls	r3, r3, #16
 8001d58:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d5a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d62:	4313      	orrs	r3, r2
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	085b      	lsrs	r3, r3, #1
 8001d68:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d72:	0d51      	lsrs	r1, r2, #21
 8001d74:	2280      	movs	r2, #128	; 0x80
 8001d76:	00d2      	lsls	r2, r2, #3
 8001d78:	400a      	ands	r2, r1
 8001d7a:	4907      	ldr	r1, [pc, #28]	; (8001d98 <I2C_TransferConfig+0x70>)
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	43d2      	mvns	r2, r2
 8001d80:	401a      	ands	r2, r3
 8001d82:	0011      	movs	r1, r2
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	46bd      	mov	sp, r7
 8001d92:	b007      	add	sp, #28
 8001d94:	bd90      	pop	{r4, r7, pc}
 8001d96:	46c0      	nop			; (mov r8, r8)
 8001d98:	03ff63ff 	.word	0x03ff63ff

08001d9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d9c:	b5b0      	push	{r4, r5, r7, lr}
 8001d9e:	b08a      	sub	sp, #40	; 0x28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d102      	bne.n	8001db0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	f000 fb5a 	bl	8002464 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001db0:	4bce      	ldr	r3, [pc, #824]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	220c      	movs	r2, #12
 8001db6:	4013      	ands	r3, r2
 8001db8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dba:	4bcc      	ldr	r3, [pc, #816]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	025b      	lsls	r3, r3, #9
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d100      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x36>
 8001dd0:	e07c      	b.n	8001ecc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dd2:	6a3b      	ldr	r3, [r7, #32]
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	d007      	beq.n	8001de8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001dd8:	6a3b      	ldr	r3, [r7, #32]
 8001dda:	2b0c      	cmp	r3, #12
 8001ddc:	d111      	bne.n	8001e02 <HAL_RCC_OscConfig+0x66>
 8001dde:	69fa      	ldr	r2, [r7, #28]
 8001de0:	2380      	movs	r3, #128	; 0x80
 8001de2:	025b      	lsls	r3, r3, #9
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d10c      	bne.n	8001e02 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de8:	4bc0      	ldr	r3, [pc, #768]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	029b      	lsls	r3, r3, #10
 8001df0:	4013      	ands	r3, r2
 8001df2:	d100      	bne.n	8001df6 <HAL_RCC_OscConfig+0x5a>
 8001df4:	e069      	b.n	8001eca <HAL_RCC_OscConfig+0x12e>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d165      	bne.n	8001eca <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e330      	b.n	8002464 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	2380      	movs	r3, #128	; 0x80
 8001e08:	025b      	lsls	r3, r3, #9
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d107      	bne.n	8001e1e <HAL_RCC_OscConfig+0x82>
 8001e0e:	4bb7      	ldr	r3, [pc, #732]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	4bb6      	ldr	r3, [pc, #728]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8001e14:	2180      	movs	r1, #128	; 0x80
 8001e16:	0249      	lsls	r1, r1, #9
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	e027      	b.n	8001e6e <HAL_RCC_OscConfig+0xd2>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	23a0      	movs	r3, #160	; 0xa0
 8001e24:	02db      	lsls	r3, r3, #11
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d10e      	bne.n	8001e48 <HAL_RCC_OscConfig+0xac>
 8001e2a:	4bb0      	ldr	r3, [pc, #704]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	4baf      	ldr	r3, [pc, #700]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8001e30:	2180      	movs	r1, #128	; 0x80
 8001e32:	02c9      	lsls	r1, r1, #11
 8001e34:	430a      	orrs	r2, r1
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	4bac      	ldr	r3, [pc, #688]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4bab      	ldr	r3, [pc, #684]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8001e3e:	2180      	movs	r1, #128	; 0x80
 8001e40:	0249      	lsls	r1, r1, #9
 8001e42:	430a      	orrs	r2, r1
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	e012      	b.n	8001e6e <HAL_RCC_OscConfig+0xd2>
 8001e48:	4ba8      	ldr	r3, [pc, #672]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4ba7      	ldr	r3, [pc, #668]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8001e4e:	49a8      	ldr	r1, [pc, #672]	; (80020f0 <HAL_RCC_OscConfig+0x354>)
 8001e50:	400a      	ands	r2, r1
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	4ba5      	ldr	r3, [pc, #660]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	025b      	lsls	r3, r3, #9
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4ba2      	ldr	r3, [pc, #648]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	4ba1      	ldr	r3, [pc, #644]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8001e68:	49a2      	ldr	r1, [pc, #648]	; (80020f4 <HAL_RCC_OscConfig+0x358>)
 8001e6a:	400a      	ands	r2, r1
 8001e6c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d014      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e76:	f7fe ff47 	bl	8000d08 <HAL_GetTick>
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e80:	f7fe ff42 	bl	8000d08 <HAL_GetTick>
 8001e84:	0002      	movs	r2, r0
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b64      	cmp	r3, #100	; 0x64
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e2e8      	b.n	8002464 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e92:	4b96      	ldr	r3, [pc, #600]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	2380      	movs	r3, #128	; 0x80
 8001e98:	029b      	lsls	r3, r3, #10
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0xe4>
 8001e9e:	e015      	b.n	8001ecc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7fe ff32 	bl	8000d08 <HAL_GetTick>
 8001ea4:	0003      	movs	r3, r0
 8001ea6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eaa:	f7fe ff2d 	bl	8000d08 <HAL_GetTick>
 8001eae:	0002      	movs	r2, r0
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b64      	cmp	r3, #100	; 0x64
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e2d3      	b.n	8002464 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ebc:	4b8b      	ldr	r3, [pc, #556]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	2380      	movs	r3, #128	; 0x80
 8001ec2:	029b      	lsls	r3, r3, #10
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d1f0      	bne.n	8001eaa <HAL_RCC_OscConfig+0x10e>
 8001ec8:	e000      	b.n	8001ecc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d100      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x13c>
 8001ed6:	e08b      	b.n	8001ff0 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d005      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ee4:	6a3b      	ldr	r3, [r7, #32]
 8001ee6:	2b0c      	cmp	r3, #12
 8001ee8:	d13e      	bne.n	8001f68 <HAL_RCC_OscConfig+0x1cc>
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d13b      	bne.n	8001f68 <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001ef0:	4b7e      	ldr	r3, [pc, #504]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2204      	movs	r2, #4
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d004      	beq.n	8001f04 <HAL_RCC_OscConfig+0x168>
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e2af      	b.n	8002464 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f04:	4b79      	ldr	r3, [pc, #484]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	4a7b      	ldr	r2, [pc, #492]	; (80020f8 <HAL_RCC_OscConfig+0x35c>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	0019      	movs	r1, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	021a      	lsls	r2, r3, #8
 8001f14:	4b75      	ldr	r3, [pc, #468]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8001f16:	430a      	orrs	r2, r1
 8001f18:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001f1a:	4b74      	ldr	r3, [pc, #464]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2209      	movs	r2, #9
 8001f20:	4393      	bics	r3, r2
 8001f22:	0019      	movs	r1, r3
 8001f24:	4b71      	ldr	r3, [pc, #452]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f2c:	f000 fbe8 	bl	8002700 <HAL_RCC_GetSysClockFreq>
 8001f30:	0001      	movs	r1, r0
 8001f32:	4b6e      	ldr	r3, [pc, #440]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	091b      	lsrs	r3, r3, #4
 8001f38:	220f      	movs	r2, #15
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	4a6f      	ldr	r2, [pc, #444]	; (80020fc <HAL_RCC_OscConfig+0x360>)
 8001f3e:	5cd3      	ldrb	r3, [r2, r3]
 8001f40:	000a      	movs	r2, r1
 8001f42:	40da      	lsrs	r2, r3
 8001f44:	4b6e      	ldr	r3, [pc, #440]	; (8002100 <HAL_RCC_OscConfig+0x364>)
 8001f46:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001f48:	4b6e      	ldr	r3, [pc, #440]	; (8002104 <HAL_RCC_OscConfig+0x368>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2513      	movs	r5, #19
 8001f4e:	197c      	adds	r4, r7, r5
 8001f50:	0018      	movs	r0, r3
 8001f52:	f7fe fe93 	bl	8000c7c <HAL_InitTick>
 8001f56:	0003      	movs	r3, r0
 8001f58:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001f5a:	197b      	adds	r3, r7, r5
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d046      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 8001f62:	197b      	adds	r3, r7, r5
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	e27d      	b.n	8002464 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d027      	beq.n	8001fbe <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001f6e:	4b5f      	ldr	r3, [pc, #380]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2209      	movs	r2, #9
 8001f74:	4393      	bics	r3, r2
 8001f76:	0019      	movs	r1, r3
 8001f78:	4b5c      	ldr	r3, [pc, #368]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7fe fec2 	bl	8000d08 <HAL_GetTick>
 8001f84:	0003      	movs	r3, r0
 8001f86:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f8a:	f7fe febd 	bl	8000d08 <HAL_GetTick>
 8001f8e:	0002      	movs	r2, r0
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e263      	b.n	8002464 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f9c:	4b53      	ldr	r3, [pc, #332]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2204      	movs	r2, #4
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d0f1      	beq.n	8001f8a <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa6:	4b51      	ldr	r3, [pc, #324]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	4a53      	ldr	r2, [pc, #332]	; (80020f8 <HAL_RCC_OscConfig+0x35c>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	0019      	movs	r1, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	021a      	lsls	r2, r3, #8
 8001fb6:	4b4d      	ldr	r3, [pc, #308]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	605a      	str	r2, [r3, #4]
 8001fbc:	e018      	b.n	8001ff0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fbe:	4b4b      	ldr	r3, [pc, #300]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	4b4a      	ldr	r3, [pc, #296]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	438a      	bics	r2, r1
 8001fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fca:	f7fe fe9d 	bl	8000d08 <HAL_GetTick>
 8001fce:	0003      	movs	r3, r0
 8001fd0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd4:	f7fe fe98 	bl	8000d08 <HAL_GetTick>
 8001fd8:	0002      	movs	r2, r0
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e23e      	b.n	8002464 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fe6:	4b41      	ldr	r3, [pc, #260]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2204      	movs	r2, #4
 8001fec:	4013      	ands	r3, r2
 8001fee:	d1f1      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2210      	movs	r2, #16
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d100      	bne.n	8001ffc <HAL_RCC_OscConfig+0x260>
 8001ffa:	e0a1      	b.n	8002140 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d140      	bne.n	8002084 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002002:	4b3a      	ldr	r3, [pc, #232]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4013      	ands	r3, r2
 800200c:	d005      	beq.n	800201a <HAL_RCC_OscConfig+0x27e>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e224      	b.n	8002464 <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800201a:	4b34      	ldr	r3, [pc, #208]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	4a3a      	ldr	r2, [pc, #232]	; (8002108 <HAL_RCC_OscConfig+0x36c>)
 8002020:	4013      	ands	r3, r2
 8002022:	0019      	movs	r1, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a1a      	ldr	r2, [r3, #32]
 8002028:	4b30      	ldr	r3, [pc, #192]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 800202a:	430a      	orrs	r2, r1
 800202c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800202e:	4b2f      	ldr	r3, [pc, #188]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	021b      	lsls	r3, r3, #8
 8002034:	0a19      	lsrs	r1, r3, #8
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	061a      	lsls	r2, r3, #24
 800203c:	4b2b      	ldr	r3, [pc, #172]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 800203e:	430a      	orrs	r2, r1
 8002040:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	0b5b      	lsrs	r3, r3, #13
 8002048:	3301      	adds	r3, #1
 800204a:	2280      	movs	r2, #128	; 0x80
 800204c:	0212      	lsls	r2, r2, #8
 800204e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002050:	4b26      	ldr	r3, [pc, #152]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	091b      	lsrs	r3, r3, #4
 8002056:	210f      	movs	r1, #15
 8002058:	400b      	ands	r3, r1
 800205a:	4928      	ldr	r1, [pc, #160]	; (80020fc <HAL_RCC_OscConfig+0x360>)
 800205c:	5ccb      	ldrb	r3, [r1, r3]
 800205e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002060:	4b27      	ldr	r3, [pc, #156]	; (8002100 <HAL_RCC_OscConfig+0x364>)
 8002062:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002064:	4b27      	ldr	r3, [pc, #156]	; (8002104 <HAL_RCC_OscConfig+0x368>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2513      	movs	r5, #19
 800206a:	197c      	adds	r4, r7, r5
 800206c:	0018      	movs	r0, r3
 800206e:	f7fe fe05 	bl	8000c7c <HAL_InitTick>
 8002072:	0003      	movs	r3, r0
 8002074:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002076:	197b      	adds	r3, r7, r5
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d060      	beq.n	8002140 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 800207e:	197b      	adds	r3, r7, r5
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	e1ef      	b.n	8002464 <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d03f      	beq.n	800210c <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800208c:	4b17      	ldr	r3, [pc, #92]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	4b16      	ldr	r3, [pc, #88]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 8002092:	2180      	movs	r1, #128	; 0x80
 8002094:	0049      	lsls	r1, r1, #1
 8002096:	430a      	orrs	r2, r1
 8002098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209a:	f7fe fe35 	bl	8000d08 <HAL_GetTick>
 800209e:	0003      	movs	r3, r0
 80020a0:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020a4:	f7fe fe30 	bl	8000d08 <HAL_GetTick>
 80020a8:	0002      	movs	r2, r0
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e1d6      	b.n	8002464 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	2380      	movs	r3, #128	; 0x80
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4013      	ands	r3, r2
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4a10      	ldr	r2, [pc, #64]	; (8002108 <HAL_RCC_OscConfig+0x36c>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	0019      	movs	r1, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a1a      	ldr	r2, [r3, #32]
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 80020d2:	430a      	orrs	r2, r1
 80020d4:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020d6:	4b05      	ldr	r3, [pc, #20]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	0a19      	lsrs	r1, r3, #8
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	061a      	lsls	r2, r3, #24
 80020e4:	4b01      	ldr	r3, [pc, #4]	; (80020ec <HAL_RCC_OscConfig+0x350>)
 80020e6:	430a      	orrs	r2, r1
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	e029      	b.n	8002140 <HAL_RCC_OscConfig+0x3a4>
 80020ec:	40021000 	.word	0x40021000
 80020f0:	fffeffff 	.word	0xfffeffff
 80020f4:	fffbffff 	.word	0xfffbffff
 80020f8:	ffffe0ff 	.word	0xffffe0ff
 80020fc:	08003d6c 	.word	0x08003d6c
 8002100:	20000000 	.word	0x20000000
 8002104:	20000004 	.word	0x20000004
 8002108:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800210c:	4bbe      	ldr	r3, [pc, #760]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4bbd      	ldr	r3, [pc, #756]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 8002112:	49be      	ldr	r1, [pc, #760]	; (800240c <HAL_RCC_OscConfig+0x670>)
 8002114:	400a      	ands	r2, r1
 8002116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7fe fdf6 	bl	8000d08 <HAL_GetTick>
 800211c:	0003      	movs	r3, r0
 800211e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002122:	f7fe fdf1 	bl	8000d08 <HAL_GetTick>
 8002126:	0002      	movs	r2, r0
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e197      	b.n	8002464 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002134:	4bb4      	ldr	r3, [pc, #720]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	2380      	movs	r3, #128	; 0x80
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4013      	ands	r3, r2
 800213e:	d1f0      	bne.n	8002122 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2208      	movs	r2, #8
 8002146:	4013      	ands	r3, r2
 8002148:	d036      	beq.n	80021b8 <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d019      	beq.n	8002186 <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002152:	4bad      	ldr	r3, [pc, #692]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 8002154:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002156:	4bac      	ldr	r3, [pc, #688]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 8002158:	2101      	movs	r1, #1
 800215a:	430a      	orrs	r2, r1
 800215c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215e:	f7fe fdd3 	bl	8000d08 <HAL_GetTick>
 8002162:	0003      	movs	r3, r0
 8002164:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002168:	f7fe fdce 	bl	8000d08 <HAL_GetTick>
 800216c:	0002      	movs	r2, r0
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e174      	b.n	8002464 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800217a:	4ba3      	ldr	r3, [pc, #652]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 800217c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800217e:	2202      	movs	r2, #2
 8002180:	4013      	ands	r3, r2
 8002182:	d0f1      	beq.n	8002168 <HAL_RCC_OscConfig+0x3cc>
 8002184:	e018      	b.n	80021b8 <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002186:	4ba0      	ldr	r3, [pc, #640]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 8002188:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800218a:	4b9f      	ldr	r3, [pc, #636]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 800218c:	2101      	movs	r1, #1
 800218e:	438a      	bics	r2, r1
 8002190:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002192:	f7fe fdb9 	bl	8000d08 <HAL_GetTick>
 8002196:	0003      	movs	r3, r0
 8002198:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800219c:	f7fe fdb4 	bl	8000d08 <HAL_GetTick>
 80021a0:	0002      	movs	r2, r0
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e15a      	b.n	8002464 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021ae:	4b96      	ldr	r3, [pc, #600]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 80021b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b2:	2202      	movs	r2, #2
 80021b4:	4013      	ands	r3, r2
 80021b6:	d1f1      	bne.n	800219c <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2204      	movs	r2, #4
 80021be:	4013      	ands	r3, r2
 80021c0:	d100      	bne.n	80021c4 <HAL_RCC_OscConfig+0x428>
 80021c2:	e0ae      	b.n	8002322 <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021c4:	2027      	movs	r0, #39	; 0x27
 80021c6:	183b      	adds	r3, r7, r0
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021cc:	4b8e      	ldr	r3, [pc, #568]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 80021ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021d0:	2380      	movs	r3, #128	; 0x80
 80021d2:	055b      	lsls	r3, r3, #21
 80021d4:	4013      	ands	r3, r2
 80021d6:	d109      	bne.n	80021ec <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d8:	4b8b      	ldr	r3, [pc, #556]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 80021da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021dc:	4b8a      	ldr	r3, [pc, #552]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 80021de:	2180      	movs	r1, #128	; 0x80
 80021e0:	0549      	lsls	r1, r1, #21
 80021e2:	430a      	orrs	r2, r1
 80021e4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80021e6:	183b      	adds	r3, r7, r0
 80021e8:	2201      	movs	r2, #1
 80021ea:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ec:	4b88      	ldr	r3, [pc, #544]	; (8002410 <HAL_RCC_OscConfig+0x674>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	4013      	ands	r3, r2
 80021f6:	d11a      	bne.n	800222e <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021f8:	4b85      	ldr	r3, [pc, #532]	; (8002410 <HAL_RCC_OscConfig+0x674>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b84      	ldr	r3, [pc, #528]	; (8002410 <HAL_RCC_OscConfig+0x674>)
 80021fe:	2180      	movs	r1, #128	; 0x80
 8002200:	0049      	lsls	r1, r1, #1
 8002202:	430a      	orrs	r2, r1
 8002204:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002206:	f7fe fd7f 	bl	8000d08 <HAL_GetTick>
 800220a:	0003      	movs	r3, r0
 800220c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002210:	f7fe fd7a 	bl	8000d08 <HAL_GetTick>
 8002214:	0002      	movs	r2, r0
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b64      	cmp	r3, #100	; 0x64
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e120      	b.n	8002464 <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002222:	4b7b      	ldr	r3, [pc, #492]	; (8002410 <HAL_RCC_OscConfig+0x674>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	4013      	ands	r3, r2
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	429a      	cmp	r2, r3
 8002238:	d107      	bne.n	800224a <HAL_RCC_OscConfig+0x4ae>
 800223a:	4b73      	ldr	r3, [pc, #460]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 800223c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800223e:	4b72      	ldr	r3, [pc, #456]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 8002240:	2180      	movs	r1, #128	; 0x80
 8002242:	0049      	lsls	r1, r1, #1
 8002244:	430a      	orrs	r2, r1
 8002246:	651a      	str	r2, [r3, #80]	; 0x50
 8002248:	e031      	b.n	80022ae <HAL_RCC_OscConfig+0x512>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10c      	bne.n	800226c <HAL_RCC_OscConfig+0x4d0>
 8002252:	4b6d      	ldr	r3, [pc, #436]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 8002254:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002256:	4b6c      	ldr	r3, [pc, #432]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 8002258:	496c      	ldr	r1, [pc, #432]	; (800240c <HAL_RCC_OscConfig+0x670>)
 800225a:	400a      	ands	r2, r1
 800225c:	651a      	str	r2, [r3, #80]	; 0x50
 800225e:	4b6a      	ldr	r3, [pc, #424]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 8002260:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002262:	4b69      	ldr	r3, [pc, #420]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 8002264:	496b      	ldr	r1, [pc, #428]	; (8002414 <HAL_RCC_OscConfig+0x678>)
 8002266:	400a      	ands	r2, r1
 8002268:	651a      	str	r2, [r3, #80]	; 0x50
 800226a:	e020      	b.n	80022ae <HAL_RCC_OscConfig+0x512>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	23a0      	movs	r3, #160	; 0xa0
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	429a      	cmp	r2, r3
 8002276:	d10e      	bne.n	8002296 <HAL_RCC_OscConfig+0x4fa>
 8002278:	4b63      	ldr	r3, [pc, #396]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 800227a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800227c:	4b62      	ldr	r3, [pc, #392]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 800227e:	2180      	movs	r1, #128	; 0x80
 8002280:	00c9      	lsls	r1, r1, #3
 8002282:	430a      	orrs	r2, r1
 8002284:	651a      	str	r2, [r3, #80]	; 0x50
 8002286:	4b60      	ldr	r3, [pc, #384]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 8002288:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800228a:	4b5f      	ldr	r3, [pc, #380]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 800228c:	2180      	movs	r1, #128	; 0x80
 800228e:	0049      	lsls	r1, r1, #1
 8002290:	430a      	orrs	r2, r1
 8002292:	651a      	str	r2, [r3, #80]	; 0x50
 8002294:	e00b      	b.n	80022ae <HAL_RCC_OscConfig+0x512>
 8002296:	4b5c      	ldr	r3, [pc, #368]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 8002298:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800229a:	4b5b      	ldr	r3, [pc, #364]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 800229c:	495b      	ldr	r1, [pc, #364]	; (800240c <HAL_RCC_OscConfig+0x670>)
 800229e:	400a      	ands	r2, r1
 80022a0:	651a      	str	r2, [r3, #80]	; 0x50
 80022a2:	4b59      	ldr	r3, [pc, #356]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 80022a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022a6:	4b58      	ldr	r3, [pc, #352]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 80022a8:	495a      	ldr	r1, [pc, #360]	; (8002414 <HAL_RCC_OscConfig+0x678>)
 80022aa:	400a      	ands	r2, r1
 80022ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d015      	beq.n	80022e2 <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b6:	f7fe fd27 	bl	8000d08 <HAL_GetTick>
 80022ba:	0003      	movs	r3, r0
 80022bc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022be:	e009      	b.n	80022d4 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c0:	f7fe fd22 	bl	8000d08 <HAL_GetTick>
 80022c4:	0002      	movs	r2, r0
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	4a53      	ldr	r2, [pc, #332]	; (8002418 <HAL_RCC_OscConfig+0x67c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e0c7      	b.n	8002464 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022d4:	4b4c      	ldr	r3, [pc, #304]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 80022d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4013      	ands	r3, r2
 80022de:	d0ef      	beq.n	80022c0 <HAL_RCC_OscConfig+0x524>
 80022e0:	e014      	b.n	800230c <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e2:	f7fe fd11 	bl	8000d08 <HAL_GetTick>
 80022e6:	0003      	movs	r3, r0
 80022e8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022ea:	e009      	b.n	8002300 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022ec:	f7fe fd0c 	bl	8000d08 <HAL_GetTick>
 80022f0:	0002      	movs	r2, r0
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	4a48      	ldr	r2, [pc, #288]	; (8002418 <HAL_RCC_OscConfig+0x67c>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e0b1      	b.n	8002464 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002300:	4b41      	ldr	r3, [pc, #260]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 8002302:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4013      	ands	r3, r2
 800230a:	d1ef      	bne.n	80022ec <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800230c:	2327      	movs	r3, #39	; 0x27
 800230e:	18fb      	adds	r3, r7, r3
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d105      	bne.n	8002322 <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002316:	4b3c      	ldr	r3, [pc, #240]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 8002318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800231a:	4b3b      	ldr	r3, [pc, #236]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 800231c:	493f      	ldr	r1, [pc, #252]	; (800241c <HAL_RCC_OscConfig+0x680>)
 800231e:	400a      	ands	r2, r1
 8002320:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	2b00      	cmp	r3, #0
 8002328:	d100      	bne.n	800232c <HAL_RCC_OscConfig+0x590>
 800232a:	e09a      	b.n	8002462 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	2b0c      	cmp	r3, #12
 8002330:	d064      	beq.n	80023fc <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	2b02      	cmp	r3, #2
 8002338:	d145      	bne.n	80023c6 <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233a:	4b33      	ldr	r3, [pc, #204]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	4b32      	ldr	r3, [pc, #200]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 8002340:	4937      	ldr	r1, [pc, #220]	; (8002420 <HAL_RCC_OscConfig+0x684>)
 8002342:	400a      	ands	r2, r1
 8002344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002346:	f7fe fcdf 	bl	8000d08 <HAL_GetTick>
 800234a:	0003      	movs	r3, r0
 800234c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002350:	f7fe fcda 	bl	8000d08 <HAL_GetTick>
 8002354:	0002      	movs	r2, r0
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e080      	b.n	8002464 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002362:	4b29      	ldr	r3, [pc, #164]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	2380      	movs	r3, #128	; 0x80
 8002368:	049b      	lsls	r3, r3, #18
 800236a:	4013      	ands	r3, r2
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800236e:	4b26      	ldr	r3, [pc, #152]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	4a2c      	ldr	r2, [pc, #176]	; (8002424 <HAL_RCC_OscConfig+0x688>)
 8002374:	4013      	ands	r3, r2
 8002376:	0019      	movs	r1, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002380:	431a      	orrs	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	431a      	orrs	r2, r3
 8002388:	4b1f      	ldr	r3, [pc, #124]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 800238a:	430a      	orrs	r2, r1
 800238c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800238e:	4b1e      	ldr	r3, [pc, #120]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	4b1d      	ldr	r3, [pc, #116]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 8002394:	2180      	movs	r1, #128	; 0x80
 8002396:	0449      	lsls	r1, r1, #17
 8002398:	430a      	orrs	r2, r1
 800239a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7fe fcb4 	bl	8000d08 <HAL_GetTick>
 80023a0:	0003      	movs	r3, r0
 80023a2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a6:	f7fe fcaf 	bl	8000d08 <HAL_GetTick>
 80023aa:	0002      	movs	r2, r0
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e055      	b.n	8002464 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80023b8:	4b13      	ldr	r3, [pc, #76]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	2380      	movs	r3, #128	; 0x80
 80023be:	049b      	lsls	r3, r3, #18
 80023c0:	4013      	ands	r3, r2
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0x60a>
 80023c4:	e04d      	b.n	8002462 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c6:	4b10      	ldr	r3, [pc, #64]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 80023cc:	4914      	ldr	r1, [pc, #80]	; (8002420 <HAL_RCC_OscConfig+0x684>)
 80023ce:	400a      	ands	r2, r1
 80023d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d2:	f7fe fc99 	bl	8000d08 <HAL_GetTick>
 80023d6:	0003      	movs	r3, r0
 80023d8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023dc:	f7fe fc94 	bl	8000d08 <HAL_GetTick>
 80023e0:	0002      	movs	r2, r0
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e03a      	b.n	8002464 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_RCC_OscConfig+0x66c>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	2380      	movs	r3, #128	; 0x80
 80023f4:	049b      	lsls	r3, r3, #18
 80023f6:	4013      	ands	r3, r2
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x640>
 80023fa:	e032      	b.n	8002462 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	2b01      	cmp	r3, #1
 8002402:	d111      	bne.n	8002428 <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e02d      	b.n	8002464 <HAL_RCC_OscConfig+0x6c8>
 8002408:	40021000 	.word	0x40021000
 800240c:	fffffeff 	.word	0xfffffeff
 8002410:	40007000 	.word	0x40007000
 8002414:	fffffbff 	.word	0xfffffbff
 8002418:	00001388 	.word	0x00001388
 800241c:	efffffff 	.word	0xefffffff
 8002420:	feffffff 	.word	0xfeffffff
 8002424:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002428:	4b10      	ldr	r3, [pc, #64]	; (800246c <HAL_RCC_OscConfig+0x6d0>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800242e:	69fa      	ldr	r2, [r7, #28]
 8002430:	2380      	movs	r3, #128	; 0x80
 8002432:	025b      	lsls	r3, r3, #9
 8002434:	401a      	ands	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243a:	429a      	cmp	r2, r3
 800243c:	d10f      	bne.n	800245e <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800243e:	69fa      	ldr	r2, [r7, #28]
 8002440:	23f0      	movs	r3, #240	; 0xf0
 8002442:	039b      	lsls	r3, r3, #14
 8002444:	401a      	ands	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244a:	429a      	cmp	r2, r3
 800244c:	d107      	bne.n	800245e <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800244e:	69fa      	ldr	r2, [r7, #28]
 8002450:	23c0      	movs	r3, #192	; 0xc0
 8002452:	041b      	lsls	r3, r3, #16
 8002454:	401a      	ands	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800245a:	429a      	cmp	r2, r3
 800245c:	d001      	beq.n	8002462 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	0018      	movs	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	b00a      	add	sp, #40	; 0x28
 800246a:	bdb0      	pop	{r4, r5, r7, pc}
 800246c:	40021000 	.word	0x40021000

08002470 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002470:	b5b0      	push	{r4, r5, r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e128      	b.n	80026d6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002484:	4b96      	ldr	r3, [pc, #600]	; (80026e0 <HAL_RCC_ClockConfig+0x270>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2201      	movs	r2, #1
 800248a:	4013      	ands	r3, r2
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d91e      	bls.n	80024d0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002492:	4b93      	ldr	r3, [pc, #588]	; (80026e0 <HAL_RCC_ClockConfig+0x270>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2201      	movs	r2, #1
 8002498:	4393      	bics	r3, r2
 800249a:	0019      	movs	r1, r3
 800249c:	4b90      	ldr	r3, [pc, #576]	; (80026e0 <HAL_RCC_ClockConfig+0x270>)
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	430a      	orrs	r2, r1
 80024a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024a4:	f7fe fc30 	bl	8000d08 <HAL_GetTick>
 80024a8:	0003      	movs	r3, r0
 80024aa:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ac:	e009      	b.n	80024c2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ae:	f7fe fc2b 	bl	8000d08 <HAL_GetTick>
 80024b2:	0002      	movs	r2, r0
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	4a8a      	ldr	r2, [pc, #552]	; (80026e4 <HAL_RCC_ClockConfig+0x274>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e109      	b.n	80026d6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c2:	4b87      	ldr	r3, [pc, #540]	; (80026e0 <HAL_RCC_ClockConfig+0x270>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2201      	movs	r2, #1
 80024c8:	4013      	ands	r3, r2
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d1ee      	bne.n	80024ae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2202      	movs	r2, #2
 80024d6:	4013      	ands	r3, r2
 80024d8:	d009      	beq.n	80024ee <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024da:	4b83      	ldr	r3, [pc, #524]	; (80026e8 <HAL_RCC_ClockConfig+0x278>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	22f0      	movs	r2, #240	; 0xf0
 80024e0:	4393      	bics	r3, r2
 80024e2:	0019      	movs	r1, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	4b7f      	ldr	r3, [pc, #508]	; (80026e8 <HAL_RCC_ClockConfig+0x278>)
 80024ea:	430a      	orrs	r2, r1
 80024ec:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2201      	movs	r2, #1
 80024f4:	4013      	ands	r3, r2
 80024f6:	d100      	bne.n	80024fa <HAL_RCC_ClockConfig+0x8a>
 80024f8:	e089      	b.n	800260e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d107      	bne.n	8002512 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002502:	4b79      	ldr	r3, [pc, #484]	; (80026e8 <HAL_RCC_ClockConfig+0x278>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	2380      	movs	r3, #128	; 0x80
 8002508:	029b      	lsls	r3, r3, #10
 800250a:	4013      	ands	r3, r2
 800250c:	d120      	bne.n	8002550 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e0e1      	b.n	80026d6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b03      	cmp	r3, #3
 8002518:	d107      	bne.n	800252a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800251a:	4b73      	ldr	r3, [pc, #460]	; (80026e8 <HAL_RCC_ClockConfig+0x278>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	049b      	lsls	r3, r3, #18
 8002522:	4013      	ands	r3, r2
 8002524:	d114      	bne.n	8002550 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e0d5      	b.n	80026d6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d106      	bne.n	8002540 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002532:	4b6d      	ldr	r3, [pc, #436]	; (80026e8 <HAL_RCC_ClockConfig+0x278>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2204      	movs	r2, #4
 8002538:	4013      	ands	r3, r2
 800253a:	d109      	bne.n	8002550 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0ca      	b.n	80026d6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002540:	4b69      	ldr	r3, [pc, #420]	; (80026e8 <HAL_RCC_ClockConfig+0x278>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	2380      	movs	r3, #128	; 0x80
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4013      	ands	r3, r2
 800254a:	d101      	bne.n	8002550 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e0c2      	b.n	80026d6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002550:	4b65      	ldr	r3, [pc, #404]	; (80026e8 <HAL_RCC_ClockConfig+0x278>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	2203      	movs	r2, #3
 8002556:	4393      	bics	r3, r2
 8002558:	0019      	movs	r1, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	4b62      	ldr	r3, [pc, #392]	; (80026e8 <HAL_RCC_ClockConfig+0x278>)
 8002560:	430a      	orrs	r2, r1
 8002562:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002564:	f7fe fbd0 	bl	8000d08 <HAL_GetTick>
 8002568:	0003      	movs	r3, r0
 800256a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b02      	cmp	r3, #2
 8002572:	d111      	bne.n	8002598 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002574:	e009      	b.n	800258a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002576:	f7fe fbc7 	bl	8000d08 <HAL_GetTick>
 800257a:	0002      	movs	r2, r0
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	4a58      	ldr	r2, [pc, #352]	; (80026e4 <HAL_RCC_ClockConfig+0x274>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d901      	bls.n	800258a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e0a5      	b.n	80026d6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800258a:	4b57      	ldr	r3, [pc, #348]	; (80026e8 <HAL_RCC_ClockConfig+0x278>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	220c      	movs	r2, #12
 8002590:	4013      	ands	r3, r2
 8002592:	2b08      	cmp	r3, #8
 8002594:	d1ef      	bne.n	8002576 <HAL_RCC_ClockConfig+0x106>
 8002596:	e03a      	b.n	800260e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b03      	cmp	r3, #3
 800259e:	d111      	bne.n	80025c4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025a0:	e009      	b.n	80025b6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a2:	f7fe fbb1 	bl	8000d08 <HAL_GetTick>
 80025a6:	0002      	movs	r2, r0
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	4a4d      	ldr	r2, [pc, #308]	; (80026e4 <HAL_RCC_ClockConfig+0x274>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e08f      	b.n	80026d6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025b6:	4b4c      	ldr	r3, [pc, #304]	; (80026e8 <HAL_RCC_ClockConfig+0x278>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	220c      	movs	r2, #12
 80025bc:	4013      	ands	r3, r2
 80025be:	2b0c      	cmp	r3, #12
 80025c0:	d1ef      	bne.n	80025a2 <HAL_RCC_ClockConfig+0x132>
 80025c2:	e024      	b.n	800260e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d11b      	bne.n	8002604 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80025cc:	e009      	b.n	80025e2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ce:	f7fe fb9b 	bl	8000d08 <HAL_GetTick>
 80025d2:	0002      	movs	r2, r0
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	4a42      	ldr	r2, [pc, #264]	; (80026e4 <HAL_RCC_ClockConfig+0x274>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e079      	b.n	80026d6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80025e2:	4b41      	ldr	r3, [pc, #260]	; (80026e8 <HAL_RCC_ClockConfig+0x278>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	220c      	movs	r2, #12
 80025e8:	4013      	ands	r3, r2
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d1ef      	bne.n	80025ce <HAL_RCC_ClockConfig+0x15e>
 80025ee:	e00e      	b.n	800260e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f0:	f7fe fb8a 	bl	8000d08 <HAL_GetTick>
 80025f4:	0002      	movs	r2, r0
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	4a3a      	ldr	r2, [pc, #232]	; (80026e4 <HAL_RCC_ClockConfig+0x274>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e068      	b.n	80026d6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002604:	4b38      	ldr	r3, [pc, #224]	; (80026e8 <HAL_RCC_ClockConfig+0x278>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	220c      	movs	r2, #12
 800260a:	4013      	ands	r3, r2
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800260e:	4b34      	ldr	r3, [pc, #208]	; (80026e0 <HAL_RCC_ClockConfig+0x270>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2201      	movs	r2, #1
 8002614:	4013      	ands	r3, r2
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	429a      	cmp	r2, r3
 800261a:	d21e      	bcs.n	800265a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261c:	4b30      	ldr	r3, [pc, #192]	; (80026e0 <HAL_RCC_ClockConfig+0x270>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2201      	movs	r2, #1
 8002622:	4393      	bics	r3, r2
 8002624:	0019      	movs	r1, r3
 8002626:	4b2e      	ldr	r3, [pc, #184]	; (80026e0 <HAL_RCC_ClockConfig+0x270>)
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800262e:	f7fe fb6b 	bl	8000d08 <HAL_GetTick>
 8002632:	0003      	movs	r3, r0
 8002634:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002636:	e009      	b.n	800264c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002638:	f7fe fb66 	bl	8000d08 <HAL_GetTick>
 800263c:	0002      	movs	r2, r0
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	4a28      	ldr	r2, [pc, #160]	; (80026e4 <HAL_RCC_ClockConfig+0x274>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d901      	bls.n	800264c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e044      	b.n	80026d6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264c:	4b24      	ldr	r3, [pc, #144]	; (80026e0 <HAL_RCC_ClockConfig+0x270>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2201      	movs	r2, #1
 8002652:	4013      	ands	r3, r2
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d1ee      	bne.n	8002638 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2204      	movs	r2, #4
 8002660:	4013      	ands	r3, r2
 8002662:	d009      	beq.n	8002678 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002664:	4b20      	ldr	r3, [pc, #128]	; (80026e8 <HAL_RCC_ClockConfig+0x278>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	4a20      	ldr	r2, [pc, #128]	; (80026ec <HAL_RCC_ClockConfig+0x27c>)
 800266a:	4013      	ands	r3, r2
 800266c:	0019      	movs	r1, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <HAL_RCC_ClockConfig+0x278>)
 8002674:	430a      	orrs	r2, r1
 8002676:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2208      	movs	r2, #8
 800267e:	4013      	ands	r3, r2
 8002680:	d00a      	beq.n	8002698 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002682:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <HAL_RCC_ClockConfig+0x278>)
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	4a1a      	ldr	r2, [pc, #104]	; (80026f0 <HAL_RCC_ClockConfig+0x280>)
 8002688:	4013      	ands	r3, r2
 800268a:	0019      	movs	r1, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	00da      	lsls	r2, r3, #3
 8002692:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <HAL_RCC_ClockConfig+0x278>)
 8002694:	430a      	orrs	r2, r1
 8002696:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002698:	f000 f832 	bl	8002700 <HAL_RCC_GetSysClockFreq>
 800269c:	0001      	movs	r1, r0
 800269e:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <HAL_RCC_ClockConfig+0x278>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	091b      	lsrs	r3, r3, #4
 80026a4:	220f      	movs	r2, #15
 80026a6:	4013      	ands	r3, r2
 80026a8:	4a12      	ldr	r2, [pc, #72]	; (80026f4 <HAL_RCC_ClockConfig+0x284>)
 80026aa:	5cd3      	ldrb	r3, [r2, r3]
 80026ac:	000a      	movs	r2, r1
 80026ae:	40da      	lsrs	r2, r3
 80026b0:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <HAL_RCC_ClockConfig+0x288>)
 80026b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026b4:	4b11      	ldr	r3, [pc, #68]	; (80026fc <HAL_RCC_ClockConfig+0x28c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	250b      	movs	r5, #11
 80026ba:	197c      	adds	r4, r7, r5
 80026bc:	0018      	movs	r0, r3
 80026be:	f7fe fadd 	bl	8000c7c <HAL_InitTick>
 80026c2:	0003      	movs	r3, r0
 80026c4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80026c6:	197b      	adds	r3, r7, r5
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d002      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80026ce:	197b      	adds	r3, r7, r5
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	e000      	b.n	80026d6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	0018      	movs	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	b004      	add	sp, #16
 80026dc:	bdb0      	pop	{r4, r5, r7, pc}
 80026de:	46c0      	nop			; (mov r8, r8)
 80026e0:	40022000 	.word	0x40022000
 80026e4:	00001388 	.word	0x00001388
 80026e8:	40021000 	.word	0x40021000
 80026ec:	fffff8ff 	.word	0xfffff8ff
 80026f0:	ffffc7ff 	.word	0xffffc7ff
 80026f4:	08003d6c 	.word	0x08003d6c
 80026f8:	20000000 	.word	0x20000000
 80026fc:	20000004 	.word	0x20000004

08002700 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002700:	b5b0      	push	{r4, r5, r7, lr}
 8002702:	b08e      	sub	sp, #56	; 0x38
 8002704:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002706:	4b4c      	ldr	r3, [pc, #304]	; (8002838 <HAL_RCC_GetSysClockFreq+0x138>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800270c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800270e:	230c      	movs	r3, #12
 8002710:	4013      	ands	r3, r2
 8002712:	2b0c      	cmp	r3, #12
 8002714:	d014      	beq.n	8002740 <HAL_RCC_GetSysClockFreq+0x40>
 8002716:	d900      	bls.n	800271a <HAL_RCC_GetSysClockFreq+0x1a>
 8002718:	e07b      	b.n	8002812 <HAL_RCC_GetSysClockFreq+0x112>
 800271a:	2b04      	cmp	r3, #4
 800271c:	d002      	beq.n	8002724 <HAL_RCC_GetSysClockFreq+0x24>
 800271e:	2b08      	cmp	r3, #8
 8002720:	d00b      	beq.n	800273a <HAL_RCC_GetSysClockFreq+0x3a>
 8002722:	e076      	b.n	8002812 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002724:	4b44      	ldr	r3, [pc, #272]	; (8002838 <HAL_RCC_GetSysClockFreq+0x138>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2210      	movs	r2, #16
 800272a:	4013      	ands	r3, r2
 800272c:	d002      	beq.n	8002734 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800272e:	4b43      	ldr	r3, [pc, #268]	; (800283c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002730:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002732:	e07c      	b.n	800282e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002734:	4b42      	ldr	r3, [pc, #264]	; (8002840 <HAL_RCC_GetSysClockFreq+0x140>)
 8002736:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002738:	e079      	b.n	800282e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800273a:	4b42      	ldr	r3, [pc, #264]	; (8002844 <HAL_RCC_GetSysClockFreq+0x144>)
 800273c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800273e:	e076      	b.n	800282e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002742:	0c9a      	lsrs	r2, r3, #18
 8002744:	230f      	movs	r3, #15
 8002746:	401a      	ands	r2, r3
 8002748:	4b3f      	ldr	r3, [pc, #252]	; (8002848 <HAL_RCC_GetSysClockFreq+0x148>)
 800274a:	5c9b      	ldrb	r3, [r3, r2]
 800274c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800274e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002750:	0d9a      	lsrs	r2, r3, #22
 8002752:	2303      	movs	r3, #3
 8002754:	4013      	ands	r3, r2
 8002756:	3301      	adds	r3, #1
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800275a:	4b37      	ldr	r3, [pc, #220]	; (8002838 <HAL_RCC_GetSysClockFreq+0x138>)
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	025b      	lsls	r3, r3, #9
 8002762:	4013      	ands	r3, r2
 8002764:	d01a      	beq.n	800279c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002768:	61bb      	str	r3, [r7, #24]
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
 800276e:	4a35      	ldr	r2, [pc, #212]	; (8002844 <HAL_RCC_GetSysClockFreq+0x144>)
 8002770:	2300      	movs	r3, #0
 8002772:	69b8      	ldr	r0, [r7, #24]
 8002774:	69f9      	ldr	r1, [r7, #28]
 8002776:	f7fd fd7d 	bl	8000274 <__aeabi_lmul>
 800277a:	0002      	movs	r2, r0
 800277c:	000b      	movs	r3, r1
 800277e:	0010      	movs	r0, r2
 8002780:	0019      	movs	r1, r3
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f7fd fd51 	bl	8000234 <__aeabi_uldivmod>
 8002792:	0002      	movs	r2, r0
 8002794:	000b      	movs	r3, r1
 8002796:	0013      	movs	r3, r2
 8002798:	637b      	str	r3, [r7, #52]	; 0x34
 800279a:	e037      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800279c:	4b26      	ldr	r3, [pc, #152]	; (8002838 <HAL_RCC_GetSysClockFreq+0x138>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2210      	movs	r2, #16
 80027a2:	4013      	ands	r3, r2
 80027a4:	d01a      	beq.n	80027dc <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80027a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	4a23      	ldr	r2, [pc, #140]	; (800283c <HAL_RCC_GetSysClockFreq+0x13c>)
 80027b0:	2300      	movs	r3, #0
 80027b2:	68b8      	ldr	r0, [r7, #8]
 80027b4:	68f9      	ldr	r1, [r7, #12]
 80027b6:	f7fd fd5d 	bl	8000274 <__aeabi_lmul>
 80027ba:	0002      	movs	r2, r0
 80027bc:	000b      	movs	r3, r1
 80027be:	0010      	movs	r0, r2
 80027c0:	0019      	movs	r1, r3
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	603b      	str	r3, [r7, #0]
 80027c6:	2300      	movs	r3, #0
 80027c8:	607b      	str	r3, [r7, #4]
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f7fd fd31 	bl	8000234 <__aeabi_uldivmod>
 80027d2:	0002      	movs	r2, r0
 80027d4:	000b      	movs	r3, r1
 80027d6:	0013      	movs	r3, r2
 80027d8:	637b      	str	r3, [r7, #52]	; 0x34
 80027da:	e017      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80027dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027de:	0018      	movs	r0, r3
 80027e0:	2300      	movs	r3, #0
 80027e2:	0019      	movs	r1, r3
 80027e4:	4a16      	ldr	r2, [pc, #88]	; (8002840 <HAL_RCC_GetSysClockFreq+0x140>)
 80027e6:	2300      	movs	r3, #0
 80027e8:	f7fd fd44 	bl	8000274 <__aeabi_lmul>
 80027ec:	0002      	movs	r2, r0
 80027ee:	000b      	movs	r3, r1
 80027f0:	0010      	movs	r0, r2
 80027f2:	0019      	movs	r1, r3
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	001c      	movs	r4, r3
 80027f8:	2300      	movs	r3, #0
 80027fa:	001d      	movs	r5, r3
 80027fc:	0022      	movs	r2, r4
 80027fe:	002b      	movs	r3, r5
 8002800:	f7fd fd18 	bl	8000234 <__aeabi_uldivmod>
 8002804:	0002      	movs	r2, r0
 8002806:	000b      	movs	r3, r1
 8002808:	0013      	movs	r3, r2
 800280a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800280c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002810:	e00d      	b.n	800282e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002812:	4b09      	ldr	r3, [pc, #36]	; (8002838 <HAL_RCC_GetSysClockFreq+0x138>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	0b5b      	lsrs	r3, r3, #13
 8002818:	2207      	movs	r2, #7
 800281a:	4013      	ands	r3, r2
 800281c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	3301      	adds	r3, #1
 8002822:	2280      	movs	r2, #128	; 0x80
 8002824:	0212      	lsls	r2, r2, #8
 8002826:	409a      	lsls	r2, r3
 8002828:	0013      	movs	r3, r2
 800282a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800282c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800282e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002830:	0018      	movs	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	b00e      	add	sp, #56	; 0x38
 8002836:	bdb0      	pop	{r4, r5, r7, pc}
 8002838:	40021000 	.word	0x40021000
 800283c:	003d0900 	.word	0x003d0900
 8002840:	00f42400 	.word	0x00f42400
 8002844:	007a1200 	.word	0x007a1200
 8002848:	08003d84 	.word	0x08003d84

0800284c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002850:	4b02      	ldr	r3, [pc, #8]	; (800285c <HAL_RCC_GetHCLKFreq+0x10>)
 8002852:	681b      	ldr	r3, [r3, #0]
}
 8002854:	0018      	movs	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	20000000 	.word	0x20000000

08002860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002864:	f7ff fff2 	bl	800284c <HAL_RCC_GetHCLKFreq>
 8002868:	0001      	movs	r1, r0
 800286a:	4b06      	ldr	r3, [pc, #24]	; (8002884 <HAL_RCC_GetPCLK1Freq+0x24>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	0a1b      	lsrs	r3, r3, #8
 8002870:	2207      	movs	r2, #7
 8002872:	4013      	ands	r3, r2
 8002874:	4a04      	ldr	r2, [pc, #16]	; (8002888 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002876:	5cd3      	ldrb	r3, [r2, r3]
 8002878:	40d9      	lsrs	r1, r3
 800287a:	000b      	movs	r3, r1
}
 800287c:	0018      	movs	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	40021000 	.word	0x40021000
 8002888:	08003d7c 	.word	0x08003d7c

0800288c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002890:	f7ff ffdc 	bl	800284c <HAL_RCC_GetHCLKFreq>
 8002894:	0001      	movs	r1, r0
 8002896:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	0adb      	lsrs	r3, r3, #11
 800289c:	2207      	movs	r2, #7
 800289e:	4013      	ands	r3, r2
 80028a0:	4a04      	ldr	r2, [pc, #16]	; (80028b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028a2:	5cd3      	ldrb	r3, [r2, r3]
 80028a4:	40d9      	lsrs	r1, r3
 80028a6:	000b      	movs	r3, r1
}
 80028a8:	0018      	movs	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	46c0      	nop			; (mov r8, r8)
 80028b0:	40021000 	.word	0x40021000
 80028b4:	08003d7c 	.word	0x08003d7c

080028b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e044      	b.n	8002954 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d107      	bne.n	80028e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2278      	movs	r2, #120	; 0x78
 80028d6:	2100      	movs	r1, #0
 80028d8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	0018      	movs	r0, r3
 80028de:	f7fe f8eb 	bl	8000ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2224      	movs	r2, #36	; 0x24
 80028e6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2101      	movs	r1, #1
 80028f4:	438a      	bics	r2, r1
 80028f6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	0018      	movs	r0, r3
 80028fc:	f000 f8d0 	bl	8002aa0 <UART_SetConfig>
 8002900:	0003      	movs	r3, r0
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e024      	b.n	8002954 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	0018      	movs	r0, r3
 8002916:	f000 fb63 	bl	8002fe0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	490d      	ldr	r1, [pc, #52]	; (800295c <HAL_UART_Init+0xa4>)
 8002926:	400a      	ands	r2, r1
 8002928:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	212a      	movs	r1, #42	; 0x2a
 8002936:	438a      	bics	r2, r1
 8002938:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2101      	movs	r1, #1
 8002946:	430a      	orrs	r2, r1
 8002948:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	0018      	movs	r0, r3
 800294e:	f000 fbfb 	bl	8003148 <UART_CheckIdleState>
 8002952:	0003      	movs	r3, r0
}
 8002954:	0018      	movs	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	b002      	add	sp, #8
 800295a:	bd80      	pop	{r7, pc}
 800295c:	ffffb7ff 	.word	0xffffb7ff

08002960 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b08a      	sub	sp, #40	; 0x28
 8002964:	af02      	add	r7, sp, #8
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	603b      	str	r3, [r7, #0]
 800296c:	1dbb      	adds	r3, r7, #6
 800296e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002974:	2b20      	cmp	r3, #32
 8002976:	d000      	beq.n	800297a <HAL_UART_Transmit+0x1a>
 8002978:	e08c      	b.n	8002a94 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <HAL_UART_Transmit+0x28>
 8002980:	1dbb      	adds	r3, r7, #6
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e084      	b.n	8002a96 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	2380      	movs	r3, #128	; 0x80
 8002992:	015b      	lsls	r3, r3, #5
 8002994:	429a      	cmp	r2, r3
 8002996:	d109      	bne.n	80029ac <HAL_UART_Transmit+0x4c>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d105      	bne.n	80029ac <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2201      	movs	r2, #1
 80029a4:	4013      	ands	r3, r2
 80029a6:	d001      	beq.n	80029ac <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e074      	b.n	8002a96 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2284      	movs	r2, #132	; 0x84
 80029b0:	2100      	movs	r1, #0
 80029b2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2221      	movs	r2, #33	; 0x21
 80029b8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029ba:	f7fe f9a5 	bl	8000d08 <HAL_GetTick>
 80029be:	0003      	movs	r3, r0
 80029c0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1dba      	adds	r2, r7, #6
 80029c6:	2150      	movs	r1, #80	; 0x50
 80029c8:	8812      	ldrh	r2, [r2, #0]
 80029ca:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	1dba      	adds	r2, r7, #6
 80029d0:	2152      	movs	r1, #82	; 0x52
 80029d2:	8812      	ldrh	r2, [r2, #0]
 80029d4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	2380      	movs	r3, #128	; 0x80
 80029dc:	015b      	lsls	r3, r3, #5
 80029de:	429a      	cmp	r2, r3
 80029e0:	d108      	bne.n	80029f4 <HAL_UART_Transmit+0x94>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d104      	bne.n	80029f4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	61bb      	str	r3, [r7, #24]
 80029f2:	e003      	b.n	80029fc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029fc:	e02f      	b.n	8002a5e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	0013      	movs	r3, r2
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2180      	movs	r1, #128	; 0x80
 8002a0c:	f000 fc44 	bl	8003298 <UART_WaitOnFlagUntilTimeout>
 8002a10:	1e03      	subs	r3, r0, #0
 8002a12:	d004      	beq.n	8002a1e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2220      	movs	r2, #32
 8002a18:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e03b      	b.n	8002a96 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10b      	bne.n	8002a3c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	001a      	movs	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	05d2      	lsls	r2, r2, #23
 8002a30:	0dd2      	lsrs	r2, r2, #23
 8002a32:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	3302      	adds	r3, #2
 8002a38:	61bb      	str	r3, [r7, #24]
 8002a3a:	e007      	b.n	8002a4c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	781a      	ldrb	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2252      	movs	r2, #82	; 0x52
 8002a50:	5a9b      	ldrh	r3, [r3, r2]
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b299      	uxth	r1, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2252      	movs	r2, #82	; 0x52
 8002a5c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2252      	movs	r2, #82	; 0x52
 8002a62:	5a9b      	ldrh	r3, [r3, r2]
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1c9      	bne.n	80029fe <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	0013      	movs	r3, r2
 8002a74:	2200      	movs	r2, #0
 8002a76:	2140      	movs	r1, #64	; 0x40
 8002a78:	f000 fc0e 	bl	8003298 <UART_WaitOnFlagUntilTimeout>
 8002a7c:	1e03      	subs	r3, r0, #0
 8002a7e:	d004      	beq.n	8002a8a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2220      	movs	r2, #32
 8002a84:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e005      	b.n	8002a96 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	e000      	b.n	8002a96 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002a94:	2302      	movs	r3, #2
  }
}
 8002a96:	0018      	movs	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	b008      	add	sp, #32
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002aa0:	b5b0      	push	{r4, r5, r7, lr}
 8002aa2:	b08e      	sub	sp, #56	; 0x38
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002aa8:	231a      	movs	r3, #26
 8002aaa:	2218      	movs	r2, #24
 8002aac:	4694      	mov	ip, r2
 8002aae:	44bc      	add	ip, r7
 8002ab0:	4463      	add	r3, ip
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4ac1      	ldr	r2, [pc, #772]	; (8002ddc <UART_SetConfig+0x33c>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	0019      	movs	r1, r3
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	4abd      	ldr	r2, [pc, #756]	; (8002de0 <UART_SetConfig+0x340>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	0019      	movs	r1, r3
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4ab7      	ldr	r2, [pc, #732]	; (8002de4 <UART_SetConfig+0x344>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d004      	beq.n	8002b16 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b12:	4313      	orrs	r3, r2
 8002b14:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	4ab2      	ldr	r2, [pc, #712]	; (8002de8 <UART_SetConfig+0x348>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	0019      	movs	r1, r3
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4aae      	ldr	r2, [pc, #696]	; (8002dec <UART_SetConfig+0x34c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d136      	bne.n	8002ba4 <UART_SetConfig+0x104>
 8002b36:	4bae      	ldr	r3, [pc, #696]	; (8002df0 <UART_SetConfig+0x350>)
 8002b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d020      	beq.n	8002b84 <UART_SetConfig+0xe4>
 8002b42:	d827      	bhi.n	8002b94 <UART_SetConfig+0xf4>
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d00d      	beq.n	8002b64 <UART_SetConfig+0xc4>
 8002b48:	d824      	bhi.n	8002b94 <UART_SetConfig+0xf4>
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <UART_SetConfig+0xb4>
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d010      	beq.n	8002b74 <UART_SetConfig+0xd4>
 8002b52:	e01f      	b.n	8002b94 <UART_SetConfig+0xf4>
 8002b54:	231b      	movs	r3, #27
 8002b56:	2218      	movs	r2, #24
 8002b58:	4694      	mov	ip, r2
 8002b5a:	44bc      	add	ip, r7
 8002b5c:	4463      	add	r3, ip
 8002b5e:	2201      	movs	r2, #1
 8002b60:	701a      	strb	r2, [r3, #0]
 8002b62:	e0ab      	b.n	8002cbc <UART_SetConfig+0x21c>
 8002b64:	231b      	movs	r3, #27
 8002b66:	2218      	movs	r2, #24
 8002b68:	4694      	mov	ip, r2
 8002b6a:	44bc      	add	ip, r7
 8002b6c:	4463      	add	r3, ip
 8002b6e:	2202      	movs	r2, #2
 8002b70:	701a      	strb	r2, [r3, #0]
 8002b72:	e0a3      	b.n	8002cbc <UART_SetConfig+0x21c>
 8002b74:	231b      	movs	r3, #27
 8002b76:	2218      	movs	r2, #24
 8002b78:	4694      	mov	ip, r2
 8002b7a:	44bc      	add	ip, r7
 8002b7c:	4463      	add	r3, ip
 8002b7e:	2204      	movs	r2, #4
 8002b80:	701a      	strb	r2, [r3, #0]
 8002b82:	e09b      	b.n	8002cbc <UART_SetConfig+0x21c>
 8002b84:	231b      	movs	r3, #27
 8002b86:	2218      	movs	r2, #24
 8002b88:	4694      	mov	ip, r2
 8002b8a:	44bc      	add	ip, r7
 8002b8c:	4463      	add	r3, ip
 8002b8e:	2208      	movs	r2, #8
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	e093      	b.n	8002cbc <UART_SetConfig+0x21c>
 8002b94:	231b      	movs	r3, #27
 8002b96:	2218      	movs	r2, #24
 8002b98:	4694      	mov	ip, r2
 8002b9a:	44bc      	add	ip, r7
 8002b9c:	4463      	add	r3, ip
 8002b9e:	2210      	movs	r2, #16
 8002ba0:	701a      	strb	r2, [r3, #0]
 8002ba2:	e08b      	b.n	8002cbc <UART_SetConfig+0x21c>
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a92      	ldr	r2, [pc, #584]	; (8002df4 <UART_SetConfig+0x354>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d136      	bne.n	8002c1c <UART_SetConfig+0x17c>
 8002bae:	4b90      	ldr	r3, [pc, #576]	; (8002df0 <UART_SetConfig+0x350>)
 8002bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb2:	220c      	movs	r2, #12
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	2b0c      	cmp	r3, #12
 8002bb8:	d020      	beq.n	8002bfc <UART_SetConfig+0x15c>
 8002bba:	d827      	bhi.n	8002c0c <UART_SetConfig+0x16c>
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d00d      	beq.n	8002bdc <UART_SetConfig+0x13c>
 8002bc0:	d824      	bhi.n	8002c0c <UART_SetConfig+0x16c>
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d002      	beq.n	8002bcc <UART_SetConfig+0x12c>
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d010      	beq.n	8002bec <UART_SetConfig+0x14c>
 8002bca:	e01f      	b.n	8002c0c <UART_SetConfig+0x16c>
 8002bcc:	231b      	movs	r3, #27
 8002bce:	2218      	movs	r2, #24
 8002bd0:	4694      	mov	ip, r2
 8002bd2:	44bc      	add	ip, r7
 8002bd4:	4463      	add	r3, ip
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	701a      	strb	r2, [r3, #0]
 8002bda:	e06f      	b.n	8002cbc <UART_SetConfig+0x21c>
 8002bdc:	231b      	movs	r3, #27
 8002bde:	2218      	movs	r2, #24
 8002be0:	4694      	mov	ip, r2
 8002be2:	44bc      	add	ip, r7
 8002be4:	4463      	add	r3, ip
 8002be6:	2202      	movs	r2, #2
 8002be8:	701a      	strb	r2, [r3, #0]
 8002bea:	e067      	b.n	8002cbc <UART_SetConfig+0x21c>
 8002bec:	231b      	movs	r3, #27
 8002bee:	2218      	movs	r2, #24
 8002bf0:	4694      	mov	ip, r2
 8002bf2:	44bc      	add	ip, r7
 8002bf4:	4463      	add	r3, ip
 8002bf6:	2204      	movs	r2, #4
 8002bf8:	701a      	strb	r2, [r3, #0]
 8002bfa:	e05f      	b.n	8002cbc <UART_SetConfig+0x21c>
 8002bfc:	231b      	movs	r3, #27
 8002bfe:	2218      	movs	r2, #24
 8002c00:	4694      	mov	ip, r2
 8002c02:	44bc      	add	ip, r7
 8002c04:	4463      	add	r3, ip
 8002c06:	2208      	movs	r2, #8
 8002c08:	701a      	strb	r2, [r3, #0]
 8002c0a:	e057      	b.n	8002cbc <UART_SetConfig+0x21c>
 8002c0c:	231b      	movs	r3, #27
 8002c0e:	2218      	movs	r2, #24
 8002c10:	4694      	mov	ip, r2
 8002c12:	44bc      	add	ip, r7
 8002c14:	4463      	add	r3, ip
 8002c16:	2210      	movs	r2, #16
 8002c18:	701a      	strb	r2, [r3, #0]
 8002c1a:	e04f      	b.n	8002cbc <UART_SetConfig+0x21c>
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a70      	ldr	r2, [pc, #448]	; (8002de4 <UART_SetConfig+0x344>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d143      	bne.n	8002cae <UART_SetConfig+0x20e>
 8002c26:	4b72      	ldr	r3, [pc, #456]	; (8002df0 <UART_SetConfig+0x350>)
 8002c28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c2a:	23c0      	movs	r3, #192	; 0xc0
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	4013      	ands	r3, r2
 8002c30:	22c0      	movs	r2, #192	; 0xc0
 8002c32:	0112      	lsls	r2, r2, #4
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d02a      	beq.n	8002c8e <UART_SetConfig+0x1ee>
 8002c38:	22c0      	movs	r2, #192	; 0xc0
 8002c3a:	0112      	lsls	r2, r2, #4
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d82e      	bhi.n	8002c9e <UART_SetConfig+0x1fe>
 8002c40:	2280      	movs	r2, #128	; 0x80
 8002c42:	0112      	lsls	r2, r2, #4
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d012      	beq.n	8002c6e <UART_SetConfig+0x1ce>
 8002c48:	2280      	movs	r2, #128	; 0x80
 8002c4a:	0112      	lsls	r2, r2, #4
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d826      	bhi.n	8002c9e <UART_SetConfig+0x1fe>
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d004      	beq.n	8002c5e <UART_SetConfig+0x1be>
 8002c54:	2280      	movs	r2, #128	; 0x80
 8002c56:	00d2      	lsls	r2, r2, #3
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d010      	beq.n	8002c7e <UART_SetConfig+0x1de>
 8002c5c:	e01f      	b.n	8002c9e <UART_SetConfig+0x1fe>
 8002c5e:	231b      	movs	r3, #27
 8002c60:	2218      	movs	r2, #24
 8002c62:	4694      	mov	ip, r2
 8002c64:	44bc      	add	ip, r7
 8002c66:	4463      	add	r3, ip
 8002c68:	2200      	movs	r2, #0
 8002c6a:	701a      	strb	r2, [r3, #0]
 8002c6c:	e026      	b.n	8002cbc <UART_SetConfig+0x21c>
 8002c6e:	231b      	movs	r3, #27
 8002c70:	2218      	movs	r2, #24
 8002c72:	4694      	mov	ip, r2
 8002c74:	44bc      	add	ip, r7
 8002c76:	4463      	add	r3, ip
 8002c78:	2202      	movs	r2, #2
 8002c7a:	701a      	strb	r2, [r3, #0]
 8002c7c:	e01e      	b.n	8002cbc <UART_SetConfig+0x21c>
 8002c7e:	231b      	movs	r3, #27
 8002c80:	2218      	movs	r2, #24
 8002c82:	4694      	mov	ip, r2
 8002c84:	44bc      	add	ip, r7
 8002c86:	4463      	add	r3, ip
 8002c88:	2204      	movs	r2, #4
 8002c8a:	701a      	strb	r2, [r3, #0]
 8002c8c:	e016      	b.n	8002cbc <UART_SetConfig+0x21c>
 8002c8e:	231b      	movs	r3, #27
 8002c90:	2218      	movs	r2, #24
 8002c92:	4694      	mov	ip, r2
 8002c94:	44bc      	add	ip, r7
 8002c96:	4463      	add	r3, ip
 8002c98:	2208      	movs	r2, #8
 8002c9a:	701a      	strb	r2, [r3, #0]
 8002c9c:	e00e      	b.n	8002cbc <UART_SetConfig+0x21c>
 8002c9e:	231b      	movs	r3, #27
 8002ca0:	2218      	movs	r2, #24
 8002ca2:	4694      	mov	ip, r2
 8002ca4:	44bc      	add	ip, r7
 8002ca6:	4463      	add	r3, ip
 8002ca8:	2210      	movs	r2, #16
 8002caa:	701a      	strb	r2, [r3, #0]
 8002cac:	e006      	b.n	8002cbc <UART_SetConfig+0x21c>
 8002cae:	231b      	movs	r3, #27
 8002cb0:	2218      	movs	r2, #24
 8002cb2:	4694      	mov	ip, r2
 8002cb4:	44bc      	add	ip, r7
 8002cb6:	4463      	add	r3, ip
 8002cb8:	2210      	movs	r2, #16
 8002cba:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a48      	ldr	r2, [pc, #288]	; (8002de4 <UART_SetConfig+0x344>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d000      	beq.n	8002cc8 <UART_SetConfig+0x228>
 8002cc6:	e09b      	b.n	8002e00 <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002cc8:	231b      	movs	r3, #27
 8002cca:	2218      	movs	r2, #24
 8002ccc:	4694      	mov	ip, r2
 8002cce:	44bc      	add	ip, r7
 8002cd0:	4463      	add	r3, ip
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d01d      	beq.n	8002d14 <UART_SetConfig+0x274>
 8002cd8:	dc20      	bgt.n	8002d1c <UART_SetConfig+0x27c>
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d015      	beq.n	8002d0a <UART_SetConfig+0x26a>
 8002cde:	dc1d      	bgt.n	8002d1c <UART_SetConfig+0x27c>
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <UART_SetConfig+0x24a>
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d005      	beq.n	8002cf4 <UART_SetConfig+0x254>
 8002ce8:	e018      	b.n	8002d1c <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cea:	f7ff fdb9 	bl	8002860 <HAL_RCC_GetPCLK1Freq>
 8002cee:	0003      	movs	r3, r0
 8002cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cf2:	e01d      	b.n	8002d30 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cf4:	4b3e      	ldr	r3, [pc, #248]	; (8002df0 <UART_SetConfig+0x350>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2210      	movs	r2, #16
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d002      	beq.n	8002d04 <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002cfe:	4b3e      	ldr	r3, [pc, #248]	; (8002df8 <UART_SetConfig+0x358>)
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002d02:	e015      	b.n	8002d30 <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 8002d04:	4b3d      	ldr	r3, [pc, #244]	; (8002dfc <UART_SetConfig+0x35c>)
 8002d06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d08:	e012      	b.n	8002d30 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d0a:	f7ff fcf9 	bl	8002700 <HAL_RCC_GetSysClockFreq>
 8002d0e:	0003      	movs	r3, r0
 8002d10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d12:	e00d      	b.n	8002d30 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d14:	2380      	movs	r3, #128	; 0x80
 8002d16:	021b      	lsls	r3, r3, #8
 8002d18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d1a:	e009      	b.n	8002d30 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002d20:	231a      	movs	r3, #26
 8002d22:	2218      	movs	r2, #24
 8002d24:	4694      	mov	ip, r2
 8002d26:	44bc      	add	ip, r7
 8002d28:	4463      	add	r3, ip
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	701a      	strb	r2, [r3, #0]
        break;
 8002d2e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d100      	bne.n	8002d38 <UART_SetConfig+0x298>
 8002d36:	e138      	b.n	8002faa <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	0013      	movs	r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	189b      	adds	r3, r3, r2
 8002d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d305      	bcc.n	8002d54 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d907      	bls.n	8002d64 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8002d54:	231a      	movs	r3, #26
 8002d56:	2218      	movs	r2, #24
 8002d58:	4694      	mov	ip, r2
 8002d5a:	44bc      	add	ip, r7
 8002d5c:	4463      	add	r3, ip
 8002d5e:	2201      	movs	r2, #1
 8002d60:	701a      	strb	r2, [r3, #0]
 8002d62:	e122      	b.n	8002faa <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	6939      	ldr	r1, [r7, #16]
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	000b      	movs	r3, r1
 8002d72:	0e1b      	lsrs	r3, r3, #24
 8002d74:	0010      	movs	r0, r2
 8002d76:	0205      	lsls	r5, r0, #8
 8002d78:	431d      	orrs	r5, r3
 8002d7a:	000b      	movs	r3, r1
 8002d7c:	021c      	lsls	r4, r3, #8
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	085b      	lsrs	r3, r3, #1
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	2300      	movs	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	68b8      	ldr	r0, [r7, #8]
 8002d8c:	68f9      	ldr	r1, [r7, #12]
 8002d8e:	1900      	adds	r0, r0, r4
 8002d90:	4169      	adcs	r1, r5
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	603b      	str	r3, [r7, #0]
 8002d98:	2300      	movs	r3, #0
 8002d9a:	607b      	str	r3, [r7, #4]
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f7fd fa48 	bl	8000234 <__aeabi_uldivmod>
 8002da4:	0002      	movs	r2, r0
 8002da6:	000b      	movs	r3, r1
 8002da8:	0013      	movs	r3, r2
 8002daa:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002dac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dae:	23c0      	movs	r3, #192	; 0xc0
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d309      	bcc.n	8002dca <UART_SetConfig+0x32a>
 8002db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002db8:	2380      	movs	r3, #128	; 0x80
 8002dba:	035b      	lsls	r3, r3, #13
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d204      	bcs.n	8002dca <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dc6:	60da      	str	r2, [r3, #12]
 8002dc8:	e0ef      	b.n	8002faa <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8002dca:	231a      	movs	r3, #26
 8002dcc:	2218      	movs	r2, #24
 8002dce:	4694      	mov	ip, r2
 8002dd0:	44bc      	add	ip, r7
 8002dd2:	4463      	add	r3, ip
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	701a      	strb	r2, [r3, #0]
 8002dd8:	e0e7      	b.n	8002faa <UART_SetConfig+0x50a>
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	efff69f3 	.word	0xefff69f3
 8002de0:	ffffcfff 	.word	0xffffcfff
 8002de4:	40004800 	.word	0x40004800
 8002de8:	fffff4ff 	.word	0xfffff4ff
 8002dec:	40013800 	.word	0x40013800
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40004400 	.word	0x40004400
 8002df8:	003d0900 	.word	0x003d0900
 8002dfc:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	69da      	ldr	r2, [r3, #28]
 8002e04:	2380      	movs	r3, #128	; 0x80
 8002e06:	021b      	lsls	r3, r3, #8
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d000      	beq.n	8002e0e <UART_SetConfig+0x36e>
 8002e0c:	e073      	b.n	8002ef6 <UART_SetConfig+0x456>
  {
    switch (clocksource)
 8002e0e:	231b      	movs	r3, #27
 8002e10:	2218      	movs	r2, #24
 8002e12:	4694      	mov	ip, r2
 8002e14:	44bc      	add	ip, r7
 8002e16:	4463      	add	r3, ip
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d822      	bhi.n	8002e64 <UART_SetConfig+0x3c4>
 8002e1e:	009a      	lsls	r2, r3, #2
 8002e20:	4b6a      	ldr	r3, [pc, #424]	; (8002fcc <UART_SetConfig+0x52c>)
 8002e22:	18d3      	adds	r3, r2, r3
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e28:	f7ff fd1a 	bl	8002860 <HAL_RCC_GetPCLK1Freq>
 8002e2c:	0003      	movs	r3, r0
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e30:	e022      	b.n	8002e78 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e32:	f7ff fd2b 	bl	800288c <HAL_RCC_GetPCLK2Freq>
 8002e36:	0003      	movs	r3, r0
 8002e38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e3a:	e01d      	b.n	8002e78 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e3c:	4b64      	ldr	r3, [pc, #400]	; (8002fd0 <UART_SetConfig+0x530>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2210      	movs	r2, #16
 8002e42:	4013      	ands	r3, r2
 8002e44:	d002      	beq.n	8002e4c <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002e46:	4b63      	ldr	r3, [pc, #396]	; (8002fd4 <UART_SetConfig+0x534>)
 8002e48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002e4a:	e015      	b.n	8002e78 <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 8002e4c:	4b62      	ldr	r3, [pc, #392]	; (8002fd8 <UART_SetConfig+0x538>)
 8002e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e50:	e012      	b.n	8002e78 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e52:	f7ff fc55 	bl	8002700 <HAL_RCC_GetSysClockFreq>
 8002e56:	0003      	movs	r3, r0
 8002e58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e5a:	e00d      	b.n	8002e78 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e5c:	2380      	movs	r3, #128	; 0x80
 8002e5e:	021b      	lsls	r3, r3, #8
 8002e60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e62:	e009      	b.n	8002e78 <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002e68:	231a      	movs	r3, #26
 8002e6a:	2218      	movs	r2, #24
 8002e6c:	4694      	mov	ip, r2
 8002e6e:	44bc      	add	ip, r7
 8002e70:	4463      	add	r3, ip
 8002e72:	2201      	movs	r2, #1
 8002e74:	701a      	strb	r2, [r3, #0]
        break;
 8002e76:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d100      	bne.n	8002e80 <UART_SetConfig+0x3e0>
 8002e7e:	e094      	b.n	8002faa <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e82:	005a      	lsls	r2, r3, #1
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	085b      	lsrs	r3, r3, #1
 8002e8a:	18d2      	adds	r2, r2, r3
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	0019      	movs	r1, r3
 8002e92:	0010      	movs	r0, r2
 8002e94:	f7fd f942 	bl	800011c <__udivsi3>
 8002e98:	0003      	movs	r3, r0
 8002e9a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9e:	2b0f      	cmp	r3, #15
 8002ea0:	d921      	bls.n	8002ee6 <UART_SetConfig+0x446>
 8002ea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ea4:	2380      	movs	r3, #128	; 0x80
 8002ea6:	025b      	lsls	r3, r3, #9
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d21c      	bcs.n	8002ee6 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	200e      	movs	r0, #14
 8002eb2:	2418      	movs	r4, #24
 8002eb4:	193b      	adds	r3, r7, r4
 8002eb6:	181b      	adds	r3, r3, r0
 8002eb8:	210f      	movs	r1, #15
 8002eba:	438a      	bics	r2, r1
 8002ebc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec0:	085b      	lsrs	r3, r3, #1
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	2207      	movs	r2, #7
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	b299      	uxth	r1, r3
 8002eca:	193b      	adds	r3, r7, r4
 8002ecc:	181b      	adds	r3, r3, r0
 8002ece:	193a      	adds	r2, r7, r4
 8002ed0:	1812      	adds	r2, r2, r0
 8002ed2:	8812      	ldrh	r2, [r2, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	193a      	adds	r2, r7, r4
 8002ede:	1812      	adds	r2, r2, r0
 8002ee0:	8812      	ldrh	r2, [r2, #0]
 8002ee2:	60da      	str	r2, [r3, #12]
 8002ee4:	e061      	b.n	8002faa <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8002ee6:	231a      	movs	r3, #26
 8002ee8:	2218      	movs	r2, #24
 8002eea:	4694      	mov	ip, r2
 8002eec:	44bc      	add	ip, r7
 8002eee:	4463      	add	r3, ip
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	701a      	strb	r2, [r3, #0]
 8002ef4:	e059      	b.n	8002faa <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ef6:	231b      	movs	r3, #27
 8002ef8:	2218      	movs	r2, #24
 8002efa:	4694      	mov	ip, r2
 8002efc:	44bc      	add	ip, r7
 8002efe:	4463      	add	r3, ip
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d822      	bhi.n	8002f4c <UART_SetConfig+0x4ac>
 8002f06:	009a      	lsls	r2, r3, #2
 8002f08:	4b34      	ldr	r3, [pc, #208]	; (8002fdc <UART_SetConfig+0x53c>)
 8002f0a:	18d3      	adds	r3, r2, r3
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f10:	f7ff fca6 	bl	8002860 <HAL_RCC_GetPCLK1Freq>
 8002f14:	0003      	movs	r3, r0
 8002f16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f18:	e022      	b.n	8002f60 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f1a:	f7ff fcb7 	bl	800288c <HAL_RCC_GetPCLK2Freq>
 8002f1e:	0003      	movs	r3, r0
 8002f20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f22:	e01d      	b.n	8002f60 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f24:	4b2a      	ldr	r3, [pc, #168]	; (8002fd0 <UART_SetConfig+0x530>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2210      	movs	r2, #16
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d002      	beq.n	8002f34 <UART_SetConfig+0x494>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002f2e:	4b29      	ldr	r3, [pc, #164]	; (8002fd4 <UART_SetConfig+0x534>)
 8002f30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002f32:	e015      	b.n	8002f60 <UART_SetConfig+0x4c0>
          pclk = (uint32_t) HSI_VALUE;
 8002f34:	4b28      	ldr	r3, [pc, #160]	; (8002fd8 <UART_SetConfig+0x538>)
 8002f36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f38:	e012      	b.n	8002f60 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f3a:	f7ff fbe1 	bl	8002700 <HAL_RCC_GetSysClockFreq>
 8002f3e:	0003      	movs	r3, r0
 8002f40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f42:	e00d      	b.n	8002f60 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f44:	2380      	movs	r3, #128	; 0x80
 8002f46:	021b      	lsls	r3, r3, #8
 8002f48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f4a:	e009      	b.n	8002f60 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002f50:	231a      	movs	r3, #26
 8002f52:	2218      	movs	r2, #24
 8002f54:	4694      	mov	ip, r2
 8002f56:	44bc      	add	ip, r7
 8002f58:	4463      	add	r3, ip
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	701a      	strb	r2, [r3, #0]
        break;
 8002f5e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d021      	beq.n	8002faa <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	085a      	lsrs	r2, r3, #1
 8002f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6e:	18d2      	adds	r2, r2, r3
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	0019      	movs	r1, r3
 8002f76:	0010      	movs	r0, r2
 8002f78:	f7fd f8d0 	bl	800011c <__udivsi3>
 8002f7c:	0003      	movs	r3, r0
 8002f7e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f82:	2b0f      	cmp	r3, #15
 8002f84:	d90a      	bls.n	8002f9c <UART_SetConfig+0x4fc>
 8002f86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f88:	2380      	movs	r3, #128	; 0x80
 8002f8a:	025b      	lsls	r3, r3, #9
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d205      	bcs.n	8002f9c <UART_SetConfig+0x4fc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	60da      	str	r2, [r3, #12]
 8002f9a:	e006      	b.n	8002faa <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8002f9c:	231a      	movs	r3, #26
 8002f9e:	2218      	movs	r2, #24
 8002fa0:	4694      	mov	ip, r2
 8002fa2:	44bc      	add	ip, r7
 8002fa4:	4463      	add	r3, ip
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	2200      	movs	r2, #0
 8002fae:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002fb6:	231a      	movs	r3, #26
 8002fb8:	2218      	movs	r2, #24
 8002fba:	4694      	mov	ip, r2
 8002fbc:	44bc      	add	ip, r7
 8002fbe:	4463      	add	r3, ip
 8002fc0:	781b      	ldrb	r3, [r3, #0]
}
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b00e      	add	sp, #56	; 0x38
 8002fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	08003d90 	.word	0x08003d90
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	003d0900 	.word	0x003d0900
 8002fd8:	00f42400 	.word	0x00f42400
 8002fdc:	08003db4 	.word	0x08003db4

08002fe0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	2201      	movs	r2, #1
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d00b      	beq.n	800300a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	4a4a      	ldr	r2, [pc, #296]	; (8003124 <UART_AdvFeatureConfig+0x144>)
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	0019      	movs	r1, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	2202      	movs	r2, #2
 8003010:	4013      	ands	r3, r2
 8003012:	d00b      	beq.n	800302c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	4a43      	ldr	r2, [pc, #268]	; (8003128 <UART_AdvFeatureConfig+0x148>)
 800301c:	4013      	ands	r3, r2
 800301e:	0019      	movs	r1, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	2204      	movs	r2, #4
 8003032:	4013      	ands	r3, r2
 8003034:	d00b      	beq.n	800304e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	4a3b      	ldr	r2, [pc, #236]	; (800312c <UART_AdvFeatureConfig+0x14c>)
 800303e:	4013      	ands	r3, r2
 8003040:	0019      	movs	r1, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	2208      	movs	r2, #8
 8003054:	4013      	ands	r3, r2
 8003056:	d00b      	beq.n	8003070 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	4a34      	ldr	r2, [pc, #208]	; (8003130 <UART_AdvFeatureConfig+0x150>)
 8003060:	4013      	ands	r3, r2
 8003062:	0019      	movs	r1, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	2210      	movs	r2, #16
 8003076:	4013      	ands	r3, r2
 8003078:	d00b      	beq.n	8003092 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	4a2c      	ldr	r2, [pc, #176]	; (8003134 <UART_AdvFeatureConfig+0x154>)
 8003082:	4013      	ands	r3, r2
 8003084:	0019      	movs	r1, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	2220      	movs	r2, #32
 8003098:	4013      	ands	r3, r2
 800309a:	d00b      	beq.n	80030b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	4a25      	ldr	r2, [pc, #148]	; (8003138 <UART_AdvFeatureConfig+0x158>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	0019      	movs	r1, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	2240      	movs	r2, #64	; 0x40
 80030ba:	4013      	ands	r3, r2
 80030bc:	d01d      	beq.n	80030fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	4a1d      	ldr	r2, [pc, #116]	; (800313c <UART_AdvFeatureConfig+0x15c>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	0019      	movs	r1, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030da:	2380      	movs	r3, #128	; 0x80
 80030dc:	035b      	lsls	r3, r3, #13
 80030de:	429a      	cmp	r2, r3
 80030e0:	d10b      	bne.n	80030fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	4a15      	ldr	r2, [pc, #84]	; (8003140 <UART_AdvFeatureConfig+0x160>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	0019      	movs	r1, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	2280      	movs	r2, #128	; 0x80
 8003100:	4013      	ands	r3, r2
 8003102:	d00b      	beq.n	800311c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	4a0e      	ldr	r2, [pc, #56]	; (8003144 <UART_AdvFeatureConfig+0x164>)
 800310c:	4013      	ands	r3, r2
 800310e:	0019      	movs	r1, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	605a      	str	r2, [r3, #4]
  }
}
 800311c:	46c0      	nop			; (mov r8, r8)
 800311e:	46bd      	mov	sp, r7
 8003120:	b002      	add	sp, #8
 8003122:	bd80      	pop	{r7, pc}
 8003124:	fffdffff 	.word	0xfffdffff
 8003128:	fffeffff 	.word	0xfffeffff
 800312c:	fffbffff 	.word	0xfffbffff
 8003130:	ffff7fff 	.word	0xffff7fff
 8003134:	ffffefff 	.word	0xffffefff
 8003138:	ffffdfff 	.word	0xffffdfff
 800313c:	ffefffff 	.word	0xffefffff
 8003140:	ff9fffff 	.word	0xff9fffff
 8003144:	fff7ffff 	.word	0xfff7ffff

08003148 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b092      	sub	sp, #72	; 0x48
 800314c:	af02      	add	r7, sp, #8
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2284      	movs	r2, #132	; 0x84
 8003154:	2100      	movs	r1, #0
 8003156:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003158:	f7fd fdd6 	bl	8000d08 <HAL_GetTick>
 800315c:	0003      	movs	r3, r0
 800315e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2208      	movs	r2, #8
 8003168:	4013      	ands	r3, r2
 800316a:	2b08      	cmp	r3, #8
 800316c:	d12c      	bne.n	80031c8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800316e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003170:	2280      	movs	r2, #128	; 0x80
 8003172:	0391      	lsls	r1, r2, #14
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	4a46      	ldr	r2, [pc, #280]	; (8003290 <UART_CheckIdleState+0x148>)
 8003178:	9200      	str	r2, [sp, #0]
 800317a:	2200      	movs	r2, #0
 800317c:	f000 f88c 	bl	8003298 <UART_WaitOnFlagUntilTimeout>
 8003180:	1e03      	subs	r3, r0, #0
 8003182:	d021      	beq.n	80031c8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003184:	f3ef 8310 	mrs	r3, PRIMASK
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800318c:	63bb      	str	r3, [r7, #56]	; 0x38
 800318e:	2301      	movs	r3, #1
 8003190:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003194:	f383 8810 	msr	PRIMASK, r3
}
 8003198:	46c0      	nop			; (mov r8, r8)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2180      	movs	r1, #128	; 0x80
 80031a6:	438a      	bics	r2, r1
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b0:	f383 8810 	msr	PRIMASK, r3
}
 80031b4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2220      	movs	r2, #32
 80031ba:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2278      	movs	r2, #120	; 0x78
 80031c0:	2100      	movs	r1, #0
 80031c2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e05f      	b.n	8003288 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2204      	movs	r2, #4
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d146      	bne.n	8003264 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d8:	2280      	movs	r2, #128	; 0x80
 80031da:	03d1      	lsls	r1, r2, #15
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	4a2c      	ldr	r2, [pc, #176]	; (8003290 <UART_CheckIdleState+0x148>)
 80031e0:	9200      	str	r2, [sp, #0]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f000 f858 	bl	8003298 <UART_WaitOnFlagUntilTimeout>
 80031e8:	1e03      	subs	r3, r0, #0
 80031ea:	d03b      	beq.n	8003264 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031ec:	f3ef 8310 	mrs	r3, PRIMASK
 80031f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80031f2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031f4:	637b      	str	r3, [r7, #52]	; 0x34
 80031f6:	2301      	movs	r3, #1
 80031f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f383 8810 	msr	PRIMASK, r3
}
 8003200:	46c0      	nop			; (mov r8, r8)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4921      	ldr	r1, [pc, #132]	; (8003294 <UART_CheckIdleState+0x14c>)
 800320e:	400a      	ands	r2, r1
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003214:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	f383 8810 	msr	PRIMASK, r3
}
 800321c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800321e:	f3ef 8310 	mrs	r3, PRIMASK
 8003222:	61bb      	str	r3, [r7, #24]
  return(result);
 8003224:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003226:	633b      	str	r3, [r7, #48]	; 0x30
 8003228:	2301      	movs	r3, #1
 800322a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f383 8810 	msr	PRIMASK, r3
}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2101      	movs	r1, #1
 8003240:	438a      	bics	r2, r1
 8003242:	609a      	str	r2, [r3, #8]
 8003244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003246:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	f383 8810 	msr	PRIMASK, r3
}
 800324e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2280      	movs	r2, #128	; 0x80
 8003254:	2120      	movs	r1, #32
 8003256:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2278      	movs	r2, #120	; 0x78
 800325c:	2100      	movs	r1, #0
 800325e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e011      	b.n	8003288 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2220      	movs	r2, #32
 8003268:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2280      	movs	r2, #128	; 0x80
 800326e:	2120      	movs	r1, #32
 8003270:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2278      	movs	r2, #120	; 0x78
 8003282:	2100      	movs	r1, #0
 8003284:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	0018      	movs	r0, r3
 800328a:	46bd      	mov	sp, r7
 800328c:	b010      	add	sp, #64	; 0x40
 800328e:	bd80      	pop	{r7, pc}
 8003290:	01ffffff 	.word	0x01ffffff
 8003294:	fffffedf 	.word	0xfffffedf

08003298 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	1dfb      	adds	r3, r7, #7
 80032a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032a8:	e04b      	b.n	8003342 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	3301      	adds	r3, #1
 80032ae:	d048      	beq.n	8003342 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b0:	f7fd fd2a 	bl	8000d08 <HAL_GetTick>
 80032b4:	0002      	movs	r2, r0
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d302      	bcc.n	80032c6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e04b      	b.n	8003362 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2204      	movs	r2, #4
 80032d2:	4013      	ands	r3, r2
 80032d4:	d035      	beq.n	8003342 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	2208      	movs	r2, #8
 80032de:	4013      	ands	r3, r2
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d111      	bne.n	8003308 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2208      	movs	r2, #8
 80032ea:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	0018      	movs	r0, r3
 80032f0:	f000 f83c 	bl	800336c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2284      	movs	r2, #132	; 0x84
 80032f8:	2108      	movs	r1, #8
 80032fa:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2278      	movs	r2, #120	; 0x78
 8003300:	2100      	movs	r1, #0
 8003302:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e02c      	b.n	8003362 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	69da      	ldr	r2, [r3, #28]
 800330e:	2380      	movs	r3, #128	; 0x80
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	401a      	ands	r2, r3
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	429a      	cmp	r2, r3
 800331a:	d112      	bne.n	8003342 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2280      	movs	r2, #128	; 0x80
 8003322:	0112      	lsls	r2, r2, #4
 8003324:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	0018      	movs	r0, r3
 800332a:	f000 f81f 	bl	800336c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2284      	movs	r2, #132	; 0x84
 8003332:	2120      	movs	r1, #32
 8003334:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2278      	movs	r2, #120	; 0x78
 800333a:	2100      	movs	r1, #0
 800333c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e00f      	b.n	8003362 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	4013      	ands	r3, r2
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	425a      	negs	r2, r3
 8003352:	4153      	adcs	r3, r2
 8003354:	b2db      	uxtb	r3, r3
 8003356:	001a      	movs	r2, r3
 8003358:	1dfb      	adds	r3, r7, #7
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d0a4      	beq.n	80032aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	0018      	movs	r0, r3
 8003364:	46bd      	mov	sp, r7
 8003366:	b004      	add	sp, #16
 8003368:	bd80      	pop	{r7, pc}
	...

0800336c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b08e      	sub	sp, #56	; 0x38
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003374:	f3ef 8310 	mrs	r3, PRIMASK
 8003378:	617b      	str	r3, [r7, #20]
  return(result);
 800337a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800337c:	637b      	str	r3, [r7, #52]	; 0x34
 800337e:	2301      	movs	r3, #1
 8003380:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	f383 8810 	msr	PRIMASK, r3
}
 8003388:	46c0      	nop			; (mov r8, r8)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4926      	ldr	r1, [pc, #152]	; (8003430 <UART_EndRxTransfer+0xc4>)
 8003396:	400a      	ands	r2, r1
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800339c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	f383 8810 	msr	PRIMASK, r3
}
 80033a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033a6:	f3ef 8310 	mrs	r3, PRIMASK
 80033aa:	623b      	str	r3, [r7, #32]
  return(result);
 80033ac:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ae:	633b      	str	r3, [r7, #48]	; 0x30
 80033b0:	2301      	movs	r3, #1
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	f383 8810 	msr	PRIMASK, r3
}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2101      	movs	r1, #1
 80033c8:	438a      	bics	r2, r1
 80033ca:	609a      	str	r2, [r3, #8]
 80033cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d2:	f383 8810 	msr	PRIMASK, r3
}
 80033d6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d118      	bne.n	8003412 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033e0:	f3ef 8310 	mrs	r3, PRIMASK
 80033e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80033e6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033ea:	2301      	movs	r3, #1
 80033ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f383 8810 	msr	PRIMASK, r3
}
 80033f4:	46c0      	nop			; (mov r8, r8)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2110      	movs	r1, #16
 8003402:	438a      	bics	r2, r1
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003408:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f383 8810 	msr	PRIMASK, r3
}
 8003410:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2280      	movs	r2, #128	; 0x80
 8003416:	2120      	movs	r1, #32
 8003418:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	46bd      	mov	sp, r7
 800342a:	b00e      	add	sp, #56	; 0x38
 800342c:	bd80      	pop	{r7, pc}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	fffffedf 	.word	0xfffffedf

08003434 <__errno>:
 8003434:	4b01      	ldr	r3, [pc, #4]	; (800343c <__errno+0x8>)
 8003436:	6818      	ldr	r0, [r3, #0]
 8003438:	4770      	bx	lr
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	2000000c 	.word	0x2000000c

08003440 <__libc_init_array>:
 8003440:	b570      	push	{r4, r5, r6, lr}
 8003442:	2600      	movs	r6, #0
 8003444:	4d0c      	ldr	r5, [pc, #48]	; (8003478 <__libc_init_array+0x38>)
 8003446:	4c0d      	ldr	r4, [pc, #52]	; (800347c <__libc_init_array+0x3c>)
 8003448:	1b64      	subs	r4, r4, r5
 800344a:	10a4      	asrs	r4, r4, #2
 800344c:	42a6      	cmp	r6, r4
 800344e:	d109      	bne.n	8003464 <__libc_init_array+0x24>
 8003450:	2600      	movs	r6, #0
 8003452:	f000 fc47 	bl	8003ce4 <_init>
 8003456:	4d0a      	ldr	r5, [pc, #40]	; (8003480 <__libc_init_array+0x40>)
 8003458:	4c0a      	ldr	r4, [pc, #40]	; (8003484 <__libc_init_array+0x44>)
 800345a:	1b64      	subs	r4, r4, r5
 800345c:	10a4      	asrs	r4, r4, #2
 800345e:	42a6      	cmp	r6, r4
 8003460:	d105      	bne.n	800346e <__libc_init_array+0x2e>
 8003462:	bd70      	pop	{r4, r5, r6, pc}
 8003464:	00b3      	lsls	r3, r6, #2
 8003466:	58eb      	ldr	r3, [r5, r3]
 8003468:	4798      	blx	r3
 800346a:	3601      	adds	r6, #1
 800346c:	e7ee      	b.n	800344c <__libc_init_array+0xc>
 800346e:	00b3      	lsls	r3, r6, #2
 8003470:	58eb      	ldr	r3, [r5, r3]
 8003472:	4798      	blx	r3
 8003474:	3601      	adds	r6, #1
 8003476:	e7f2      	b.n	800345e <__libc_init_array+0x1e>
 8003478:	08003e14 	.word	0x08003e14
 800347c:	08003e14 	.word	0x08003e14
 8003480:	08003e14 	.word	0x08003e14
 8003484:	08003e18 	.word	0x08003e18

08003488 <memset>:
 8003488:	0003      	movs	r3, r0
 800348a:	1882      	adds	r2, r0, r2
 800348c:	4293      	cmp	r3, r2
 800348e:	d100      	bne.n	8003492 <memset+0xa>
 8003490:	4770      	bx	lr
 8003492:	7019      	strb	r1, [r3, #0]
 8003494:	3301      	adds	r3, #1
 8003496:	e7f9      	b.n	800348c <memset+0x4>

08003498 <siprintf>:
 8003498:	b40e      	push	{r1, r2, r3}
 800349a:	b500      	push	{lr}
 800349c:	490b      	ldr	r1, [pc, #44]	; (80034cc <siprintf+0x34>)
 800349e:	b09c      	sub	sp, #112	; 0x70
 80034a0:	ab1d      	add	r3, sp, #116	; 0x74
 80034a2:	9002      	str	r0, [sp, #8]
 80034a4:	9006      	str	r0, [sp, #24]
 80034a6:	9107      	str	r1, [sp, #28]
 80034a8:	9104      	str	r1, [sp, #16]
 80034aa:	4809      	ldr	r0, [pc, #36]	; (80034d0 <siprintf+0x38>)
 80034ac:	4909      	ldr	r1, [pc, #36]	; (80034d4 <siprintf+0x3c>)
 80034ae:	cb04      	ldmia	r3!, {r2}
 80034b0:	9105      	str	r1, [sp, #20]
 80034b2:	6800      	ldr	r0, [r0, #0]
 80034b4:	a902      	add	r1, sp, #8
 80034b6:	9301      	str	r3, [sp, #4]
 80034b8:	f000 f870 	bl	800359c <_svfiprintf_r>
 80034bc:	2300      	movs	r3, #0
 80034be:	9a02      	ldr	r2, [sp, #8]
 80034c0:	7013      	strb	r3, [r2, #0]
 80034c2:	b01c      	add	sp, #112	; 0x70
 80034c4:	bc08      	pop	{r3}
 80034c6:	b003      	add	sp, #12
 80034c8:	4718      	bx	r3
 80034ca:	46c0      	nop			; (mov r8, r8)
 80034cc:	7fffffff 	.word	0x7fffffff
 80034d0:	2000000c 	.word	0x2000000c
 80034d4:	ffff0208 	.word	0xffff0208

080034d8 <__ssputs_r>:
 80034d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034da:	688e      	ldr	r6, [r1, #8]
 80034dc:	b085      	sub	sp, #20
 80034de:	0007      	movs	r7, r0
 80034e0:	000c      	movs	r4, r1
 80034e2:	9203      	str	r2, [sp, #12]
 80034e4:	9301      	str	r3, [sp, #4]
 80034e6:	429e      	cmp	r6, r3
 80034e8:	d83c      	bhi.n	8003564 <__ssputs_r+0x8c>
 80034ea:	2390      	movs	r3, #144	; 0x90
 80034ec:	898a      	ldrh	r2, [r1, #12]
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	421a      	tst	r2, r3
 80034f2:	d034      	beq.n	800355e <__ssputs_r+0x86>
 80034f4:	2503      	movs	r5, #3
 80034f6:	6909      	ldr	r1, [r1, #16]
 80034f8:	6823      	ldr	r3, [r4, #0]
 80034fa:	1a5b      	subs	r3, r3, r1
 80034fc:	9302      	str	r3, [sp, #8]
 80034fe:	6963      	ldr	r3, [r4, #20]
 8003500:	9802      	ldr	r0, [sp, #8]
 8003502:	435d      	muls	r5, r3
 8003504:	0feb      	lsrs	r3, r5, #31
 8003506:	195d      	adds	r5, r3, r5
 8003508:	9b01      	ldr	r3, [sp, #4]
 800350a:	106d      	asrs	r5, r5, #1
 800350c:	3301      	adds	r3, #1
 800350e:	181b      	adds	r3, r3, r0
 8003510:	42ab      	cmp	r3, r5
 8003512:	d900      	bls.n	8003516 <__ssputs_r+0x3e>
 8003514:	001d      	movs	r5, r3
 8003516:	0553      	lsls	r3, r2, #21
 8003518:	d532      	bpl.n	8003580 <__ssputs_r+0xa8>
 800351a:	0029      	movs	r1, r5
 800351c:	0038      	movs	r0, r7
 800351e:	f000 fb31 	bl	8003b84 <_malloc_r>
 8003522:	1e06      	subs	r6, r0, #0
 8003524:	d109      	bne.n	800353a <__ssputs_r+0x62>
 8003526:	230c      	movs	r3, #12
 8003528:	603b      	str	r3, [r7, #0]
 800352a:	2340      	movs	r3, #64	; 0x40
 800352c:	2001      	movs	r0, #1
 800352e:	89a2      	ldrh	r2, [r4, #12]
 8003530:	4240      	negs	r0, r0
 8003532:	4313      	orrs	r3, r2
 8003534:	81a3      	strh	r3, [r4, #12]
 8003536:	b005      	add	sp, #20
 8003538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800353a:	9a02      	ldr	r2, [sp, #8]
 800353c:	6921      	ldr	r1, [r4, #16]
 800353e:	f000 faba 	bl	8003ab6 <memcpy>
 8003542:	89a3      	ldrh	r3, [r4, #12]
 8003544:	4a14      	ldr	r2, [pc, #80]	; (8003598 <__ssputs_r+0xc0>)
 8003546:	401a      	ands	r2, r3
 8003548:	2380      	movs	r3, #128	; 0x80
 800354a:	4313      	orrs	r3, r2
 800354c:	81a3      	strh	r3, [r4, #12]
 800354e:	9b02      	ldr	r3, [sp, #8]
 8003550:	6126      	str	r6, [r4, #16]
 8003552:	18f6      	adds	r6, r6, r3
 8003554:	6026      	str	r6, [r4, #0]
 8003556:	6165      	str	r5, [r4, #20]
 8003558:	9e01      	ldr	r6, [sp, #4]
 800355a:	1aed      	subs	r5, r5, r3
 800355c:	60a5      	str	r5, [r4, #8]
 800355e:	9b01      	ldr	r3, [sp, #4]
 8003560:	429e      	cmp	r6, r3
 8003562:	d900      	bls.n	8003566 <__ssputs_r+0x8e>
 8003564:	9e01      	ldr	r6, [sp, #4]
 8003566:	0032      	movs	r2, r6
 8003568:	9903      	ldr	r1, [sp, #12]
 800356a:	6820      	ldr	r0, [r4, #0]
 800356c:	f000 faac 	bl	8003ac8 <memmove>
 8003570:	68a3      	ldr	r3, [r4, #8]
 8003572:	2000      	movs	r0, #0
 8003574:	1b9b      	subs	r3, r3, r6
 8003576:	60a3      	str	r3, [r4, #8]
 8003578:	6823      	ldr	r3, [r4, #0]
 800357a:	199e      	adds	r6, r3, r6
 800357c:	6026      	str	r6, [r4, #0]
 800357e:	e7da      	b.n	8003536 <__ssputs_r+0x5e>
 8003580:	002a      	movs	r2, r5
 8003582:	0038      	movs	r0, r7
 8003584:	f000 fb5c 	bl	8003c40 <_realloc_r>
 8003588:	1e06      	subs	r6, r0, #0
 800358a:	d1e0      	bne.n	800354e <__ssputs_r+0x76>
 800358c:	0038      	movs	r0, r7
 800358e:	6921      	ldr	r1, [r4, #16]
 8003590:	f000 faae 	bl	8003af0 <_free_r>
 8003594:	e7c7      	b.n	8003526 <__ssputs_r+0x4e>
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	fffffb7f 	.word	0xfffffb7f

0800359c <_svfiprintf_r>:
 800359c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800359e:	b0a1      	sub	sp, #132	; 0x84
 80035a0:	9003      	str	r0, [sp, #12]
 80035a2:	001d      	movs	r5, r3
 80035a4:	898b      	ldrh	r3, [r1, #12]
 80035a6:	000f      	movs	r7, r1
 80035a8:	0016      	movs	r6, r2
 80035aa:	061b      	lsls	r3, r3, #24
 80035ac:	d511      	bpl.n	80035d2 <_svfiprintf_r+0x36>
 80035ae:	690b      	ldr	r3, [r1, #16]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10e      	bne.n	80035d2 <_svfiprintf_r+0x36>
 80035b4:	2140      	movs	r1, #64	; 0x40
 80035b6:	f000 fae5 	bl	8003b84 <_malloc_r>
 80035ba:	6038      	str	r0, [r7, #0]
 80035bc:	6138      	str	r0, [r7, #16]
 80035be:	2800      	cmp	r0, #0
 80035c0:	d105      	bne.n	80035ce <_svfiprintf_r+0x32>
 80035c2:	230c      	movs	r3, #12
 80035c4:	9a03      	ldr	r2, [sp, #12]
 80035c6:	3801      	subs	r0, #1
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	b021      	add	sp, #132	; 0x84
 80035cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035ce:	2340      	movs	r3, #64	; 0x40
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	2300      	movs	r3, #0
 80035d4:	ac08      	add	r4, sp, #32
 80035d6:	6163      	str	r3, [r4, #20]
 80035d8:	3320      	adds	r3, #32
 80035da:	7663      	strb	r3, [r4, #25]
 80035dc:	3310      	adds	r3, #16
 80035de:	76a3      	strb	r3, [r4, #26]
 80035e0:	9507      	str	r5, [sp, #28]
 80035e2:	0035      	movs	r5, r6
 80035e4:	782b      	ldrb	r3, [r5, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <_svfiprintf_r+0x52>
 80035ea:	2b25      	cmp	r3, #37	; 0x25
 80035ec:	d147      	bne.n	800367e <_svfiprintf_r+0xe2>
 80035ee:	1bab      	subs	r3, r5, r6
 80035f0:	9305      	str	r3, [sp, #20]
 80035f2:	42b5      	cmp	r5, r6
 80035f4:	d00c      	beq.n	8003610 <_svfiprintf_r+0x74>
 80035f6:	0032      	movs	r2, r6
 80035f8:	0039      	movs	r1, r7
 80035fa:	9803      	ldr	r0, [sp, #12]
 80035fc:	f7ff ff6c 	bl	80034d8 <__ssputs_r>
 8003600:	1c43      	adds	r3, r0, #1
 8003602:	d100      	bne.n	8003606 <_svfiprintf_r+0x6a>
 8003604:	e0ae      	b.n	8003764 <_svfiprintf_r+0x1c8>
 8003606:	6962      	ldr	r2, [r4, #20]
 8003608:	9b05      	ldr	r3, [sp, #20]
 800360a:	4694      	mov	ip, r2
 800360c:	4463      	add	r3, ip
 800360e:	6163      	str	r3, [r4, #20]
 8003610:	782b      	ldrb	r3, [r5, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d100      	bne.n	8003618 <_svfiprintf_r+0x7c>
 8003616:	e0a5      	b.n	8003764 <_svfiprintf_r+0x1c8>
 8003618:	2201      	movs	r2, #1
 800361a:	2300      	movs	r3, #0
 800361c:	4252      	negs	r2, r2
 800361e:	6062      	str	r2, [r4, #4]
 8003620:	a904      	add	r1, sp, #16
 8003622:	3254      	adds	r2, #84	; 0x54
 8003624:	1852      	adds	r2, r2, r1
 8003626:	1c6e      	adds	r6, r5, #1
 8003628:	6023      	str	r3, [r4, #0]
 800362a:	60e3      	str	r3, [r4, #12]
 800362c:	60a3      	str	r3, [r4, #8]
 800362e:	7013      	strb	r3, [r2, #0]
 8003630:	65a3      	str	r3, [r4, #88]	; 0x58
 8003632:	2205      	movs	r2, #5
 8003634:	7831      	ldrb	r1, [r6, #0]
 8003636:	4854      	ldr	r0, [pc, #336]	; (8003788 <_svfiprintf_r+0x1ec>)
 8003638:	f000 fa32 	bl	8003aa0 <memchr>
 800363c:	1c75      	adds	r5, r6, #1
 800363e:	2800      	cmp	r0, #0
 8003640:	d11f      	bne.n	8003682 <_svfiprintf_r+0xe6>
 8003642:	6822      	ldr	r2, [r4, #0]
 8003644:	06d3      	lsls	r3, r2, #27
 8003646:	d504      	bpl.n	8003652 <_svfiprintf_r+0xb6>
 8003648:	2353      	movs	r3, #83	; 0x53
 800364a:	a904      	add	r1, sp, #16
 800364c:	185b      	adds	r3, r3, r1
 800364e:	2120      	movs	r1, #32
 8003650:	7019      	strb	r1, [r3, #0]
 8003652:	0713      	lsls	r3, r2, #28
 8003654:	d504      	bpl.n	8003660 <_svfiprintf_r+0xc4>
 8003656:	2353      	movs	r3, #83	; 0x53
 8003658:	a904      	add	r1, sp, #16
 800365a:	185b      	adds	r3, r3, r1
 800365c:	212b      	movs	r1, #43	; 0x2b
 800365e:	7019      	strb	r1, [r3, #0]
 8003660:	7833      	ldrb	r3, [r6, #0]
 8003662:	2b2a      	cmp	r3, #42	; 0x2a
 8003664:	d016      	beq.n	8003694 <_svfiprintf_r+0xf8>
 8003666:	0035      	movs	r5, r6
 8003668:	2100      	movs	r1, #0
 800366a:	200a      	movs	r0, #10
 800366c:	68e3      	ldr	r3, [r4, #12]
 800366e:	782a      	ldrb	r2, [r5, #0]
 8003670:	1c6e      	adds	r6, r5, #1
 8003672:	3a30      	subs	r2, #48	; 0x30
 8003674:	2a09      	cmp	r2, #9
 8003676:	d94e      	bls.n	8003716 <_svfiprintf_r+0x17a>
 8003678:	2900      	cmp	r1, #0
 800367a:	d111      	bne.n	80036a0 <_svfiprintf_r+0x104>
 800367c:	e017      	b.n	80036ae <_svfiprintf_r+0x112>
 800367e:	3501      	adds	r5, #1
 8003680:	e7b0      	b.n	80035e4 <_svfiprintf_r+0x48>
 8003682:	4b41      	ldr	r3, [pc, #260]	; (8003788 <_svfiprintf_r+0x1ec>)
 8003684:	6822      	ldr	r2, [r4, #0]
 8003686:	1ac0      	subs	r0, r0, r3
 8003688:	2301      	movs	r3, #1
 800368a:	4083      	lsls	r3, r0
 800368c:	4313      	orrs	r3, r2
 800368e:	002e      	movs	r6, r5
 8003690:	6023      	str	r3, [r4, #0]
 8003692:	e7ce      	b.n	8003632 <_svfiprintf_r+0x96>
 8003694:	9b07      	ldr	r3, [sp, #28]
 8003696:	1d19      	adds	r1, r3, #4
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	9107      	str	r1, [sp, #28]
 800369c:	2b00      	cmp	r3, #0
 800369e:	db01      	blt.n	80036a4 <_svfiprintf_r+0x108>
 80036a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80036a2:	e004      	b.n	80036ae <_svfiprintf_r+0x112>
 80036a4:	425b      	negs	r3, r3
 80036a6:	60e3      	str	r3, [r4, #12]
 80036a8:	2302      	movs	r3, #2
 80036aa:	4313      	orrs	r3, r2
 80036ac:	6023      	str	r3, [r4, #0]
 80036ae:	782b      	ldrb	r3, [r5, #0]
 80036b0:	2b2e      	cmp	r3, #46	; 0x2e
 80036b2:	d10a      	bne.n	80036ca <_svfiprintf_r+0x12e>
 80036b4:	786b      	ldrb	r3, [r5, #1]
 80036b6:	2b2a      	cmp	r3, #42	; 0x2a
 80036b8:	d135      	bne.n	8003726 <_svfiprintf_r+0x18a>
 80036ba:	9b07      	ldr	r3, [sp, #28]
 80036bc:	3502      	adds	r5, #2
 80036be:	1d1a      	adds	r2, r3, #4
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	9207      	str	r2, [sp, #28]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	db2b      	blt.n	8003720 <_svfiprintf_r+0x184>
 80036c8:	9309      	str	r3, [sp, #36]	; 0x24
 80036ca:	4e30      	ldr	r6, [pc, #192]	; (800378c <_svfiprintf_r+0x1f0>)
 80036cc:	2203      	movs	r2, #3
 80036ce:	0030      	movs	r0, r6
 80036d0:	7829      	ldrb	r1, [r5, #0]
 80036d2:	f000 f9e5 	bl	8003aa0 <memchr>
 80036d6:	2800      	cmp	r0, #0
 80036d8:	d006      	beq.n	80036e8 <_svfiprintf_r+0x14c>
 80036da:	2340      	movs	r3, #64	; 0x40
 80036dc:	1b80      	subs	r0, r0, r6
 80036de:	4083      	lsls	r3, r0
 80036e0:	6822      	ldr	r2, [r4, #0]
 80036e2:	3501      	adds	r5, #1
 80036e4:	4313      	orrs	r3, r2
 80036e6:	6023      	str	r3, [r4, #0]
 80036e8:	7829      	ldrb	r1, [r5, #0]
 80036ea:	2206      	movs	r2, #6
 80036ec:	4828      	ldr	r0, [pc, #160]	; (8003790 <_svfiprintf_r+0x1f4>)
 80036ee:	1c6e      	adds	r6, r5, #1
 80036f0:	7621      	strb	r1, [r4, #24]
 80036f2:	f000 f9d5 	bl	8003aa0 <memchr>
 80036f6:	2800      	cmp	r0, #0
 80036f8:	d03c      	beq.n	8003774 <_svfiprintf_r+0x1d8>
 80036fa:	4b26      	ldr	r3, [pc, #152]	; (8003794 <_svfiprintf_r+0x1f8>)
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d125      	bne.n	800374c <_svfiprintf_r+0x1b0>
 8003700:	2207      	movs	r2, #7
 8003702:	9b07      	ldr	r3, [sp, #28]
 8003704:	3307      	adds	r3, #7
 8003706:	4393      	bics	r3, r2
 8003708:	3308      	adds	r3, #8
 800370a:	9307      	str	r3, [sp, #28]
 800370c:	6963      	ldr	r3, [r4, #20]
 800370e:	9a04      	ldr	r2, [sp, #16]
 8003710:	189b      	adds	r3, r3, r2
 8003712:	6163      	str	r3, [r4, #20]
 8003714:	e765      	b.n	80035e2 <_svfiprintf_r+0x46>
 8003716:	4343      	muls	r3, r0
 8003718:	0035      	movs	r5, r6
 800371a:	2101      	movs	r1, #1
 800371c:	189b      	adds	r3, r3, r2
 800371e:	e7a6      	b.n	800366e <_svfiprintf_r+0xd2>
 8003720:	2301      	movs	r3, #1
 8003722:	425b      	negs	r3, r3
 8003724:	e7d0      	b.n	80036c8 <_svfiprintf_r+0x12c>
 8003726:	2300      	movs	r3, #0
 8003728:	200a      	movs	r0, #10
 800372a:	001a      	movs	r2, r3
 800372c:	3501      	adds	r5, #1
 800372e:	6063      	str	r3, [r4, #4]
 8003730:	7829      	ldrb	r1, [r5, #0]
 8003732:	1c6e      	adds	r6, r5, #1
 8003734:	3930      	subs	r1, #48	; 0x30
 8003736:	2909      	cmp	r1, #9
 8003738:	d903      	bls.n	8003742 <_svfiprintf_r+0x1a6>
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0c5      	beq.n	80036ca <_svfiprintf_r+0x12e>
 800373e:	9209      	str	r2, [sp, #36]	; 0x24
 8003740:	e7c3      	b.n	80036ca <_svfiprintf_r+0x12e>
 8003742:	4342      	muls	r2, r0
 8003744:	0035      	movs	r5, r6
 8003746:	2301      	movs	r3, #1
 8003748:	1852      	adds	r2, r2, r1
 800374a:	e7f1      	b.n	8003730 <_svfiprintf_r+0x194>
 800374c:	ab07      	add	r3, sp, #28
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	003a      	movs	r2, r7
 8003752:	0021      	movs	r1, r4
 8003754:	4b10      	ldr	r3, [pc, #64]	; (8003798 <_svfiprintf_r+0x1fc>)
 8003756:	9803      	ldr	r0, [sp, #12]
 8003758:	e000      	b.n	800375c <_svfiprintf_r+0x1c0>
 800375a:	bf00      	nop
 800375c:	9004      	str	r0, [sp, #16]
 800375e:	9b04      	ldr	r3, [sp, #16]
 8003760:	3301      	adds	r3, #1
 8003762:	d1d3      	bne.n	800370c <_svfiprintf_r+0x170>
 8003764:	89bb      	ldrh	r3, [r7, #12]
 8003766:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003768:	065b      	lsls	r3, r3, #25
 800376a:	d400      	bmi.n	800376e <_svfiprintf_r+0x1d2>
 800376c:	e72d      	b.n	80035ca <_svfiprintf_r+0x2e>
 800376e:	2001      	movs	r0, #1
 8003770:	4240      	negs	r0, r0
 8003772:	e72a      	b.n	80035ca <_svfiprintf_r+0x2e>
 8003774:	ab07      	add	r3, sp, #28
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	003a      	movs	r2, r7
 800377a:	0021      	movs	r1, r4
 800377c:	4b06      	ldr	r3, [pc, #24]	; (8003798 <_svfiprintf_r+0x1fc>)
 800377e:	9803      	ldr	r0, [sp, #12]
 8003780:	f000 f87c 	bl	800387c <_printf_i>
 8003784:	e7ea      	b.n	800375c <_svfiprintf_r+0x1c0>
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	08003dd8 	.word	0x08003dd8
 800378c:	08003dde 	.word	0x08003dde
 8003790:	08003de2 	.word	0x08003de2
 8003794:	00000000 	.word	0x00000000
 8003798:	080034d9 	.word	0x080034d9

0800379c <_printf_common>:
 800379c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800379e:	0015      	movs	r5, r2
 80037a0:	9301      	str	r3, [sp, #4]
 80037a2:	688a      	ldr	r2, [r1, #8]
 80037a4:	690b      	ldr	r3, [r1, #16]
 80037a6:	000c      	movs	r4, r1
 80037a8:	9000      	str	r0, [sp, #0]
 80037aa:	4293      	cmp	r3, r2
 80037ac:	da00      	bge.n	80037b0 <_printf_common+0x14>
 80037ae:	0013      	movs	r3, r2
 80037b0:	0022      	movs	r2, r4
 80037b2:	602b      	str	r3, [r5, #0]
 80037b4:	3243      	adds	r2, #67	; 0x43
 80037b6:	7812      	ldrb	r2, [r2, #0]
 80037b8:	2a00      	cmp	r2, #0
 80037ba:	d001      	beq.n	80037c0 <_printf_common+0x24>
 80037bc:	3301      	adds	r3, #1
 80037be:	602b      	str	r3, [r5, #0]
 80037c0:	6823      	ldr	r3, [r4, #0]
 80037c2:	069b      	lsls	r3, r3, #26
 80037c4:	d502      	bpl.n	80037cc <_printf_common+0x30>
 80037c6:	682b      	ldr	r3, [r5, #0]
 80037c8:	3302      	adds	r3, #2
 80037ca:	602b      	str	r3, [r5, #0]
 80037cc:	6822      	ldr	r2, [r4, #0]
 80037ce:	2306      	movs	r3, #6
 80037d0:	0017      	movs	r7, r2
 80037d2:	401f      	ands	r7, r3
 80037d4:	421a      	tst	r2, r3
 80037d6:	d027      	beq.n	8003828 <_printf_common+0x8c>
 80037d8:	0023      	movs	r3, r4
 80037da:	3343      	adds	r3, #67	; 0x43
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	1e5a      	subs	r2, r3, #1
 80037e0:	4193      	sbcs	r3, r2
 80037e2:	6822      	ldr	r2, [r4, #0]
 80037e4:	0692      	lsls	r2, r2, #26
 80037e6:	d430      	bmi.n	800384a <_printf_common+0xae>
 80037e8:	0022      	movs	r2, r4
 80037ea:	9901      	ldr	r1, [sp, #4]
 80037ec:	9800      	ldr	r0, [sp, #0]
 80037ee:	9e08      	ldr	r6, [sp, #32]
 80037f0:	3243      	adds	r2, #67	; 0x43
 80037f2:	47b0      	blx	r6
 80037f4:	1c43      	adds	r3, r0, #1
 80037f6:	d025      	beq.n	8003844 <_printf_common+0xa8>
 80037f8:	2306      	movs	r3, #6
 80037fa:	6820      	ldr	r0, [r4, #0]
 80037fc:	682a      	ldr	r2, [r5, #0]
 80037fe:	68e1      	ldr	r1, [r4, #12]
 8003800:	2500      	movs	r5, #0
 8003802:	4003      	ands	r3, r0
 8003804:	2b04      	cmp	r3, #4
 8003806:	d103      	bne.n	8003810 <_printf_common+0x74>
 8003808:	1a8d      	subs	r5, r1, r2
 800380a:	43eb      	mvns	r3, r5
 800380c:	17db      	asrs	r3, r3, #31
 800380e:	401d      	ands	r5, r3
 8003810:	68a3      	ldr	r3, [r4, #8]
 8003812:	6922      	ldr	r2, [r4, #16]
 8003814:	4293      	cmp	r3, r2
 8003816:	dd01      	ble.n	800381c <_printf_common+0x80>
 8003818:	1a9b      	subs	r3, r3, r2
 800381a:	18ed      	adds	r5, r5, r3
 800381c:	2700      	movs	r7, #0
 800381e:	42bd      	cmp	r5, r7
 8003820:	d120      	bne.n	8003864 <_printf_common+0xc8>
 8003822:	2000      	movs	r0, #0
 8003824:	e010      	b.n	8003848 <_printf_common+0xac>
 8003826:	3701      	adds	r7, #1
 8003828:	68e3      	ldr	r3, [r4, #12]
 800382a:	682a      	ldr	r2, [r5, #0]
 800382c:	1a9b      	subs	r3, r3, r2
 800382e:	42bb      	cmp	r3, r7
 8003830:	ddd2      	ble.n	80037d8 <_printf_common+0x3c>
 8003832:	0022      	movs	r2, r4
 8003834:	2301      	movs	r3, #1
 8003836:	9901      	ldr	r1, [sp, #4]
 8003838:	9800      	ldr	r0, [sp, #0]
 800383a:	9e08      	ldr	r6, [sp, #32]
 800383c:	3219      	adds	r2, #25
 800383e:	47b0      	blx	r6
 8003840:	1c43      	adds	r3, r0, #1
 8003842:	d1f0      	bne.n	8003826 <_printf_common+0x8a>
 8003844:	2001      	movs	r0, #1
 8003846:	4240      	negs	r0, r0
 8003848:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800384a:	2030      	movs	r0, #48	; 0x30
 800384c:	18e1      	adds	r1, r4, r3
 800384e:	3143      	adds	r1, #67	; 0x43
 8003850:	7008      	strb	r0, [r1, #0]
 8003852:	0021      	movs	r1, r4
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	3145      	adds	r1, #69	; 0x45
 8003858:	7809      	ldrb	r1, [r1, #0]
 800385a:	18a2      	adds	r2, r4, r2
 800385c:	3243      	adds	r2, #67	; 0x43
 800385e:	3302      	adds	r3, #2
 8003860:	7011      	strb	r1, [r2, #0]
 8003862:	e7c1      	b.n	80037e8 <_printf_common+0x4c>
 8003864:	0022      	movs	r2, r4
 8003866:	2301      	movs	r3, #1
 8003868:	9901      	ldr	r1, [sp, #4]
 800386a:	9800      	ldr	r0, [sp, #0]
 800386c:	9e08      	ldr	r6, [sp, #32]
 800386e:	321a      	adds	r2, #26
 8003870:	47b0      	blx	r6
 8003872:	1c43      	adds	r3, r0, #1
 8003874:	d0e6      	beq.n	8003844 <_printf_common+0xa8>
 8003876:	3701      	adds	r7, #1
 8003878:	e7d1      	b.n	800381e <_printf_common+0x82>
	...

0800387c <_printf_i>:
 800387c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800387e:	b08b      	sub	sp, #44	; 0x2c
 8003880:	9206      	str	r2, [sp, #24]
 8003882:	000a      	movs	r2, r1
 8003884:	3243      	adds	r2, #67	; 0x43
 8003886:	9307      	str	r3, [sp, #28]
 8003888:	9005      	str	r0, [sp, #20]
 800388a:	9204      	str	r2, [sp, #16]
 800388c:	7e0a      	ldrb	r2, [r1, #24]
 800388e:	000c      	movs	r4, r1
 8003890:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003892:	2a78      	cmp	r2, #120	; 0x78
 8003894:	d806      	bhi.n	80038a4 <_printf_i+0x28>
 8003896:	2a62      	cmp	r2, #98	; 0x62
 8003898:	d808      	bhi.n	80038ac <_printf_i+0x30>
 800389a:	2a00      	cmp	r2, #0
 800389c:	d100      	bne.n	80038a0 <_printf_i+0x24>
 800389e:	e0c0      	b.n	8003a22 <_printf_i+0x1a6>
 80038a0:	2a58      	cmp	r2, #88	; 0x58
 80038a2:	d052      	beq.n	800394a <_printf_i+0xce>
 80038a4:	0026      	movs	r6, r4
 80038a6:	3642      	adds	r6, #66	; 0x42
 80038a8:	7032      	strb	r2, [r6, #0]
 80038aa:	e022      	b.n	80038f2 <_printf_i+0x76>
 80038ac:	0010      	movs	r0, r2
 80038ae:	3863      	subs	r0, #99	; 0x63
 80038b0:	2815      	cmp	r0, #21
 80038b2:	d8f7      	bhi.n	80038a4 <_printf_i+0x28>
 80038b4:	f7fc fc28 	bl	8000108 <__gnu_thumb1_case_shi>
 80038b8:	001f0016 	.word	0x001f0016
 80038bc:	fff6fff6 	.word	0xfff6fff6
 80038c0:	fff6fff6 	.word	0xfff6fff6
 80038c4:	fff6001f 	.word	0xfff6001f
 80038c8:	fff6fff6 	.word	0xfff6fff6
 80038cc:	00a8fff6 	.word	0x00a8fff6
 80038d0:	009a0036 	.word	0x009a0036
 80038d4:	fff6fff6 	.word	0xfff6fff6
 80038d8:	fff600b9 	.word	0xfff600b9
 80038dc:	fff60036 	.word	0xfff60036
 80038e0:	009efff6 	.word	0x009efff6
 80038e4:	0026      	movs	r6, r4
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	3642      	adds	r6, #66	; 0x42
 80038ea:	1d11      	adds	r1, r2, #4
 80038ec:	6019      	str	r1, [r3, #0]
 80038ee:	6813      	ldr	r3, [r2, #0]
 80038f0:	7033      	strb	r3, [r6, #0]
 80038f2:	2301      	movs	r3, #1
 80038f4:	e0a7      	b.n	8003a46 <_printf_i+0x1ca>
 80038f6:	6808      	ldr	r0, [r1, #0]
 80038f8:	6819      	ldr	r1, [r3, #0]
 80038fa:	1d0a      	adds	r2, r1, #4
 80038fc:	0605      	lsls	r5, r0, #24
 80038fe:	d50b      	bpl.n	8003918 <_printf_i+0x9c>
 8003900:	680d      	ldr	r5, [r1, #0]
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	2d00      	cmp	r5, #0
 8003906:	da03      	bge.n	8003910 <_printf_i+0x94>
 8003908:	232d      	movs	r3, #45	; 0x2d
 800390a:	9a04      	ldr	r2, [sp, #16]
 800390c:	426d      	negs	r5, r5
 800390e:	7013      	strb	r3, [r2, #0]
 8003910:	4b61      	ldr	r3, [pc, #388]	; (8003a98 <_printf_i+0x21c>)
 8003912:	270a      	movs	r7, #10
 8003914:	9303      	str	r3, [sp, #12]
 8003916:	e032      	b.n	800397e <_printf_i+0x102>
 8003918:	680d      	ldr	r5, [r1, #0]
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	0641      	lsls	r1, r0, #25
 800391e:	d5f1      	bpl.n	8003904 <_printf_i+0x88>
 8003920:	b22d      	sxth	r5, r5
 8003922:	e7ef      	b.n	8003904 <_printf_i+0x88>
 8003924:	680d      	ldr	r5, [r1, #0]
 8003926:	6819      	ldr	r1, [r3, #0]
 8003928:	1d08      	adds	r0, r1, #4
 800392a:	6018      	str	r0, [r3, #0]
 800392c:	062e      	lsls	r6, r5, #24
 800392e:	d501      	bpl.n	8003934 <_printf_i+0xb8>
 8003930:	680d      	ldr	r5, [r1, #0]
 8003932:	e003      	b.n	800393c <_printf_i+0xc0>
 8003934:	066d      	lsls	r5, r5, #25
 8003936:	d5fb      	bpl.n	8003930 <_printf_i+0xb4>
 8003938:	680d      	ldr	r5, [r1, #0]
 800393a:	b2ad      	uxth	r5, r5
 800393c:	4b56      	ldr	r3, [pc, #344]	; (8003a98 <_printf_i+0x21c>)
 800393e:	270a      	movs	r7, #10
 8003940:	9303      	str	r3, [sp, #12]
 8003942:	2a6f      	cmp	r2, #111	; 0x6f
 8003944:	d117      	bne.n	8003976 <_printf_i+0xfa>
 8003946:	2708      	movs	r7, #8
 8003948:	e015      	b.n	8003976 <_printf_i+0xfa>
 800394a:	3145      	adds	r1, #69	; 0x45
 800394c:	700a      	strb	r2, [r1, #0]
 800394e:	4a52      	ldr	r2, [pc, #328]	; (8003a98 <_printf_i+0x21c>)
 8003950:	9203      	str	r2, [sp, #12]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	6821      	ldr	r1, [r4, #0]
 8003956:	ca20      	ldmia	r2!, {r5}
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	0608      	lsls	r0, r1, #24
 800395c:	d550      	bpl.n	8003a00 <_printf_i+0x184>
 800395e:	07cb      	lsls	r3, r1, #31
 8003960:	d502      	bpl.n	8003968 <_printf_i+0xec>
 8003962:	2320      	movs	r3, #32
 8003964:	4319      	orrs	r1, r3
 8003966:	6021      	str	r1, [r4, #0]
 8003968:	2710      	movs	r7, #16
 800396a:	2d00      	cmp	r5, #0
 800396c:	d103      	bne.n	8003976 <_printf_i+0xfa>
 800396e:	2320      	movs	r3, #32
 8003970:	6822      	ldr	r2, [r4, #0]
 8003972:	439a      	bics	r2, r3
 8003974:	6022      	str	r2, [r4, #0]
 8003976:	0023      	movs	r3, r4
 8003978:	2200      	movs	r2, #0
 800397a:	3343      	adds	r3, #67	; 0x43
 800397c:	701a      	strb	r2, [r3, #0]
 800397e:	6863      	ldr	r3, [r4, #4]
 8003980:	60a3      	str	r3, [r4, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	db03      	blt.n	800398e <_printf_i+0x112>
 8003986:	2204      	movs	r2, #4
 8003988:	6821      	ldr	r1, [r4, #0]
 800398a:	4391      	bics	r1, r2
 800398c:	6021      	str	r1, [r4, #0]
 800398e:	2d00      	cmp	r5, #0
 8003990:	d102      	bne.n	8003998 <_printf_i+0x11c>
 8003992:	9e04      	ldr	r6, [sp, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00c      	beq.n	80039b2 <_printf_i+0x136>
 8003998:	9e04      	ldr	r6, [sp, #16]
 800399a:	0028      	movs	r0, r5
 800399c:	0039      	movs	r1, r7
 800399e:	f7fc fc43 	bl	8000228 <__aeabi_uidivmod>
 80039a2:	9b03      	ldr	r3, [sp, #12]
 80039a4:	3e01      	subs	r6, #1
 80039a6:	5c5b      	ldrb	r3, [r3, r1]
 80039a8:	7033      	strb	r3, [r6, #0]
 80039aa:	002b      	movs	r3, r5
 80039ac:	0005      	movs	r5, r0
 80039ae:	429f      	cmp	r7, r3
 80039b0:	d9f3      	bls.n	800399a <_printf_i+0x11e>
 80039b2:	2f08      	cmp	r7, #8
 80039b4:	d109      	bne.n	80039ca <_printf_i+0x14e>
 80039b6:	6823      	ldr	r3, [r4, #0]
 80039b8:	07db      	lsls	r3, r3, #31
 80039ba:	d506      	bpl.n	80039ca <_printf_i+0x14e>
 80039bc:	6863      	ldr	r3, [r4, #4]
 80039be:	6922      	ldr	r2, [r4, #16]
 80039c0:	4293      	cmp	r3, r2
 80039c2:	dc02      	bgt.n	80039ca <_printf_i+0x14e>
 80039c4:	2330      	movs	r3, #48	; 0x30
 80039c6:	3e01      	subs	r6, #1
 80039c8:	7033      	strb	r3, [r6, #0]
 80039ca:	9b04      	ldr	r3, [sp, #16]
 80039cc:	1b9b      	subs	r3, r3, r6
 80039ce:	6123      	str	r3, [r4, #16]
 80039d0:	9b07      	ldr	r3, [sp, #28]
 80039d2:	0021      	movs	r1, r4
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	9805      	ldr	r0, [sp, #20]
 80039d8:	9b06      	ldr	r3, [sp, #24]
 80039da:	aa09      	add	r2, sp, #36	; 0x24
 80039dc:	f7ff fede 	bl	800379c <_printf_common>
 80039e0:	1c43      	adds	r3, r0, #1
 80039e2:	d135      	bne.n	8003a50 <_printf_i+0x1d4>
 80039e4:	2001      	movs	r0, #1
 80039e6:	4240      	negs	r0, r0
 80039e8:	b00b      	add	sp, #44	; 0x2c
 80039ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039ec:	2220      	movs	r2, #32
 80039ee:	6809      	ldr	r1, [r1, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	6022      	str	r2, [r4, #0]
 80039f4:	0022      	movs	r2, r4
 80039f6:	2178      	movs	r1, #120	; 0x78
 80039f8:	3245      	adds	r2, #69	; 0x45
 80039fa:	7011      	strb	r1, [r2, #0]
 80039fc:	4a27      	ldr	r2, [pc, #156]	; (8003a9c <_printf_i+0x220>)
 80039fe:	e7a7      	b.n	8003950 <_printf_i+0xd4>
 8003a00:	0648      	lsls	r0, r1, #25
 8003a02:	d5ac      	bpl.n	800395e <_printf_i+0xe2>
 8003a04:	b2ad      	uxth	r5, r5
 8003a06:	e7aa      	b.n	800395e <_printf_i+0xe2>
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	680d      	ldr	r5, [r1, #0]
 8003a0c:	1d10      	adds	r0, r2, #4
 8003a0e:	6949      	ldr	r1, [r1, #20]
 8003a10:	6018      	str	r0, [r3, #0]
 8003a12:	6813      	ldr	r3, [r2, #0]
 8003a14:	062e      	lsls	r6, r5, #24
 8003a16:	d501      	bpl.n	8003a1c <_printf_i+0x1a0>
 8003a18:	6019      	str	r1, [r3, #0]
 8003a1a:	e002      	b.n	8003a22 <_printf_i+0x1a6>
 8003a1c:	066d      	lsls	r5, r5, #25
 8003a1e:	d5fb      	bpl.n	8003a18 <_printf_i+0x19c>
 8003a20:	8019      	strh	r1, [r3, #0]
 8003a22:	2300      	movs	r3, #0
 8003a24:	9e04      	ldr	r6, [sp, #16]
 8003a26:	6123      	str	r3, [r4, #16]
 8003a28:	e7d2      	b.n	80039d0 <_printf_i+0x154>
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	1d11      	adds	r1, r2, #4
 8003a2e:	6019      	str	r1, [r3, #0]
 8003a30:	6816      	ldr	r6, [r2, #0]
 8003a32:	2100      	movs	r1, #0
 8003a34:	0030      	movs	r0, r6
 8003a36:	6862      	ldr	r2, [r4, #4]
 8003a38:	f000 f832 	bl	8003aa0 <memchr>
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	d001      	beq.n	8003a44 <_printf_i+0x1c8>
 8003a40:	1b80      	subs	r0, r0, r6
 8003a42:	6060      	str	r0, [r4, #4]
 8003a44:	6863      	ldr	r3, [r4, #4]
 8003a46:	6123      	str	r3, [r4, #16]
 8003a48:	2300      	movs	r3, #0
 8003a4a:	9a04      	ldr	r2, [sp, #16]
 8003a4c:	7013      	strb	r3, [r2, #0]
 8003a4e:	e7bf      	b.n	80039d0 <_printf_i+0x154>
 8003a50:	6923      	ldr	r3, [r4, #16]
 8003a52:	0032      	movs	r2, r6
 8003a54:	9906      	ldr	r1, [sp, #24]
 8003a56:	9805      	ldr	r0, [sp, #20]
 8003a58:	9d07      	ldr	r5, [sp, #28]
 8003a5a:	47a8      	blx	r5
 8003a5c:	1c43      	adds	r3, r0, #1
 8003a5e:	d0c1      	beq.n	80039e4 <_printf_i+0x168>
 8003a60:	6823      	ldr	r3, [r4, #0]
 8003a62:	079b      	lsls	r3, r3, #30
 8003a64:	d415      	bmi.n	8003a92 <_printf_i+0x216>
 8003a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a68:	68e0      	ldr	r0, [r4, #12]
 8003a6a:	4298      	cmp	r0, r3
 8003a6c:	dabc      	bge.n	80039e8 <_printf_i+0x16c>
 8003a6e:	0018      	movs	r0, r3
 8003a70:	e7ba      	b.n	80039e8 <_printf_i+0x16c>
 8003a72:	0022      	movs	r2, r4
 8003a74:	2301      	movs	r3, #1
 8003a76:	9906      	ldr	r1, [sp, #24]
 8003a78:	9805      	ldr	r0, [sp, #20]
 8003a7a:	9e07      	ldr	r6, [sp, #28]
 8003a7c:	3219      	adds	r2, #25
 8003a7e:	47b0      	blx	r6
 8003a80:	1c43      	adds	r3, r0, #1
 8003a82:	d0af      	beq.n	80039e4 <_printf_i+0x168>
 8003a84:	3501      	adds	r5, #1
 8003a86:	68e3      	ldr	r3, [r4, #12]
 8003a88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a8a:	1a9b      	subs	r3, r3, r2
 8003a8c:	42ab      	cmp	r3, r5
 8003a8e:	dcf0      	bgt.n	8003a72 <_printf_i+0x1f6>
 8003a90:	e7e9      	b.n	8003a66 <_printf_i+0x1ea>
 8003a92:	2500      	movs	r5, #0
 8003a94:	e7f7      	b.n	8003a86 <_printf_i+0x20a>
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	08003de9 	.word	0x08003de9
 8003a9c:	08003dfa 	.word	0x08003dfa

08003aa0 <memchr>:
 8003aa0:	b2c9      	uxtb	r1, r1
 8003aa2:	1882      	adds	r2, r0, r2
 8003aa4:	4290      	cmp	r0, r2
 8003aa6:	d101      	bne.n	8003aac <memchr+0xc>
 8003aa8:	2000      	movs	r0, #0
 8003aaa:	4770      	bx	lr
 8003aac:	7803      	ldrb	r3, [r0, #0]
 8003aae:	428b      	cmp	r3, r1
 8003ab0:	d0fb      	beq.n	8003aaa <memchr+0xa>
 8003ab2:	3001      	adds	r0, #1
 8003ab4:	e7f6      	b.n	8003aa4 <memchr+0x4>

08003ab6 <memcpy>:
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	b510      	push	{r4, lr}
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d100      	bne.n	8003ac0 <memcpy+0xa>
 8003abe:	bd10      	pop	{r4, pc}
 8003ac0:	5ccc      	ldrb	r4, [r1, r3]
 8003ac2:	54c4      	strb	r4, [r0, r3]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	e7f8      	b.n	8003aba <memcpy+0x4>

08003ac8 <memmove>:
 8003ac8:	b510      	push	{r4, lr}
 8003aca:	4288      	cmp	r0, r1
 8003acc:	d902      	bls.n	8003ad4 <memmove+0xc>
 8003ace:	188b      	adds	r3, r1, r2
 8003ad0:	4298      	cmp	r0, r3
 8003ad2:	d303      	bcc.n	8003adc <memmove+0x14>
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	e007      	b.n	8003ae8 <memmove+0x20>
 8003ad8:	5c8b      	ldrb	r3, [r1, r2]
 8003ada:	5483      	strb	r3, [r0, r2]
 8003adc:	3a01      	subs	r2, #1
 8003ade:	d2fb      	bcs.n	8003ad8 <memmove+0x10>
 8003ae0:	bd10      	pop	{r4, pc}
 8003ae2:	5ccc      	ldrb	r4, [r1, r3]
 8003ae4:	54c4      	strb	r4, [r0, r3]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d1fa      	bne.n	8003ae2 <memmove+0x1a>
 8003aec:	e7f8      	b.n	8003ae0 <memmove+0x18>
	...

08003af0 <_free_r>:
 8003af0:	b570      	push	{r4, r5, r6, lr}
 8003af2:	0005      	movs	r5, r0
 8003af4:	2900      	cmp	r1, #0
 8003af6:	d010      	beq.n	8003b1a <_free_r+0x2a>
 8003af8:	1f0c      	subs	r4, r1, #4
 8003afa:	6823      	ldr	r3, [r4, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	da00      	bge.n	8003b02 <_free_r+0x12>
 8003b00:	18e4      	adds	r4, r4, r3
 8003b02:	0028      	movs	r0, r5
 8003b04:	f000 f8d4 	bl	8003cb0 <__malloc_lock>
 8003b08:	4a1d      	ldr	r2, [pc, #116]	; (8003b80 <_free_r+0x90>)
 8003b0a:	6813      	ldr	r3, [r2, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d105      	bne.n	8003b1c <_free_r+0x2c>
 8003b10:	6063      	str	r3, [r4, #4]
 8003b12:	6014      	str	r4, [r2, #0]
 8003b14:	0028      	movs	r0, r5
 8003b16:	f000 f8d3 	bl	8003cc0 <__malloc_unlock>
 8003b1a:	bd70      	pop	{r4, r5, r6, pc}
 8003b1c:	42a3      	cmp	r3, r4
 8003b1e:	d908      	bls.n	8003b32 <_free_r+0x42>
 8003b20:	6821      	ldr	r1, [r4, #0]
 8003b22:	1860      	adds	r0, r4, r1
 8003b24:	4283      	cmp	r3, r0
 8003b26:	d1f3      	bne.n	8003b10 <_free_r+0x20>
 8003b28:	6818      	ldr	r0, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	1841      	adds	r1, r0, r1
 8003b2e:	6021      	str	r1, [r4, #0]
 8003b30:	e7ee      	b.n	8003b10 <_free_r+0x20>
 8003b32:	001a      	movs	r2, r3
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <_free_r+0x4e>
 8003b3a:	42a3      	cmp	r3, r4
 8003b3c:	d9f9      	bls.n	8003b32 <_free_r+0x42>
 8003b3e:	6811      	ldr	r1, [r2, #0]
 8003b40:	1850      	adds	r0, r2, r1
 8003b42:	42a0      	cmp	r0, r4
 8003b44:	d10b      	bne.n	8003b5e <_free_r+0x6e>
 8003b46:	6820      	ldr	r0, [r4, #0]
 8003b48:	1809      	adds	r1, r1, r0
 8003b4a:	1850      	adds	r0, r2, r1
 8003b4c:	6011      	str	r1, [r2, #0]
 8003b4e:	4283      	cmp	r3, r0
 8003b50:	d1e0      	bne.n	8003b14 <_free_r+0x24>
 8003b52:	6818      	ldr	r0, [r3, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	1841      	adds	r1, r0, r1
 8003b58:	6011      	str	r1, [r2, #0]
 8003b5a:	6053      	str	r3, [r2, #4]
 8003b5c:	e7da      	b.n	8003b14 <_free_r+0x24>
 8003b5e:	42a0      	cmp	r0, r4
 8003b60:	d902      	bls.n	8003b68 <_free_r+0x78>
 8003b62:	230c      	movs	r3, #12
 8003b64:	602b      	str	r3, [r5, #0]
 8003b66:	e7d5      	b.n	8003b14 <_free_r+0x24>
 8003b68:	6821      	ldr	r1, [r4, #0]
 8003b6a:	1860      	adds	r0, r4, r1
 8003b6c:	4283      	cmp	r3, r0
 8003b6e:	d103      	bne.n	8003b78 <_free_r+0x88>
 8003b70:	6818      	ldr	r0, [r3, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	1841      	adds	r1, r0, r1
 8003b76:	6021      	str	r1, [r4, #0]
 8003b78:	6063      	str	r3, [r4, #4]
 8003b7a:	6054      	str	r4, [r2, #4]
 8003b7c:	e7ca      	b.n	8003b14 <_free_r+0x24>
 8003b7e:	46c0      	nop			; (mov r8, r8)
 8003b80:	20000090 	.word	0x20000090

08003b84 <_malloc_r>:
 8003b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b86:	2303      	movs	r3, #3
 8003b88:	1ccd      	adds	r5, r1, #3
 8003b8a:	439d      	bics	r5, r3
 8003b8c:	3508      	adds	r5, #8
 8003b8e:	0006      	movs	r6, r0
 8003b90:	2d0c      	cmp	r5, #12
 8003b92:	d21f      	bcs.n	8003bd4 <_malloc_r+0x50>
 8003b94:	250c      	movs	r5, #12
 8003b96:	42a9      	cmp	r1, r5
 8003b98:	d81e      	bhi.n	8003bd8 <_malloc_r+0x54>
 8003b9a:	0030      	movs	r0, r6
 8003b9c:	f000 f888 	bl	8003cb0 <__malloc_lock>
 8003ba0:	4925      	ldr	r1, [pc, #148]	; (8003c38 <_malloc_r+0xb4>)
 8003ba2:	680a      	ldr	r2, [r1, #0]
 8003ba4:	0014      	movs	r4, r2
 8003ba6:	2c00      	cmp	r4, #0
 8003ba8:	d11a      	bne.n	8003be0 <_malloc_r+0x5c>
 8003baa:	4f24      	ldr	r7, [pc, #144]	; (8003c3c <_malloc_r+0xb8>)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d104      	bne.n	8003bbc <_malloc_r+0x38>
 8003bb2:	0021      	movs	r1, r4
 8003bb4:	0030      	movs	r0, r6
 8003bb6:	f000 f869 	bl	8003c8c <_sbrk_r>
 8003bba:	6038      	str	r0, [r7, #0]
 8003bbc:	0029      	movs	r1, r5
 8003bbe:	0030      	movs	r0, r6
 8003bc0:	f000 f864 	bl	8003c8c <_sbrk_r>
 8003bc4:	1c43      	adds	r3, r0, #1
 8003bc6:	d12b      	bne.n	8003c20 <_malloc_r+0x9c>
 8003bc8:	230c      	movs	r3, #12
 8003bca:	0030      	movs	r0, r6
 8003bcc:	6033      	str	r3, [r6, #0]
 8003bce:	f000 f877 	bl	8003cc0 <__malloc_unlock>
 8003bd2:	e003      	b.n	8003bdc <_malloc_r+0x58>
 8003bd4:	2d00      	cmp	r5, #0
 8003bd6:	dade      	bge.n	8003b96 <_malloc_r+0x12>
 8003bd8:	230c      	movs	r3, #12
 8003bda:	6033      	str	r3, [r6, #0]
 8003bdc:	2000      	movs	r0, #0
 8003bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	1b5b      	subs	r3, r3, r5
 8003be4:	d419      	bmi.n	8003c1a <_malloc_r+0x96>
 8003be6:	2b0b      	cmp	r3, #11
 8003be8:	d903      	bls.n	8003bf2 <_malloc_r+0x6e>
 8003bea:	6023      	str	r3, [r4, #0]
 8003bec:	18e4      	adds	r4, r4, r3
 8003bee:	6025      	str	r5, [r4, #0]
 8003bf0:	e003      	b.n	8003bfa <_malloc_r+0x76>
 8003bf2:	6863      	ldr	r3, [r4, #4]
 8003bf4:	42a2      	cmp	r2, r4
 8003bf6:	d10e      	bne.n	8003c16 <_malloc_r+0x92>
 8003bf8:	600b      	str	r3, [r1, #0]
 8003bfa:	0030      	movs	r0, r6
 8003bfc:	f000 f860 	bl	8003cc0 <__malloc_unlock>
 8003c00:	0020      	movs	r0, r4
 8003c02:	2207      	movs	r2, #7
 8003c04:	300b      	adds	r0, #11
 8003c06:	1d23      	adds	r3, r4, #4
 8003c08:	4390      	bics	r0, r2
 8003c0a:	1ac2      	subs	r2, r0, r3
 8003c0c:	4298      	cmp	r0, r3
 8003c0e:	d0e6      	beq.n	8003bde <_malloc_r+0x5a>
 8003c10:	1a1b      	subs	r3, r3, r0
 8003c12:	50a3      	str	r3, [r4, r2]
 8003c14:	e7e3      	b.n	8003bde <_malloc_r+0x5a>
 8003c16:	6053      	str	r3, [r2, #4]
 8003c18:	e7ef      	b.n	8003bfa <_malloc_r+0x76>
 8003c1a:	0022      	movs	r2, r4
 8003c1c:	6864      	ldr	r4, [r4, #4]
 8003c1e:	e7c2      	b.n	8003ba6 <_malloc_r+0x22>
 8003c20:	2303      	movs	r3, #3
 8003c22:	1cc4      	adds	r4, r0, #3
 8003c24:	439c      	bics	r4, r3
 8003c26:	42a0      	cmp	r0, r4
 8003c28:	d0e1      	beq.n	8003bee <_malloc_r+0x6a>
 8003c2a:	1a21      	subs	r1, r4, r0
 8003c2c:	0030      	movs	r0, r6
 8003c2e:	f000 f82d 	bl	8003c8c <_sbrk_r>
 8003c32:	1c43      	adds	r3, r0, #1
 8003c34:	d1db      	bne.n	8003bee <_malloc_r+0x6a>
 8003c36:	e7c7      	b.n	8003bc8 <_malloc_r+0x44>
 8003c38:	20000090 	.word	0x20000090
 8003c3c:	20000094 	.word	0x20000094

08003c40 <_realloc_r>:
 8003c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c42:	0007      	movs	r7, r0
 8003c44:	000d      	movs	r5, r1
 8003c46:	0016      	movs	r6, r2
 8003c48:	2900      	cmp	r1, #0
 8003c4a:	d105      	bne.n	8003c58 <_realloc_r+0x18>
 8003c4c:	0011      	movs	r1, r2
 8003c4e:	f7ff ff99 	bl	8003b84 <_malloc_r>
 8003c52:	0004      	movs	r4, r0
 8003c54:	0020      	movs	r0, r4
 8003c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c58:	2a00      	cmp	r2, #0
 8003c5a:	d103      	bne.n	8003c64 <_realloc_r+0x24>
 8003c5c:	f7ff ff48 	bl	8003af0 <_free_r>
 8003c60:	0034      	movs	r4, r6
 8003c62:	e7f7      	b.n	8003c54 <_realloc_r+0x14>
 8003c64:	f000 f834 	bl	8003cd0 <_malloc_usable_size_r>
 8003c68:	002c      	movs	r4, r5
 8003c6a:	42b0      	cmp	r0, r6
 8003c6c:	d2f2      	bcs.n	8003c54 <_realloc_r+0x14>
 8003c6e:	0031      	movs	r1, r6
 8003c70:	0038      	movs	r0, r7
 8003c72:	f7ff ff87 	bl	8003b84 <_malloc_r>
 8003c76:	1e04      	subs	r4, r0, #0
 8003c78:	d0ec      	beq.n	8003c54 <_realloc_r+0x14>
 8003c7a:	0029      	movs	r1, r5
 8003c7c:	0032      	movs	r2, r6
 8003c7e:	f7ff ff1a 	bl	8003ab6 <memcpy>
 8003c82:	0029      	movs	r1, r5
 8003c84:	0038      	movs	r0, r7
 8003c86:	f7ff ff33 	bl	8003af0 <_free_r>
 8003c8a:	e7e3      	b.n	8003c54 <_realloc_r+0x14>

08003c8c <_sbrk_r>:
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	b570      	push	{r4, r5, r6, lr}
 8003c90:	4d06      	ldr	r5, [pc, #24]	; (8003cac <_sbrk_r+0x20>)
 8003c92:	0004      	movs	r4, r0
 8003c94:	0008      	movs	r0, r1
 8003c96:	602b      	str	r3, [r5, #0]
 8003c98:	f7fc ff6a 	bl	8000b70 <_sbrk>
 8003c9c:	1c43      	adds	r3, r0, #1
 8003c9e:	d103      	bne.n	8003ca8 <_sbrk_r+0x1c>
 8003ca0:	682b      	ldr	r3, [r5, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d000      	beq.n	8003ca8 <_sbrk_r+0x1c>
 8003ca6:	6023      	str	r3, [r4, #0]
 8003ca8:	bd70      	pop	{r4, r5, r6, pc}
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	20000188 	.word	0x20000188

08003cb0 <__malloc_lock>:
 8003cb0:	b510      	push	{r4, lr}
 8003cb2:	4802      	ldr	r0, [pc, #8]	; (8003cbc <__malloc_lock+0xc>)
 8003cb4:	f000 f814 	bl	8003ce0 <__retarget_lock_acquire_recursive>
 8003cb8:	bd10      	pop	{r4, pc}
 8003cba:	46c0      	nop			; (mov r8, r8)
 8003cbc:	20000190 	.word	0x20000190

08003cc0 <__malloc_unlock>:
 8003cc0:	b510      	push	{r4, lr}
 8003cc2:	4802      	ldr	r0, [pc, #8]	; (8003ccc <__malloc_unlock+0xc>)
 8003cc4:	f000 f80d 	bl	8003ce2 <__retarget_lock_release_recursive>
 8003cc8:	bd10      	pop	{r4, pc}
 8003cca:	46c0      	nop			; (mov r8, r8)
 8003ccc:	20000190 	.word	0x20000190

08003cd0 <_malloc_usable_size_r>:
 8003cd0:	1f0b      	subs	r3, r1, #4
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	1f18      	subs	r0, r3, #4
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	da01      	bge.n	8003cde <_malloc_usable_size_r+0xe>
 8003cda:	580b      	ldr	r3, [r1, r0]
 8003cdc:	18c0      	adds	r0, r0, r3
 8003cde:	4770      	bx	lr

08003ce0 <__retarget_lock_acquire_recursive>:
 8003ce0:	4770      	bx	lr

08003ce2 <__retarget_lock_release_recursive>:
 8003ce2:	4770      	bx	lr

08003ce4 <_init>:
 8003ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce6:	46c0      	nop			; (mov r8, r8)
 8003ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cea:	bc08      	pop	{r3}
 8003cec:	469e      	mov	lr, r3
 8003cee:	4770      	bx	lr

08003cf0 <_fini>:
 8003cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf2:	46c0      	nop			; (mov r8, r8)
 8003cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cf6:	bc08      	pop	{r3}
 8003cf8:	469e      	mov	lr, r3
 8003cfa:	4770      	bx	lr
